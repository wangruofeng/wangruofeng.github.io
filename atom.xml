<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王若风的技术博客</title>
  
  <subtitle>世界尽头の冷酷仙境</subtitle>
  <link href="https://blog.wangruofeng007.com/atom.xml" rel="self"/>
  
  <link href="https://blog.wangruofeng007.com/"/>
  <updated>2024-11-02T06:28:43.336Z</updated>
  <id>https://blog.wangruofeng007.com/</id>
  
  <author>
    <name>王若风</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo 升级到 V7.3</title>
    <link href="https://blog.wangruofeng007.com/2024/11/02/Hexo-%E5%8D%87%E7%BA%A7%E5%88%B0-V7-3/"/>
    <id>https://blog.wangruofeng007.com/2024/11/02/Hexo-%E5%8D%87%E7%BA%A7%E5%88%B0-V7-3/</id>
    <published>2024-11-02T06:04:25.000Z</published>
    <updated>2024-11-02T06:28:43.336Z</updated>
    
    <content type="html"><![CDATA[<p>最近换了台 Apple M2 电脑，整个软件都进行重装，<strong>Hexo</strong> 年久失修，在设置的时候出现很多警告 ⚠️，看了一下日志主要原因是以前版本依赖的 node 版本太低了，还有相关依赖库因为太旧有不少安全漏洞，查了一下 Hexo 最新发布的为 <a href="https://hexo.io/news/2024/07/02/hexo-7-3-0-released/">7.3 版本 </a>，于是打算整体迁移一下。</p><span id="more"></span><h1 id="安装-Hexo-7-3"><a href="#安装-Hexo-7-3" class="headerlink" title="安装 Hexo 7.3"></a>安装 Hexo 7.3</h1><p>首先 Hexo 的安装可以用 brew 了。使用 <code>brew install hexo</code> 安装，安装好之后 Hexo 在 <code>/opt/homebrew/Cellar/hexo/7.3.0</code> 下。</p><p>使用 Hexo 的如下指令完成建站</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>当前环境配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo: 7.3.0</span><br><span class="line">node：v22.11.0</span><br><span class="line">npm：10.9.0</span><br><span class="line">brew：4.4.2</span><br></pre></td></tr></table></figure><h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><p>资源迁移：建完站之后，把之前的文章（source&#x2F;_posts）和静态资源（例如图片 source&#x2F;images）都迁移过去。</p><p>如果博客有映射自己的域名，记得把 CNAME 文件也迁移一下</p><p>配置主题：由于我定制过 Next 主题，就直接把旧项目的主题直接拷贝到新项目的 themes&#x2F;next 目录即可。如果是第一次建站需要在 themes 目录下把 <a href="https://github.com/next-theme/hexo-theme-next">Next</a> clone 下来：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/next-theme/hexo-theme-next.git next</span><br></pre></td></tr></table></figure><p>配置 <code>_config.yml</code> 主题为 next：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>配置语言：在<code>_config.yml</code>中更新博客语言配置，默认为英语</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure><p>配置链接风格：修改 <code>_config.yml</code> 的 permalink 生成格式，这里配置成短链风格，如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认风格</span></span><br><span class="line"><span class="comment"># permalink: :year/:month/:day/:title/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文章 url 风格调整成短链风</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink/</span></span><br></pre></td></tr></table></figure><h1 id="配置分类"><a href="#配置分类" class="headerlink" title="配置分类"></a>配置分类</h1><p>这步配置可以参考<a href="https://tohugo.com/2021/01/26/%E5%B7%A5%E5%85%B7%E9%85%8D%E7%BD%AE/Hexo%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE%EF%BC%88%E5%9C%A8Next%E4%B8%BB%E9%A2%98%E4%B8%8B%EF%BC%89/">这个帖子</a></p><p>打开命令行，进入博客项目所在的文件夹下，执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>成功会有提示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ~/path_to_blog/source/categories/index.md</span><br></pre></td></tr></table></figure><p>这样我们就创建好了分类页面了。但是这个时候主题还不会识别这个页面为分类页；所以我们需要编辑这个新建的页面，让主题识别这个页面，并自动为这个页面显示分类。</p><p>编辑<code>index.md</code>在文件中添加 type: “categories”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line"><span class="built_in">date</span>: 2024-11-02 13:43:56</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;categories&quot;</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><h1 id="配置标签"><a href="#配置标签" class="headerlink" title="配置标签"></a>配置标签</h1><p>同理 配置 tags</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>成功会有提示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Created: ~/path_to_blog/source/tags/index.md</span><br></pre></td></tr></table></figure><p>编辑<code>index.md</code>在文件中添加 type: “tags”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line"><span class="built_in">date</span>: 2024-11-02 13:44:19</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;tags&quot;</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><h2 id="站内搜索"><a href="#站内搜索" class="headerlink" title="站内搜索"></a>站内搜索</h2><p>安装 <code>hexo-generator-searchdb</code> 插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>在 <code>_config.yml</code> 中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.json</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><h2 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h2><p>安装 <code>npm install hexo-word-counter</code> 插件 , <a href="https://hexo-next.readthedocs.io/zh-cn/latest/next/advanced/%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1/">参考</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-word-counter</span><br><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h2 id="发布插件"><a href="#发布插件" class="headerlink" title="发布插件"></a>发布插件</h2><p>然后需要在 blog 根目录下安装以下插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>因为我在 <code>config.yml</code> 中配置好了 deploy 信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">&quot;Site updated: <span class="template-variable">&#123;&#123; now(&#x27;YYYY-MM-DD HH:mm&#x27;) &#125;&#125;</span>&quot;</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:wangruofeng/wangruofeng.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 发布新文章</span></span><br><span class="line">hexo new <span class="string">&quot;My New Post&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预览</span></span><br><span class="line">hexo s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成文件到 public 目录</span></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布到 Github Pages</span></span><br><span class="line">hexo d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除缓存</span></span><br><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>需要注意，如果改了文件发布的话，要先 <code>hexo g</code> ，然后再 <code>hexo d</code> 。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近换了台 Apple M2 电脑，整个软件都进行重装，&lt;strong&gt;Hexo&lt;/strong&gt; 年久失修，在设置的时候出现很多警告 ⚠️，看了一下日志主要原因是以前版本依赖的 node 版本太低了，还有相关依赖库因为太旧有不少安全漏洞，查了一下 Hexo 最新发布的为 &lt;a href=&quot;https://hexo.io/news/2024/07/02/hexo-7-3-0-released/&quot;&gt;7.3 版本 &lt;/a&gt;，于是打算整体迁移一下。&lt;/p&gt;</summary>
    
    
    
    <category term="博客搭建" scheme="https://blog.wangruofeng007.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="https://blog.wangruofeng007.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>物联网通讯协议</title>
    <link href="https://blog.wangruofeng007.com/2024/02/24/%E7%89%A9%E8%81%94%E7%BD%91%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/"/>
    <id>https://blog.wangruofeng007.com/2024/02/24/%E7%89%A9%E8%81%94%E7%BD%91%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/</id>
    <published>2024-02-24T04:16:29.000Z</published>
    <updated>2024-11-02T03:36:52.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="物联网协议分类：-接入协议、通讯协议"><a href="#物联网协议分类：-接入协议、通讯协议" class="headerlink" title="物联网协议分类： 接入协议、通讯协议"></a>物联网协议分类： 接入协议、通讯协议</h1><ul><li>接入协议：一般负责子网内设备间的组网及通信。</li><li>通讯协议：主要是运行在传统互联网TCP&#x2F;IP协议之上的设备通讯协议，负责设备通过互联网进行数据交换及通信。</li></ul><span id="more"></span><h1 id="一、物理层、数据链路层协议"><a href="#一、物理层、数据链路层协议" class="headerlink" title="一、物理层、数据链路层协议"></a>一、物理层、数据链路层协议</h1><h2 id="1-远距离蜂窝通讯"><a href="#1-远距离蜂窝通讯" class="headerlink" title="1. 远距离蜂窝通讯"></a>1. 远距离蜂窝通讯</h2><ul><li>2G、3G、4G通讯协议</li><li>NB-loT (Narrow Brand Internet of Things) 窄带物联网</li><li>5G</li></ul><h2 id="2-远距离非蜂窝通讯"><a href="#2-远距离非蜂窝通讯" class="headerlink" title="2. 远距离非蜂窝通讯"></a>2. 远距离非蜂窝通讯</h2><ul><li>WiFi</li><li>ZigBee</li><li>LoRa（LongRange）</li></ul><h2 id="3-近距离通讯"><a href="#3-近距离通讯" class="headerlink" title="3. 近距离通讯"></a>3. 近距离通讯</h2><ul><li>RFID（Radio Frequency Identification）射频识别</li><li>NFC</li><li>Bluetooth（BLE）</li><li>UWB （Ultra Wideband）无载波无线通讯技术</li></ul><h2 id="4-有线通信"><a href="#4-有线通信" class="headerlink" title="4. 有线通信"></a>4. 有线通信</h2><ul><li>USB（Universal Series Bus）通用串行总线</li><li>串口通讯协议，RS-232、RS-422 和 RS-485</li><li>以太网</li><li>MBus（symphonic mbus）远程抄表系统</li></ul><h1 id="二、网络层、传输协议"><a href="#二、网络层、传输协议" class="headerlink" title="二、网络层、传输协议"></a>二、网络层、传输协议</h1><ul><li>IPv4</li><li>IPv6</li><li>TCP（Transmission Control Protocol）传输控制协议</li><li>6LowPAN</li></ul><h1 id="三、应用层协议"><a href="#三、应用层协议" class="headerlink" title="三、应用层协议"></a>三、应用层协议</h1><ul><li>MQTT（Message Queue Telemetry Transport）遥测传输协议</li><li>CoAP（Constrained Application Protocol）协议</li><li>REST &#x2F; HTTP协议</li><li>DDS（Data Distribution Service）分布式实时数据分发服务中间件协议</li><li>AMQP（Advanced Message Queuing Protocol）高级消息队列协议</li><li>XMPP（Extensible messaging and presence protocol 基于XML协议）可扩展通讯和表示协议</li></ul><h1 id="四、部分协议比较"><a href="#四、部分协议比较" class="headerlink" title="四、部分协议比较"></a>四、部分协议比较</h1><h2 id="1-NB-IoT协议和LoRa协议比较"><a href="#1-NB-IoT协议和LoRa协议比较" class="headerlink" title="1. NB-IoT协议和LoRa协议比较"></a>1. NB-IoT协议和LoRa协议比较</h2><p>第一，频段。LoRa 工作在 1GHz 以下的非授权频段，在应用时不需要额外付费，NB-IoT 和蜂窝通信使用 1GHz 以下的频段是2113授权的，是需要收费的。</p><p>第二，电池供电寿命。LoRa模块在处理干扰、网络5261重迭、可伸缩性等方面具有独特的特性，但却不能提供像蜂窝协议一样的服务质量4102。NB-IoT出于对服务质量的考虑，不能提供类似LoRa一样的电池寿命。</p><p>第三，设备成本。对终端节点来说，LoRa协议比NB-IoT更简单，更容易开发并且1653对于微处理器的适用和兼容性更好。同时低成本、技术相对成熟的LoRa模块已经可以在市场上找到了，并且还会有升级版本陆续出来。</p><p>第四，网络覆盖和部署时间表。NB-IoT标准在2016年公布，除回网络部署之外，相应的商业化和产业链的建立还需要更长的时间和努力去探索。LoRa的整个产业链相对已经较为成熟了，产品也处于“蓄势待答发”的状态，同时全球很多国家正在进行或者已经完成了全国性的网络部署。</p><h2 id="2-蓝牙、WiFi、ZigBee协议比较"><a href="#2-蓝牙、WiFi、ZigBee协议比较" class="headerlink" title="2. 蓝牙、WiFi、ZigBee协议比较"></a>2. 蓝牙、WiFi、ZigBee协议比较</h2><p>目前来说，WiFi的优势是应用广泛，已经普及到千家万户；ZigBee的优势是低功耗和自组网；UWB无载波无线通信技术的优势是传输速率；蓝牙的优势组网简单。然而，这3种技术，也都有各自的不足，没有一种技术能完全满足智能家居的全部要求。</p><p>蓝牙技术的出现使得短距离无线通信成为可能，但其协议较复杂、功耗高、成本高等特点不太适用于要求低成本、低功耗的工业控制和家庭网络。尤其蓝牙最大的障碍在于传输范围受限，一般有效的范围在10米左右，抗干扰能力不强、信息安全问题等问题也是制约其进一步发展和大规模应用的主要因素。</p><p>WiFi也是是一种短距离无线传输技术，可以随时接入无线信号，移动性强，比较适合在办公室及家庭的环境下应用。当然WiFi也存在一个致命缺点。由于WiFi采用的是射频技术，通过空气发送和接收数据，使用无线电波传输数据信号，比较容易受到外界的干扰。</p><p>ZigBee则是国际通行的无线通讯技术，它的每个网络端口可以最多接入6.5万多个端口，适合家居、工业、农业等多个领域使用，而蓝牙和WiFi网端只能接入10个端口，显然不能适应家庭需要。ZigBee还具有低功耗和低成本优势。</p><h2 id="3-MQTT协议和CoAP协议比较"><a href="#3-MQTT协议和CoAP协议比较" class="headerlink" title="3. MQTT协议和CoAP协议比较"></a>3. MQTT协议和CoAP协议比较</h2><p>MQTT是多对多通讯协议用于在不同客户端之间通过中间代理传送消息，解耦生产者与消费者，通过使得客户端发布，让代理决定路由并且拷贝消息。虽然MQTT支持一些持久化，最好还是作为实时数据通讯总线。</p><p>CoAP主要是一个点对点协议，用于在客户端与服务器之间传输状态信息。虽然支持观察资源，CoAP最好适合状态传输模型，不是完全基于事件。</p><p>MQTT客户端建立长连接TCP，这通常表示没有问题，CoAP客户端与服务器都发送与接收UDP数据包，在NAT环境中，隧道或者端口转发可以用于允许CoAP，或者像LWM2M，设备也许会先初始化前端连接。</p><p>MQTT不提供支持消息打类型标记或者其他元数据帮助客户端理解，MQTT消息可用于任何目的，但是所有的客户端必须知道向上的数据格式以允许通讯，CoAP，相反地，提供内置支持内容协商与发现，允许设备相互探测以找到交换数据的方式。</p><p>两种协议各有优缺点，选择合适的取决于自己的应用。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://mp.weixin.qq.com/s/n8PnUuubTHM7ZPmmtD5jfA">【知识分享】您了解物联网通信协议5G、NB-Iot、LoRa、ZigBee、NFC…….都是啥吗？</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;物联网协议分类：-接入协议、通讯协议&quot;&gt;&lt;a href=&quot;#物联网协议分类：-接入协议、通讯协议&quot; class=&quot;headerlink&quot; title=&quot;物联网协议分类： 接入协议、通讯协议&quot;&gt;&lt;/a&gt;物联网协议分类： 接入协议、通讯协议&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;接入协议：一般负责子网内设备间的组网及通信。&lt;/li&gt;
&lt;li&gt;通讯协议：主要是运行在传统互联网TCP&amp;#x2F;IP协议之上的设备通讯协议，负责设备通过互联网进行数据交换及通信。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="物联网" scheme="https://blog.wangruofeng007.com/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>几分钟内本地快速搭建ChatGPT环境</title>
    <link href="https://blog.wangruofeng007.com/2023/07/31/%E5%87%A0%E5%88%86%E9%92%9F%E5%86%85%E6%9C%AC%E5%9C%B0%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAChatGPT%E7%8E%AF%E5%A2%83/"/>
    <id>https://blog.wangruofeng007.com/2023/07/31/%E5%87%A0%E5%88%86%E9%92%9F%E5%86%85%E6%9C%AC%E5%9C%B0%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAChatGPT%E7%8E%AF%E5%A2%83/</id>
    <published>2023-07-31T15:04:59.000Z</published>
    <updated>2024-11-02T03:36:52.416Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>使用Docker虚拟机，几步在本地快速搭建ChatGPT环境，免API，免翻墙，即可使用纯正OpenAI的全部功能，完全免费！</p><p><img src="/images/ChatGPT/ChatGPT_info.png"></p><span id="more"></span><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="下载安装Docker"><a href="#下载安装Docker" class="headerlink" title="下载安装Docker"></a>下载安装Docker</h2><p>官网下载地址：<a href="https://www.docker.com/">https://www.docker.com/</a></p><h2 id="拉取pandora镜像"><a href="#拉取pandora镜像" class="headerlink" title="拉取pandora镜像"></a>拉取pandora镜像</h2><p>pandora源码地址：<a href="https://github.com/pengzhile/pandora">https://github.com/pengzhile/pandora</a></p><p>安装好Docker后，打开Mac终端，输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull pengzhile/pandora</span><br></pre></td></tr></table></figure><h2 id="启动pandora镜像"><a href="#启动pandora镜像" class="headerlink" title="启动pandora镜像"></a>启动pandora镜像</h2><p>等上面镜像下载完成后，输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  -e PANDORA_CLOUD=cloud -e PANDORA_SERVER=0.0.0.0:8899 -p 8899:8899 -d pengzhile/pandora</span><br></pre></td></tr></table></figure><p>成功运行效果<br><img src="/images/ChatGPT/docker_run.png" alt="docker_run"></p><h2 id="获取AccessToken"><a href="#获取AccessToken" class="headerlink" title="获取AccessToken"></a>获取AccessToken</h2><p>通过登录OpenAI官方API，登录成功后，然后访问 <a href="https://chat.openai.com/api/auth/session">这里</a> 即可拿到官方的Access Token（ps：这一步需要翻墙才能完成）</p><p>获取成功后效果图<br><img src="/images/ChatGPT/as.jpg" alt="access_token"></p><blockquote><p>注意：Token目前看有效期是一个月，一个月后需要重新获取</p></blockquote><h2 id="访问本地链接"><a href="#访问本地链接" class="headerlink" title="访问本地链接"></a>访问本地链接</h2><p><a href="http://127.0.0.1:8899/">http://127.0.0.1:8899</a> </p><p>使用上一步获取的Access Token登录即可<br><img src="/images/ChatGPT/login_with_access_token.png" alt="login_with_access_token"></p><p>登录成功后，即可使用OpenAI的全部功能，完全免费！🎉🎉🎉<br><img src="/images/ChatGPT/chat_gpt_demo.png" alt="chat_gpt_demo"></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;使用Docker虚拟机，几步在本地快速搭建ChatGPT环境，免API，免翻墙，即可使用纯正OpenAI的全部功能，完全免费！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/ChatGPT/ChatGPT_info.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="ChatGPT, OpenAI, AIGC" scheme="https://blog.wangruofeng007.com/tags/ChatGPT-OpenAI-AIGC/"/>
    
  </entry>
  
  <entry>
    <title>Flutter最佳实践整理</title>
    <link href="https://blog.wangruofeng007.com/2021/03/28/Flutter%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E6%95%B4%E7%90%86/"/>
    <id>https://blog.wangruofeng007.com/2021/03/28/Flutter%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E6%95%B4%E7%90%86/</id>
    <published>2021-03-28T04:10:21.000Z</published>
    <updated>2024-11-02T03:36:52.414Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/cover_img/johannes-andersson-v5gGwubKzEA-unsplash.jpg"></p><span id="more"></span><h2 id="Text-以字符的方式截断"><a href="#Text-以字符的方式截断" class="headerlink" title="Text 以字符的方式截断"></a>Text 以字符的方式截断</h2><p><a href="https://github.com/flutter/flutter/issues/52869">https://github.com/flutter/flutter/issues/52869</a></p><p>在flutter中，Text控件默认的溢出显示模式是<code>TextOverflow.fade</code> ,就是淡出</p><p>在iOS或者Android平台默认的文件截断模式一般是…省略，flutter里面对应的截断模式为<code>TextOverflow.ellipsis</code> ,不过这里的截断是英文按照单词来的，这样的模式会导致如果最后一个单词很长时，截断显示会整理省略而不是最后超出的字符省略，导致模块可能有一大块空白。</p><p>Dart系统定义的截断模式</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">How overflowing text should be handled.</span></span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">A [TextOverflow] can be passed to [Text] and [RichText] via their</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[Text.overflow] and [RichText.overflow] properties respectively.</span></span></span><br><span class="line"><span class="keyword">enum</span> TextOverflow &#123;</span><br><span class="line">  <span class="comment">/// <span class="language-markdown">Clip the overflowing text to fix its container.</span></span></span><br><span class="line">  clip,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">Fade the overflowing text to transparent.</span></span></span><br><span class="line">  fade,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">Use an ellipsis to indicate that the text has overflowed.</span></span></span><br><span class="line">  ellipsis,</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">Render overflowing text outside of its container.</span></span></span><br><span class="line">  visible,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何解决英文单词被整体截断呢？</p><p>将单词的每个字符切割开，插入宽度0的占位字符，打破系统默认的机制，这样就可以以字符为单位省略了</p><blockquote><p>需要注意。这种方式相当于修改了文本的内容，一般文本最大一行显示可以用，如果文本支持2行以及以上的显示的话，将会导致换行不再按照字符进行而按照单词进行</p></blockquote><p>下面是Example实现</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">extension TextOverflowUtil on String &#123;</span><br><span class="line">  <span class="comment">/// 将flutter系统默认的单词截断模式转换成字符截断模式</span></span><br><span class="line">  <span class="comment">/// 通过向文本中插入宽度为0的空格实现</span></span><br><span class="line">  <span class="keyword">static</span> String toCharacterBreakStr(String word) &#123;</span><br><span class="line">    <span class="keyword">if</span> (word == null || word.isEmpty) &#123;</span><br><span class="line">      <span class="keyword">return</span> word;</span><br><span class="line">    &#125;</span><br><span class="line">    String breakWord = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    word.runes.forEach((element) &#123;</span><br><span class="line">      breakWord += String.fromCharCode(element);</span><br><span class="line">      breakWord += <span class="string">&#x27;\u200B&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> breakWord;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文本划线"><a href="#文本划线" class="headerlink" title="文本划线"></a>文本划线</h2><p>通过Text的decoration属性来实现划线</p><ul><li>TextDecoration.none        没有</li><li>TextDecoration.underline   下划线</li><li>TextDecoration.overline    上划线</li><li>TextDecoration.lineThrough 中间的线（删除线）</li></ul><p>&#x2F;&#x2F; 划线相关的属性设置<br>decorationColor   decoration划线的颜色<br>decorationStyle   decoration划线的样式</p><ul><li>TextDecorationStyle.solid   实线</li><li>TextDecorationStyle.double  画两条线</li><li>TextDecorationStyle.dotted  点线（一个点一个点的）</li><li>TextDecorationStyle.dashed  虚线（一个长方形一个长方形的线）</li><li>TextDecorationStyle.wavy    正玄曲</li></ul><p>效果图如下</p><p><img src="/images/best_practise/best_practise_01.png" alt="best_practise_01"></p><h2 id="VS-Code实现保存时自动代码格式化"><a href="#VS-Code实现保存时自动代码格式化" class="headerlink" title="VS Code实现保存时自动代码格式化"></a>VS Code实现保存时自动代码格式化</h2><p>VS Code中代码格式化默认快捷键：【Shift】+【Alt】+ F</p><p>实现手动保存（Ctril + S）时自动触发代码格式化：</p><p>1）Code → Perference → Settting 点击右上角（Open Setting(JSON) ）</p><p><img src="/images/best_practise/best_practise_02.png" alt="best_practise_02"></p><p>2）在settings.json下的【工作区设置】中添加以下语句：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;editor.formatOnType&quot;</span>: <span class="keyword">true</span>,</span><br><span class="line"><span class="string">&quot;editor.formatOnSave&quot;</span>: <span class="keyword">true</span></span><br></pre></td></tr></table></figure><p><img src="/images/best_practise/best_practise_03.png" alt="best_practise_03"></p><h2 id="解决-setState-called-after-diapose"><a href="#解决-setState-called-after-diapose" class="headerlink" title="解决 setState() called after diapose()"></a>解决 setState() called after diapose()</h2><p>网络请求成功前退出了页面，该 State 被从对象树卸载掉，而这时回调了网络请求的方法，方法中带有 setState 的调用，也就导致了该问题。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (mounted) &#123;</span><br><span class="line">  setState(() &#123;</span><br><span class="line">    <span class="keyword">this</span>._books = dataModel.books;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Waiting-for-another-flutter-command-to-release-the-startup-lock…等待另一个flutter命令释放启动锁"><a href="#Waiting-for-another-flutter-command-to-release-the-startup-lock…等待另一个flutter命令释放启动锁" class="headerlink" title="Waiting for another flutter command to release the startup lock…等待另一个flutter命令释放启动锁"></a>Waiting for another flutter command to release the startup lock…等待另一个flutter命令释放启动锁</h2><ol><li>退出 VS Code。</li><li>打开 flutter 安装目录 如：…\flutter\flutter\bin\cache 删除里面的 lockfile。</li><li>重启打开VS Code。</li></ol><p>原因：当你的项目异常关闭，下次启动就会出现上面的一行话，<br>此时需要打开 flutter&#x2F;bin&#x2F;cache&#x2F;lockfile，删除就行了，<br>或者直接用下面的命令：rm .&#x2F;flutter&#x2F;bin&#x2F;cache&#x2F;lockfile。</p><h2 id="在Stateless控件内部或者浮层内部刷新，可以使用StatefullBuilder"><a href="#在Stateless控件内部或者浮层内部刷新，可以使用StatefullBuilder" class="headerlink" title="在Stateless控件内部或者浮层内部刷新，可以使用StatefullBuilder"></a>在Stateless控件内部或者浮层内部刷新，可以使用StatefullBuilder</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">showDialog&lt;<span class="keyword">void</span>&gt;(</span><br><span class="line">  context: context,</span><br><span class="line">  builder: (BuildContext context) &#123;</span><br><span class="line">    <span class="built_in">int</span> selectedRadio = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> AlertDialog(</span><br><span class="line">      content: StatefulBuilder(</span><br><span class="line">        builder: (BuildContext context, StateSetter setState) &#123;</span><br><span class="line">          <span class="keyword">return</span> Column(</span><br><span class="line">            mainAxisSize: MainAxisSize.min,</span><br><span class="line">            children: <span class="built_in">List</span>&lt;Widget&gt;.generate(<span class="number">4</span>, (<span class="built_in">int</span> index) &#123;</span><br><span class="line">              <span class="keyword">return</span> Radio&lt;<span class="built_in">int</span>&gt;(</span><br><span class="line">                value: index,</span><br><span class="line">                groupValue: selectedRadio,</span><br><span class="line">                onChanged: (<span class="built_in">int</span> value) &#123;</span><br><span class="line">                  setState(() =&gt; selectedRadio = value);</span><br><span class="line">                &#125;,</span><br><span class="line">              );</span><br><span class="line">            &#125;),</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这里通过selectedRadio变量记录Radio的是否选中的状态</p><h2 id="平台相关的判断"><a href="#平台相关的判断" class="headerlink" title="平台相关的判断"></a>平台相关的判断</h2><p>只关心是否是iOS和Android的情况下不需要依赖<code>context</code>，优先使用<code>Platform</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Platform.isAndroid</span><br><span class="line">Platform.isIOS</span><br></pre></td></tr></table></figure><p>需要详细知道具体哪个平台才使用<code>TargetPlatform</code></p><p>这个API的缺点是需要依赖<code>context</code>这个参数</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> platform = Theme.of(context).platform;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (platform == TargetPlatform.android) &#123;</span><br><span class="line">...</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (platform == TargetPlatform.iOS) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ScrollView-滑动隐藏键盘"><a href="#ScrollView-滑动隐藏键盘" class="headerlink" title="ScrollView 滑动隐藏键盘"></a>ScrollView 滑动隐藏键盘</h2><p><a href="https://stackoverflow.com/questions/55306855/hide-keyboard-on-scroll-in-flutter">https://stackoverflow.com/questions/55306855/hide-keyboard-on-scroll-in-flutter</a></p><p>使用ScrollView的<code>keyboardDismissBehavior</code>属性</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ListView(</span><br><span class="line">keyboardDismissBehavior<span class="punctuation">:</span> ScrollViewKeyboardDismissBehavior.onDrag</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="回调写法"><a href="#回调写法" class="headerlink" title="回调写法"></a>回调写法</h2><h3 id="a-无参数回调"><a href="#a-无参数回调" class="headerlink" title="a.无参数回调"></a>a.无参数回调</h3><p>VoidCallback</p><h3 id="b-有一个参数回调"><a href="#b-有一个参数回调" class="headerlink" title="b.有一个参数回调"></a>b.有一个参数回调</h3><p>ValueChanged</p><h3 id="c-参数大于一个"><a href="#c-参数大于一个" class="headerlink" title="c.参数大于一个"></a>c.参数大于一个</h3><p>可以通过<code>typedef</code>自定义一个函数</p><p>下面是Example用法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> VoidCallback onPressed;</span><br><span class="line"><span class="keyword">final</span> ValueChanged&lt;T&gt; onSelectHandler;</span><br><span class="line"><span class="keyword">typedef</span> ImageSwiperOnTap = <span class="keyword">void</span> <span class="built_in">Function</span>(<span class="built_in">int</span> index, <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; imgUrls);</span><br></pre></td></tr></table></figure><h2 id="flutter-pub-get-is-stuck"><a href="#flutter-pub-get-is-stuck" class="headerlink" title="flutter pub get is stuck"></a>flutter pub get is stuck</h2><p>可以通过切换flutter镜像到中文站点来解决</p><p>使用系统shell，请编辑</p><p>使用oh_my_zsh, 需要编辑<code>.zshrc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line"><span class="built_in">export</span> FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure><p>保存文件后，关闭，下次重新打开终端生效</p><p>再执行<code>flutter pub get</code> 查看速度是否正常</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/cover_img/johannes-andersson-v5gGwubKzEA-unsplash.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="dart" scheme="https://blog.wangruofeng007.com/categories/dart/"/>
    
    
    <category term="技巧" scheme="https://blog.wangruofeng007.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="效率" scheme="https://blog.wangruofeng007.com/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>Flutter精华资料收集</title>
    <link href="https://blog.wangruofeng007.com/2020/10/19/flutter%E7%B2%BE%E5%8D%8E%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/"/>
    <id>https://blog.wangruofeng007.com/2020/10/19/flutter%E7%B2%BE%E5%8D%8E%E8%B5%84%E6%96%99%E6%94%B6%E9%9B%86/</id>
    <published>2020-10-19T13:16:37.000Z</published>
    <updated>2024-11-02T03:36:52.415Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/cover_img/ray-hennessy-xUUZcpQlqpM-unsplash.jpg"></p><span id="more"></span><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>此文用于记录日常flutter开发中使用到或者看到的精华文章或者资源，方便日后查阅</p><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="Flutter进阶"><a href="#Flutter进阶" class="headerlink" title="Flutter进阶"></a>Flutter进阶</h3><ul><li><a href="https://mp.weixin.qq.com/s/-vyU1JQzdGLUmLGHRImIvg">让Flutter真正支持View级别的混合开发</a></li><li><a href="https://jarontai.github.io/dart-souls/">Dart Souls -《Dart 之魂》</a></li><li><a href="https://guoshuyu.cn/home/wx/">Flutter完整开发实战详解系列</a></li><li><a href="https://www.jianshu.com/p/39575a90e820">深入理解Flutter Platform Channel</a></li><li><a href="https://juejin.im/post/5bab35ff5188255c3272c228">Flutter 布局控件完结篇</a></li><li><a href="https://mp.weixin.qq.com/s/xxdgoEBIC3Bg4OCOZcm-aQ">超详解析Flutter渲染引擎|业务想创新，不了解底层原理怎么行？</a> – from 淘系技术</li><li><a href="https://mp.weixin.qq.com/s/hZ5PUvPpMlEYBAJggGnJsw">深入理解Flutter引擎线程模式</a></li><li><a href="https://mp.weixin.qq.com/s/0R5UnVFlVbLKoV__s66HnA">Flutter 的性能分析、工程架构与细节处理</a> – from有道云</li><li><a href="https://juejin.cn/post/6917081883201241101">Flutter 图片控件适配之路</a> – from 网易云音乐</li></ul><h3 id="业界动态"><a href="#业界动态" class="headerlink" title="业界动态"></a>业界动态</h3><ul><li><a href="https://juejin.im/post/5eb27cc9f265da7b9625e85c">Flutter 在哈啰出行 B 端创新业务的实践</a></li><li><a href="https://mp.weixin.qq.com/s/eJxmeAJ0ljmbPbgNVkGttQ">Flutter在PLUS业务中的探索和实践</a></li><li><a href="https://mp.weixin.qq.com/s/57CprMfvTtIeq6AdgcDdcw">&quot;零&quot;学习成本：使用 Web 标准开发动态化 Flutter 应用</a></li><li><a href="https://www.infoq.cn/article/qSLsru9bEvuHgKpPlWMP">京东技术中台的 Flutter 实践之路</a></li><li><a href="https://www.infoq.cn/article/16dv4pmnghv6i1lct3r4">打破重重阻碍，Flutter 和 Web 生态如何对接？</a></li></ul><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><ul><li><a href="https://juejin.im/post/6844904153236373517">Flutter性能优化实践 —— UI篇</a></li></ul><h3 id="Flutter-动态"><a href="#Flutter-动态" class="headerlink" title="Flutter 动态"></a>Flutter 动态</h3><ul><li><a href="https://mp.weixin.qq.com/s/rL6FtCSyca8DsUuNVbSA_w">Dart: 健全的空安全概览</a></li><li><a href="https://mp.weixin.qq.com/s/MEL5kokoyb0CJcjrPpo12w">深入理解 Dart 空安全</a></li><li><a href="https://nullsafety.dartpad.cn/">nullsafety dartpad</a></li><li><a href="https://juejin.im/post/6879048672597213198">观摩！Flutter 1.22 正式发布</a></li></ul><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><ul><li><a href="https://flutter.io/">Flutter 官网</a></li><li><a href="https://flutterchina.club/">Flutter 中文网</a></li><li><a href="https://flutter.cn/docs">Flutter 中文开发文档</a></li><li><a href="http://book.flutterj.com/">Flutter教程网</a></li></ul><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><ul><li><a href="https://www.youtube.com/watch?v=b_sQ9bMltGU&list=PLjxrf2q8roU23XGwz3Km7sQZFTdB996iG&index=2&t=0s">Introducing Widget of the Week!</a></li><li><a href="https://www.youtube.com/watch?v=fq4N0hgOWzU&list=PLOU2XLYxmsIJ7dsVN4iRuA7BT8XHzGtCr">Flutter by Google</a></li><li><a href="http://mudu.tv/watch/5624777mudu.tv/watch/5624777">AliFlutter第二期直播回放</a></li><li><a href="https://www.bilibili.com/video/BV1n741117v1?from=search&seid=12211378857505011313">阿里巴巴闲鱼技术团队客户端负责人一起探讨Flutter的行业现状与未来</a></li></ul><h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><ul><li><a href="https://www.jianshu.com/u/cf5c0e4b1111">咸鱼技术 - Flutter</a></li><li><a href="http://whysodiao.com/">Loki的博客</a> — 目前就职于北京腾讯，博客里面有很flutter总结的文章</li><li><a href="http://laomengit.com/">老孟flutter</a> — 整理了几乎所有的widget，包含使用的例子，还有部分实战项目</li><li><a href="https://www.burkharts.net/apps/blog/">GuruMeditation</a> — 有一些关于flutter架构方面的文章</li></ul><h2 id="掘金博主"><a href="#掘金博主" class="headerlink" title="掘金博主"></a>掘金博主</h2><ul><li><a href="https://juejin.im/user/1767670428477015">Vadaski</a></li><li><a href="https://juejin.im/user/149189281194766">张风捷特烈</a></li><li><a href="https://juejin.im/user/483440843559406">YYDev</a></li><li><a href="https://juejin.im/user/2013961034677725">老孟Flutter</a></li><li><a href="https://juejin.im/user/1257497031878408">闲鱼技术</a></li></ul><h2 id="电子书"><a href="#电子书" class="headerlink" title="电子书"></a>电子书</h2><ul><li><a href="https://book.flutterchina.club/">Flutter 实战</a> — 来自duwen 是<a href="https://github.com/flutterchina/dio">dio</a>、<a href="https://github.com/wendux/fly">fly</a>、<a href="https://github.com/wendux/DSBridge-Android">dsBridge</a>等多个知名开源项目作者</li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="https://codepen.io/flutter">flutter在线编辑工具CodePen</a></li><li><a href="https://dartpad.dev/">Dart 在线编辑工具 DartPad</a></li><li><a href="https://javiercbk.github.io/json_to_dart/">在线JSON To Dart 代码生成</a> </li><li><a href="https://charafau.github.io/json2builtvalue/">Json to Dart built_value class converter</a></li><li><a href="https://juejin.im/post/5f14e128e51d45347c1b926a">2020年20个Flutter最漂亮的UI库和项目</a></li></ul><h2 id="优秀项目-App"><a href="#优秀项目-App" class="headerlink" title="优秀项目 &amp; App"></a>优秀项目 &amp; App</h2><ul><li><a href="https://github.com/CarGuo/gsy_github_app_flutter">GSYGithubAppFlutter</a> — 大型flutter项目， Star 10.8k</li><li><a href="https://github.com/2d-inc/developer_quest">Developer_quest</a>  — Google 官方演示游戏Demo，Star 2.6k</li><li><a href="https://flutter-go.pub/website/">Flutter Go</a> — Ali开发的flutter组件demo演示和新闻资讯</li><li><a href="https://github.com/flutter/samples">Flutter Samples</a> — Flutter 官方 Demo，Star 7.3k</li><li><a href="https://github.com/Solido/awesome-flutter">awesome-flutter</a> — Flutter 相关的资料集合，Star 28.3k</li><li><a href="https://github.com/OpenFlutter/Flutter-Notebook">Flutter-Notebook</a> — FlutterDemo合集, Star 5.7k</li><li><a href="https://github.com/toly1994328/FlutterUnit">FlutterUnit</a> — 组件演示项目， Star 1.8k</li><li><a href="https://github.com/diegoveloper/flutter-samples">flutter-samples</a> — Flutter 演示项目，很多动画效果 , Star 1.5k</li><li><a href="https://github.com/simplezhli/flutter_deer">flutter_deer</a>  —  Flutter 练手项目 ,功能很丰富， Star 4.1k</li><li><a href="https://github.com/iampawan/FlutterExampleApps">FlutterExampleApps</a>  — Flutter 示例App，包含常见流行作品（WhatsApp，Instagram等）, Star 13.8k</li></ul><h2 id="PPT"><a href="#PPT" class="headerlink" title="PPT"></a>PPT</h2><ul><li><a href="https://files.alicdn.com/tpsservice/db6a840f7ac7a8e3d5bde69c401bcfd5.pdf">AliFlutter图片解决方案与优化</a></li><li><a href="https://files.alicdn.com/tpsservice/d324c2a95852b22f1bdf2e60e55670a2.pdf">UC Flutter技术实践分享</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/cover_img/ray-hennessy-xUUZcpQlqpM-unsplash.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="dart" scheme="https://blog.wangruofeng007.com/categories/dart/"/>
    
    
    <category term="效率" scheme="https://blog.wangruofeng007.com/tags/%E6%95%88%E7%8E%87/"/>
    
    <category term="flutter" scheme="https://blog.wangruofeng007.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 开发Tips （第二期）</title>
    <link href="https://blog.wangruofeng007.com/2020/09/17/Flutter-%E5%BC%80%E5%8F%91Tips-%EF%BC%88%E7%AC%AC%E4%BA%8C%E6%9C%9F%EF%BC%89/"/>
    <id>https://blog.wangruofeng007.com/2020/09/17/Flutter-%E5%BC%80%E5%8F%91Tips-%EF%BC%88%E7%AC%AC%E4%BA%8C%E6%9C%9F%EF%BC%89/</id>
    <published>2020-09-16T18:51:21.000Z</published>
    <updated>2024-11-02T03:36:52.414Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/cover_img/ramon-salinero-vEE00Hx5d0Q-unsplash.jpg"></p><span id="more"></span><h2 id="提高flutter-attach的成功率"><a href="#提高flutter-attach的成功率" class="headerlink" title="提高flutter attach的成功率"></a>提高flutter attach的成功率</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><p>断开wifi，执行flutter attach，attach成功后再链接wifi</p><h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><p>通过指定设备uuid进行attach</p><ol><li>通过<code>flutter devices</code>查找已链接设备列表，获取链接设备的uuid</li><li><code>flutter attach -d &lt;#uuid#&gt;</code> 指定想要attach的设备进行连接，例如<code>flutter attach -d AE5D772C-6D56-43AD-83F2-0554257B16C4</code></li></ol><p><img src="/images/flutter_tips_s2/flutter_attach.jpg" alt="Xnip2020-09-17_02-35-23"></p><h3 id="方案3"><a href="#方案3" class="headerlink" title="方案3"></a>方案3</h3><p>通过指定应用的app-id进行attach</p><ol><li>同一wifi环境下如果有多台相同项目设备连接中，找到你需要attach的app-id进行连接</li><li>执行：<code>flutter attach --app-id &lt;#app_id#&gt; </code>例如：<code>flutter attach --app-id com.xxx.xxx</code></li></ol><h2 id="从package中加载json文件"><a href="#从package中加载json文件" class="headerlink" title="从package中加载json文件"></a>从package中加载json文件</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>例如我这里有一个flutter的demo项目叫<code>flutter_demo_package_json_load</code>，在根目录通过命令：<code>flutter create --template=package json_test_package</code>,创建了一个名为<code>json_test_package</code>的package，在package的assets中有一个为test2.json文件，现在需要在package中加载到改文件。</p><h3 id="从工程加载json"><a href="#从工程加载json" class="headerlink" title="从工程加载json"></a>从工程加载json</h3><p>对于普通项目的json文件，加载方式如下：</p><ol><li><p>在项目中添加json文件，例如项目的assets下有一个名为test1.json的文件</p></li><li><p>我们在yaml中添加如下依赖</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只加载assets下的test1.json文件</span></span><br><span class="line"><span class="attr">assets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">assets/test1.json</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="comment"># 加载assets下的所有文件</span></span><br><span class="line"> <span class="attr">assets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">assets/</span></span><br></pre></td></tr></table></figure></li><li><p>通过rootBundle加载</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;<span class="built_in">String</span>&gt; _loadFromProjectAsset() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="comment">// json file in project,is ok</span></span><br><span class="line">  <span class="keyword">return</span> rootBundle.loadString(<span class="string">&quot;assets/test1.json&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>但是对于package下面json文件上面的方法失效了，使用上面的方法加载将会报错，错误信息如下：</p><p><img src="/images/flutter_tips_s2/flutter_tips_15.png" alt="image-20200917144141986"></p><p>错误原因是资源路径不对，加载不到，因为rootBundle类没有提供package name的参数，我们只能把package name信息放在资源路径里面。</p><h3 id="从package加载json"><a href="#从package加载json" class="headerlink" title="从package加载json"></a>从package加载json</h3><p>灵感来自<a href="https://pub.dev/packages/lottie%E5%BA%93%E7%9A%84%60Lottie.asset">https://pub.dev/packages/lottie库的`Lottie.asset</a>(“assetsPath”,package: “package_name”)&#96;方法，因为lottie实现动画的原理也是加载一份json配置，不过这个方法支持指定package配置。</p><p><img src="/images/flutter_tips_s2/flutter_tips_16.png" alt="image-20200917145538741"></p><p>这里的keyName就是我们rootBundle类里面需要用的资源路径，包含带package的情况。</p><p>正确的方式如下：</p><ol><li>第一步和上面一样，将json文件添加到工程中，假如这里我们package里面的json文件名为test2.json</li><li>在yaml中添加如下依赖<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只加载assets下的test2.json文件</span></span><br><span class="line"><span class="attr">assets:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">assets/test2.json</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="comment"># 加载assets下的所有文件</span></span><br><span class="line"><span class="attr">assets:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">assets/</span></span><br></pre></td></tr></table></figure></li><li>通过rootBundle加载，但是path的格式为 <code>packages/&lt;#package_name#&gt;/&lt;#file_path#&gt;</code></li></ol><p>这里为</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json file in package,this is work</span></span><br><span class="line">Future&lt;<span class="built_in">String</span>&gt; _loadFromPackageAsset() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="comment">// 【importance】 packag json file need use this formate:</span></span><br><span class="line">  <span class="comment">// `packages/$package/$assetName`</span></span><br><span class="line">  <span class="keyword">return</span> rootBundle.loadString(<span class="string">&quot;packages/json_test_package/assets/test2.json&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>DefaultAssetBundle</code>也是一样可以</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is work too.</span></span><br><span class="line">Future&lt;<span class="built_in">String</span>&gt; testLoadJsonFileByDefaultAssetBundle(BuildContext context) &#123;</span><br><span class="line">  <span class="comment">// 【importance】 packag json file need use this formate:</span></span><br><span class="line">  <span class="comment">// `packages/$package/$assetName`</span></span><br><span class="line">  <span class="keyword">return</span> DefaultAssetBundle.of(context)</span><br><span class="line">      .loadString(<span class="string">&#x27;packages/json_test_package/assets/test2.json&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/wangruofeng/flutter_demo_package_json_load">Demo链接</a></p></blockquote><h2 id="flutter-analyse"><a href="#flutter-analyse" class="headerlink" title="flutter analyse"></a>flutter analyse</h2><h3 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h3><ul><li><p>在项目更目录添加<code>analysis_options.yaml</code>文件可以配置lint规则和analyzer行为</p></li><li><p>具体支持的lint规则参考<a href="https://dart-lang.github.io/linter/lints/">https://dart-lang.github.io/linter/lints/</a></p></li><li><p>目前有3类已经定义的常用规则</p><blockquote><p>Many lints are included in various predefined rulesets:</p></blockquote><ul><li><a href="https://github.com/dart-lang/pedantic">pedantic</a> for rules enforced internally at Google</li><li><a href="https://github.com/tenhobi/effective_dart">effective_dart</a> for rules corresponding to the <a href="https://dart.dev/guides/language/effective-dart">Effective Dart</a> style guide</li><li><a href="https://github.com/flutter/flutter/blob/master/packages/flutter/lib/analysis_options_user.yaml">flutter</a> for rules used in <code>flutter analyze</code></li></ul></li><li><p>推荐使用google团队内部的规则库pedantic</p><ul><li>在yaml里面添加依赖 <code>pedantic: ^1.8.0+1</code></li></ul></li><li><p>在<code>analysis_options.yaml</code>里面引入使用</p><blockquote><p><code>include: package:pedantic/analysis_options.1.8.0.yaml</code></p></blockquote></li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>配置好<code>analysis_options.yaml</code>文件的规则后,执行<code>flutter analyse</code>命令将对你整个项目或者package的代码进行静态分析</p><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><ul><li>根据提示修复</li></ul><p>点击提示的规则，就会跳转到需要修复位置，按照lint规则的说明和例子就可以修正了。<img src="/images/flutter_tips_s2/flutter_analyse_2.png" alt="flutter_analyse_1"></p><ul><li>利用VSCode快速修复</li></ul><p>在提示有问题的代码的地方<code>Ctrl +.</code>, 就会自动弹出快速修复，比如图中为增加<code>const</code>标识。 是不是快多了。<img src="/images/flutter_tips_s2/flutter_analyse_1.png" alt="flutter_analyse_1"><img src="/images/flutter_tips_s2/flutter_analyse_2.png" alt="屏幕快照 2020-09-17 上午2.24.55"></p><h3 id="参考配置"><a href="#参考配置" class="headerlink" title="参考配置"></a>参考配置</h3><p>当然你还可以根据你的需要定制自己的静态分析规则，下面是最近使用的一套配置，仅供你参考：</p><blockquote><p><a href="https://gist.github.com/wangruofeng/1451c04c0149fc229a726d819b3135c2">analysis_options.yaml参考配置</a></p></blockquote><h2 id="dartfmt-命令"><a href="#dartfmt-命令" class="headerlink" title="dartfmt 命令"></a>dartfmt 命令</h2><ul><li><code>dartfmt ./ -w</code> 静态分析代码，并尝试自动修复</li><li><code>dartfmt ./ -n</code> 静态分析代码，不会修复代码</li></ul><h2 id="DevTool介绍"><a href="#DevTool介绍" class="headerlink" title="DevTool介绍"></a>DevTool介绍</h2><p>flutter提供了一个devTool系列工具，方便开发者进行调试，查看日志，网络请求，性能等信息，更多信息请参考<a href="https://flutter.dev/docs/development/tools/devtools/overview">DevTools</a></p><h3 id="Install-DevTools"><a href="#Install-DevTools" class="headerlink" title="Install DevTools"></a>Install DevTools</h3><ul><li><a href="https://flutter.dev/docs/development/tools/devtools/cli">Install from command line</a></li><li><a href="https://flutter.dev/docs/development/tools/devtools/android-studio">Install and run DevTools from Android Studio</a></li><li><a href="https://flutter.dev/docs/development/tools/devtools/vscode">Install from VS Code</a></li></ul><h3 id="Launch-the-DevTools-application-server"><a href="#Launch-the-DevTools-application-server" class="headerlink" title="Launch the DevTools application server"></a>Launch the DevTools application server</h3><p>启动本地web服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pub global run devtools   # If you have `pub` on your path.</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter pub global run devtools   # If you have `flutter` on your path.</span><br></pre></td></tr></table></figure><p>在命令行，你应该看到类似下面输出，表明服务启动成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Serving DevTools at http://127.0.0.1:9100</span><br></pre></td></tr></table></figure><h3 id="Start-an-application-to-debug"><a href="#Start-an-application-to-debug" class="headerlink" title="Start an application to debug"></a>Start an application to debug</h3><p>运行app</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd path/to/flutter/app</span><br><span class="line">flutter run</span><br></pre></td></tr></table></figure><p>一旦你成功运行起来你的app，你将在终端控制台看到如下类似的信息</p><p><img src="/images/flutter_tips_s2/flutter_tips_01.png" alt="image-20200917151951722"></p><p>用浏览器打开里面的地址，格式如下</p><blockquote><p><a href="http://127.0.0.1:59681/fVO-_3yziG8=/">http://127.0.0.1:59681/fVO-_3yziG8=/</a></p></blockquote><p>打开将会看到下面的调试面板，可以根据自己的需要进行调试</p><p><img src="/images/flutter_tips_s2/flutter_tips_02.png" alt="image-20200917152140975"></p><p>这里有一个很有用的功能，【debug】</p><p>打开页面可以查看断点的帧和控制台的日志。</p><p><img src="/images/flutter_tips_s2/flutter_tips_03.png" alt="image-20200917152456458"></p><h3 id="Open-DevTools-and-connect-to-the-target-app"><a href="#Open-DevTools-and-connect-to-the-target-app" class="headerlink" title="Open DevTools and connect to the target app"></a>Open DevTools and connect to the target app</h3><p>一旦工程运行起来了，在浏览器打开<a href="http://localhost:9100，打开DevTools完整版本">http://localhost:9100，打开DevTools完整版本</a></p><p><img src="/images/flutter_tips_s2/flutter_tips_04.png" alt="image-20200917152646210"></p><p>输入上面的地址，点击Connect，跳转到完整devTools</p><p><img src="/images/flutter_tips_s2/flutter_tips_05.png" alt="image-20200917152806254"></p><p>这里的功能非常强大和具体使用可以参考官方文档</p><h2 id="flutter-调试"><a href="#flutter-调试" class="headerlink" title="flutter 调试"></a>flutter 调试</h2><p>这里以VSCode为例</p><h3 id="纯flutter项目"><a href="#纯flutter项目" class="headerlink" title="纯flutter项目"></a>纯flutter项目</h3><p>纯flutter项目比较简单，VSCode支持各种devtool，使用debug模式运行app，或者直接按F5</p><p><img src="/images/flutter_tips_s2/flutter_tips_06.png" alt="image-20200917150502934"></p><p>运行成功后会出现一下工具条</p><p><img src="/images/flutter_tips_s2/flutter_tips_07.png" alt="image-20200917150559335"></p><p>控制台输出以下内容</p><p><img src="/images/flutter_tips_s2/flutter_tips_08.png" alt="image-20200917150622481"></p><p>例如这里我们在这个文件107行直接下一个断点，代码执行到时会触发断点</p><p><img src="/images/flutter_tips_s2/flutter_tips_09.png" alt="image-20200917150821892"></p><p>此时工具栏变成下面的样式</p><p><img src="/images/flutter_tips_s2/flutter_tips_10.png" alt="image-20200917150846708"></p><p>可以通过相关的按钮进行断点调试</p><h3 id="混合项目-原生-flutter"><a href="#混合项目-原生-flutter" class="headerlink" title="混合项目(原生+flutter)"></a>混合项目(原生+flutter)</h3><ol><li><p>打开已经编译运行过的原生端App</p></li><li><p>通过VSCode打开壳工程，进入壳工程根目录</p></li><li><p>选择main.dart文件</p></li><li><p>执行cmd+shift+p,呼出VSCode命令面板，输入<code>&gt;attach to flutter onDevice</code></p><p><img src="/images/flutter_tips_s2/flutter_tips_11.png" alt="image-20200917153401365"></p><p>选择下面的对应的命令执行</p><blockquote><p>如果attach不上请断开wifi重试</p></blockquote></li><li><p>Attach 成功的话会显示下面一条悬浮工具栏和纯flutter相比里面多了一个类似插头的按钮</p><p><img src="/images/flutter_tips_s2/flutter_tips_12.png" alt="image-20200917153656732"></p><p>Debug Console控制台也会输出下面信息</p><p><img src="/images/flutter_tips_s2/flutter_tips_13.png" alt="image-20200917153719698"></p></li><li><p>剩下的调试和上面DevTool介绍的流程一致</p></li><li><p>在这个项目里面可以直接对引用到的代码进行断点调试</p><p><img src="/images/flutter_tips_s2/flutter_tips_14.png" alt="image-20200917154306797"></p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://pub.dev/packages/analyzer">analyzer</a></p></li><li><p><a href="https://dart.dev/tools/dartfmt">dartfmt</a></p></li><li><p><a href="https://juejin.im/post/6844904176162439182#heading-11">Flutter Analysis Options</a></p></li><li><p><a href="https://dart.dev/guides/language/analysis-options">Customizing static analysis</a></p></li><li><p><a href="https://stackoverflow.com/questions/63914819/how-to-access-assets-in-package">How to access assets in package</a></p></li><li><p><a href="https://flutter.dev/docs/development/tools/devtools/overview">DevTools</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/cover_img/ramon-salinero-vEE00Hx5d0Q-unsplash.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="dart" scheme="https://blog.wangruofeng007.com/categories/dart/"/>
    
    
    <category term="效率" scheme="https://blog.wangruofeng007.com/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 开发Tips （第一期）</title>
    <link href="https://blog.wangruofeng007.com/2020/09/07/Flutter-%E5%BC%80%E5%8F%91Tips-%EF%BC%88%E7%AC%AC%E4%B8%80%E6%9C%9F%EF%BC%89/"/>
    <id>https://blog.wangruofeng007.com/2020/09/07/Flutter-%E5%BC%80%E5%8F%91Tips-%EF%BC%88%E7%AC%AC%E4%B8%80%E6%9C%9F%EF%BC%89/</id>
    <published>2020-09-06T17:00:18.000Z</published>
    <updated>2024-11-02T03:36:52.413Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/cover_img/markus-spiske-qjnAnF0jIGk-unsplash.jpg"></p><span id="more"></span><h2 id="…"><a href="#…" class="headerlink" title="…"></a>…</h2><p>延展操作符(<code>...</code>)可以对数组或者字典进行操作</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合并数组</span></span><br><span class="line">test1() &#123;</span><br><span class="line">  <span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  <span class="keyword">var</span> list2 = [<span class="number">0</span>, ...list, <span class="number">4</span>];</span><br><span class="line">  <span class="built_in">print</span>(list2);</span><br><span class="line">  <span class="comment">// [0, 1, 2, 3, 4]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并字典</span></span><br><span class="line">test2() &#123;</span><br><span class="line">  <span class="keyword">var</span> map1 = &#123;</span><br><span class="line">    <span class="string">&quot;key1&quot;</span>: <span class="string">&quot;value1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;key2&quot;</span>: <span class="string">&quot;value2&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> map2 = &#123;</span><br><span class="line">    <span class="string">&quot;key3&quot;</span>: <span class="string">&quot;value3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;key4&quot;</span>: <span class="string">&quot;value4&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> map3 = &#123;...map1, ...map2&#125;;</span><br><span class="line">  <span class="built_in">print</span>(map3);</span><br><span class="line">  <span class="comment">// &#123;key1: value1, key2: value2, key3: value3, key4: value4&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for-…"><a href="#for-…" class="headerlink" title="for ()…[]"></a>for ()…[]</h2><p>合并widgets到集合中，使用<code>for ()...[]</code>范式，使用延展操作符(<code>...</code>)来合并一个数组的widgets到一个存在的集合中。例如在构造Row或者Column的children时，非常方便。下面是示例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;Food&gt; foods = [</span><br><span class="line">  Food(name: <span class="string">&#x27;apple&#x27;</span>, isVegetarian: <span class="keyword">true</span>),</span><br><span class="line">  Food(name: <span class="string">&#x27;nuts&#x27;</span>, isVegetarian: <span class="keyword">true</span>),</span><br><span class="line">  Food(name: <span class="string">&#x27;eggs&#x27;</span>, isVegetarian: <span class="keyword">true</span>),</span><br><span class="line">  Food(name: <span class="string">&#x27;chicken&#x27;</span>, isVegetarian: <span class="keyword">false</span>),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Food</span> </span>&#123;</span><br><span class="line">  Food(&#123;</span><br><span class="line">    <span class="keyword">this</span>.name,</span><br><span class="line">    <span class="keyword">this</span>.isVegetarian,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">bool</span> isVegetarian;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> HomePage(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      child: Column(</span><br><span class="line">        children: [</span><br><span class="line">          Container(),</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">final</span> food <span class="keyword">in</span> foods) ...[</span><br><span class="line">            <span class="keyword">if</span> (food.isVegetarian) ListTile(title: Text(food.name)),</span><br><span class="line">            SizedBox(height: <span class="number">50.0</span>),</span><br><span class="line">          ],</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title="() {} ()"></a>() {} ()</h2><p>立即执行一个匿名函数：<code>() &#123;&#125; ()</code>,相当于声明一个匿名函数并且里面执行，这种范式在处理一个widget可能有多种输出时特别有用。而不是使用镶嵌的三目运算符或者通过一个函数调用，这个代码跟内联。下面是示例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">T getRandomElement&lt;T&gt;(<span class="built_in">List</span>&lt;T&gt; list) =&gt; list[Random().nextInt(list.length)];</span><br><span class="line"></span><br><span class="line">Column(</span><br><span class="line">          children: [</span><br><span class="line">            Container(</span><br><span class="line">              color: () &#123;</span><br><span class="line">                <span class="keyword">switch</span> (getRandomElement(foods).name) &#123;</span><br><span class="line">                  <span class="keyword">case</span> <span class="string">&#x27;apple&#x27;</span>:</span><br><span class="line">                    <span class="keyword">return</span> Colors.green;</span><br><span class="line">                  <span class="keyword">case</span> <span class="string">&#x27;nuts&#x27;</span>:</span><br><span class="line">                    <span class="keyword">return</span> Colors.brown;</span><br><span class="line">                  <span class="keyword">case</span> <span class="string">&#x27;eggs&#x27;</span>:</span><br><span class="line">                    <span class="keyword">return</span> Colors.yellow;</span><br><span class="line">                  <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> Colors.transparent;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;(),</span><br><span class="line">              child: Text(<span class="string">&#x27;Food of the Day&#x27;</span>),</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><h2 id="代码静态分析"><a href="#代码静态分析" class="headerlink" title="代码静态分析"></a>代码静态分析</h2><p>在提交代码时为了提高代码质量，保持团队的代码风格一致，需要进行代码静态分析，一般通过下面2种方法来进行</p><h3 id="flutter-analyze"><a href="#flutter-analyze" class="headerlink" title="flutter analyze"></a>flutter analyze</h3><p>使用<code>flutter analyze</code>进行代码静态分析,此命令会根据<code>analysis_options.yaml</code>定义的规则进行静态分析</p><h3 id="dartfmt"><a href="#dartfmt" class="headerlink" title="dartfmt"></a>dartfmt</h3><p>使用<code>dartfmt ./ -w</code>对当前目录以及子目录的dart代码进行代码,<code>-w</code>选项会自动重写文件使其符合规范。</p><p>使用<code>dartfmt ./ -n</code>显示当前目录以及子目录的dart代码格式可以修改的文件但是不做修改，可以配合ci分析代码格式问题。</p><p>更多选项请使用<code>dartfmt --help</code>查看</p><h2 id="Push-present-Pop"><a href="#Push-present-Pop" class="headerlink" title="Push &amp; present &amp; Pop"></a>Push &amp; present &amp; Pop</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Push by route</span></span><br><span class="line">Navigator.pushNamed(context, <span class="string">&#x27;/b&#x27;</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// push </span></span><br><span class="line">Navigator.of(context).push(MaterialPageRoute(builder: (BuildContext context) =&gt; MyPage()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// present</span></span><br><span class="line">Navigator.of(context).push(MaterialPageRoute(builder: (BuildContext context) =&gt; MyPage(),fullscreenDialog: <span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// pop</span></span><br><span class="line">Navigator.pop(context)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// pop + push</span></span><br><span class="line">Navigator.of(context)</span><br><span class="line">..pop()</span><br><span class="line">..pop()</span><br><span class="line">..pushNamed(<span class="string">&#x27;/settings&#x27;</span>);</span><br></pre></td></tr></table></figure><p>API</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// push</span></span><br><span class="line">Future push(BuildContext context, Route route)</span><br><span class="line"></span><br><span class="line"><span class="comment">// pop</span></span><br><span class="line"><span class="built_in">bool</span> pop(BuildContext context, [ result ])</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 下面两种是等效的</span></span><br><span class="line">Navigator.push(BuildContext context, Route route)</span><br><span class="line">Navigator.of(context).push(Route route)</span><br></pre></td></tr></table></figure><h2 id="获取widget的位置和宽高"><a href="#获取widget的位置和宽高" class="headerlink" title="获取widget的位置和宽高"></a>获取widget的位置和宽高</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> RenderBox box = keyContext.findRenderObject();</span><br><span class="line"><span class="keyword">final</span> size = box.size;</span><br><span class="line"><span class="keyword">final</span> topLeftPosition = box.localToGlobal(Offset.zero);</span><br></pre></td></tr></table></figure><p>See more</p><ul><li><p><a href="https://stackoverflow.com/questions/49307677/how-to-get-a-height-of-a-widget">How to get a height of a Widget?</a></p></li><li><p><a href="https://medium.com/@diegoveloper/flutter-widget-size-and-position-b0a9ffed9407">Flutter : Widget Size and Position</a></p></li></ul><h2 id="Model-To-JSON"><a href="#Model-To-JSON" class="headerlink" title="Model To JSON"></a>Model To JSON</h2><h3 id="json-serializable"><a href="#json-serializable" class="headerlink" title="json_serializable"></a>json_serializable</h3><ol><li><p>引入</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="comment"># Your other regular dependencies here</span></span><br><span class="line">  <span class="attr">json_annotation:</span> <span class="string">^2.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dev_dependencies:</span></span><br><span class="line">  <span class="comment"># Your other dev_dependencies here</span></span><br><span class="line">  <span class="attr">build_runner:</span> <span class="string">^1.0.0</span></span><br><span class="line">  <span class="attr">json_serializable:</span> <span class="string">^2.0.0</span></span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:json_annotation/json_annotation.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user.g.dart 将在我们运行生成命令后自动生成</span></span><br><span class="line"><span class="keyword">part</span> <span class="string">&#x27;user.g.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">///<span class="language-markdown">这个标注是告诉生成器，这个类是需要生成Model类的</span></span></span><br><span class="line"><span class="meta">@JsonSerializable</span>()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">  User(<span class="keyword">this</span>.name, <span class="keyword">this</span>.email);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">String</span> email;</span><br><span class="line">  <span class="comment">//不同的类使用不同的mixin即可</span></span><br><span class="line">  <span class="keyword">factory</span> User.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) =&gt; _$UserFromJson(json);</span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() =&gt; _$UserToJson(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单次解析：<code>flutter packages pub run build_runner build</code></p></li><li><p>持续集成：<code>flutter packages pub run build_runner watch</code></p></li><li><p><a href="https://caijinglong.github.io/json2dart/index_ch.html">json_serializable 在线json转dart model工具</a></p></li></ol><h3 id="Built-value"><a href="#Built-value" class="headerlink" title="Built value"></a>Built value</h3><ol><li><p>在线json转build value 模板工具 <a href="https://charafau.github.io/json2builtvalue/">https://charafau.github.io/json2builtvalue/</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=GiancarloCode.built-value-snippets">VSCode built value 插件 </a> </p></li><li><p>Sample code</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// interface model</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:built_value/built_value.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">part</span> <span class="string">&#x27;user.g.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Built</span>&lt;<span class="title">User</span>, <span class="title">UserBuilder</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> <span class="keyword">get</span> name;</span><br><span class="line">  <span class="meta">@nullable</span></span><br><span class="line">  <span class="built_in">String</span> <span class="keyword">get</span> nickname;</span><br><span class="line">  User._();</span><br><span class="line">  <span class="keyword">factory</span> User([updates(UserBuilder b)]) = _$User;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// init</span></span><br><span class="line"><span class="keyword">var</span> user1 = <span class="keyword">new</span> User((b) =&gt; b</span><br><span class="line">    ..name = <span class="string">&#x27;John Smith&#x27;</span></span><br><span class="line">    ..nickname = <span class="string">&#x27;Joe&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// update</span></span><br><span class="line"><span class="keyword">var</span> user2 = user.rebuild((b) =&gt; b</span><br><span class="line">    ..nickname = <span class="string">&#x27;Jojo&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// update</span></span><br><span class="line"><span class="keyword">var</span> updatedStructuredData = structuredData.rebuild((b) =&gt; b</span><br><span class="line">    ..user.update((b) =&gt; b</span><br><span class="line">        ..name = <span class="string">&#x27;Johnathan Smith&#x27;</span>)</span><br><span class="line">    ..credentials.phone.update((b) =&gt; b</span><br><span class="line">        ..country = Country.switzerland</span><br><span class="line">        ..number = <span class="string">&#x27;555 01234 555&#x27;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// nested builders</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> <span class="keyword">implements</span> <span class="title">Built</span>&lt;<span class="title">Node</span>, <span class="title">NodeBuilder</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@nullable</span></span><br><span class="line">  <span class="built_in">String</span> <span class="keyword">get</span> label;</span><br><span class="line">  <span class="meta">@nullable</span></span><br><span class="line">  Node <span class="keyword">get</span> left; </span><br><span class="line">  <span class="meta">@nullable</span></span><br><span class="line">  Node <span class="keyword">get</span> right;</span><br><span class="line">  Node._();</span><br><span class="line">  <span class="keyword">factory</span> Node([updates(NodeBuilder b)]) = _$Node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// new or update</span></span><br><span class="line"><span class="keyword">var</span> node = <span class="keyword">new</span> Node((b) =&gt; b</span><br><span class="line">  ..left.left.left.right.left.right.label = <span class="string">&#x27;I’m a leaf!&#x27;</span></span><br><span class="line">  ..left.left.right.right.label = <span class="string">&#x27;I’m also a leaf!&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> updatedNode = node.rebuild((b) =&gt; b</span><br><span class="line">  ..left.left.right.right.label = <span class="string">&#x27;I’m not a leaf any more!&#x27;</span></span><br><span class="line">  ..left.left.right.right.right.label = <span class="string">&#x27;I’m the leaf now!&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://medium.com/dartlang/3-cool-dart-patterns-6d8d9d3d8fb8">3 cool Dart patterns</a></p></li><li><p><a href="https://pub.dev/packages/built_collection">built_collection - pub.dev</a></p></li><li><p><a href="https://medium.com/dartlang/darts-built-collection-for-immutable-collections-db662f705eff">Dart’s built_collection for Immutable Collections</a></p></li><li><p><a href="https://dart.dev/tools/dartfmt">dartfmt</a></p></li><li><p><a href="https://dart.dev/guides/language/analysis-options">Customizing static analysis</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/cover_img/markus-spiske-qjnAnF0jIGk-unsplash.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="dart" scheme="https://blog.wangruofeng007.com/categories/dart/"/>
    
    
    <category term="效率" scheme="https://blog.wangruofeng007.com/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>开发Flutter有哪些好用的VSCode插件</title>
    <link href="https://blog.wangruofeng007.com/2020/07/31/%E5%BC%80%E5%8F%91Flutter%E6%9C%89%E5%93%AA%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84VSCode%E6%8F%92%E4%BB%B6/"/>
    <id>https://blog.wangruofeng007.com/2020/07/31/%E5%BC%80%E5%8F%91Flutter%E6%9C%89%E5%93%AA%E4%BA%9B%E5%A5%BD%E7%94%A8%E7%9A%84VSCode%E6%8F%92%E4%BB%B6/</id>
    <published>2020-07-31T15:18:49.000Z</published>
    <updated>2024-11-02T03:36:52.416Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/cover_img/pexels-nastyasensei-335393.jpg"></p><span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这里整理了日常使用vscode开发flutter相关的插件，也有部分通用类型的插件</p><h2 id="Flutter-Dart"><a href="#Flutter-Dart" class="headerlink" title="Flutter &amp; Dart"></a><a href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter">Flutter</a> &amp; <a href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.dart-code">Dart</a></h2><p>这2个是flutter官方插件，开发flutter装机必备，不用多说。</p><h2 id="Awesome-Flutter-Snippets"><a href="#Awesome-Flutter-Snippets" class="headerlink" title="Awesome Flutter Snippets"></a><a href="https://marketplace.visualstudio.com/items?itemName=Nash.awesome-flutter-snippets">Awesome Flutter Snippets</a></h2><blockquote><p>Awesome Flutter Snippets is a collection snippets and shortcuts for commonly used Flutter functions and classes</p></blockquote><p>这里面包含Flutter中非常常用的代码片段</p><h2 id="Bracket-Pair-Colorizer-2"><a href="#Bracket-Pair-Colorizer-2" class="headerlink" title="Bracket Pair Colorizer 2"></a><a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2">Bracket Pair Colorizer 2</a></h2><blockquote><p>A customizable extension for colorizing matching brackets</p></blockquote><p>这个插件可以使成对的括号带上不同颜色，特别适合dart这种嵌套层级很深声明式语言， 这个插件可以很方便的区分括号的开始和截止位置</p><p>![Bracket _Pair_Colorizer_2](&#x2F;images&#x2F;flutter_plugin&#x2F;Bracket _Pair_Colorizer_2.jpg)</p><h2 id="GitLens"><a href="#GitLens" class="headerlink" title="GitLens"></a><a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">GitLens</a></h2><blockquote><p>Supercharge the Git capabilities built into Visual Studio Code — Visualize code authorship at a glance via Git blame annotations and code lens, seamlessly navigate and explore Git repositories, gain valuable insights via powerful comparison commands, and so much more</p></blockquote><p>最好用的feature是在该<a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens#current-line-blame-"><strong>行</strong></a>末尾的引人注目的<a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens#current-line-blame-"><strong>当前行责任</strong></a>注释，可通过<a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens#hovers-"><strong>悬停</strong></a>获取详细的责任信息，当然还有很多其他的feature，请自行探索。</p><p><img src="/images/flutter_plugin/GitLens_01.png" alt="GitLens_01"></p><p>git相关的右键菜单</p><p><img src="/images/flutter_plugin/GitLens_02.png" alt="GitLens_02"></p><h2 id="Color-Highlight"><a href="#Color-Highlight" class="headerlink" title="Color Highlight"></a><a href="https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight">Color Highlight</a></h2><blockquote><p>Highlight web colors in your editor</p></blockquote><p>web颜色高亮，直接将颜色对应的css显示出来，非常直观</p><p><img src="/images/flutter_plugin/color_highlight.png" alt="color_highlight"></p><h2 id="Image-Preview"><a href="#Image-Preview" class="headerlink" title="Image Preview"></a><a href="https://marketplace.visualstudio.com/items?itemName=kisstkondoros.vscode-gutter-preview">Image Preview</a></h2><blockquote><p>Shows image preview in the gutter and on hover</p></blockquote><p>单鼠标悬浮在带有图片的超链接上会显示预览图片</p><p><img src="/images/flutter_plugin/image_preview.png" alt="image_preview"></p><h2 id="pubspec-assist"><a href="#pubspec-assist" class="headerlink" title="pubspec assist"></a><a href="https://marketplace.visualstudio.com/items?itemName=jeroen-meijer.pubspec-assist">pubspec assist</a></h2><blockquote><p>Easily add and update dependencies to your Dart and Flutter project.</p></blockquote><p>下面是官方的演示效果，可以直接命令搜索flutter相关库</p><p><img src="https://i.imgur.com/W2cGuPL.gif" alt="img"></p><h2 id="Material-Icon-Theme"><a href="#Material-Icon-Theme" class="headerlink" title="Material Icon Theme"></a><a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme">Material Icon Theme</a></h2><blockquote><p>Material Design Icons for Visual Studio Code</p></blockquote><p>针对不同的文件icon和文件夹icon设计了一套主题图标</p><p><img src="/images/flutter_plugin/file_icons.png" alt="file_icons"></p><p><img src="/images/flutter_plugin/folder_icons.png" alt="folder_icons"></p><h2 id="Error-lens"><a href="#Error-lens" class="headerlink" title="Error lens"></a><a href="https://marketplace.visualstudio.com/items?itemName=usernamehw.errorlens">Error lens</a></h2><blockquote><p>Improve highlighting of errors, warnings and other language diagnostics.</p></blockquote><p>增强了语言中的错误高亮效果，使错误提示在代码后面显示</p><p><img src="/images/flutter_plugin/error_lens.png" alt="error_lens"></p><h2 id="flutter-stylizer"><a href="#flutter-stylizer" class="headerlink" title="flutter-stylizer"></a><a href="https://marketplace.visualstudio.com/items?itemName=gmlewis-vscode.flutter-stylizer">flutter-stylizer</a></h2><blockquote><p>Flutter Stylizer organizes your Flutter classes in an opinionated and consistent manner.</p></blockquote><p>使flutter中的代码按照下面的方式排序，方便统一约束团队代码的结构</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;flutterStylizer.memberOrdering&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;public-constructor&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;named-constructors&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;public-static-variables&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;public-instance-variables&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;private-static-variables&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;private-instance-variables&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;public-override-methods&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;public-other-methods&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;build-method&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>当然这只是默认顺序，具体的顺序可以自行调整,插件安装完成后，通过快捷键格式化当前的文件</p><h2 id="RESTClient"><a href="#RESTClient" class="headerlink" title="RESTClient"></a><a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client">RESTClient</a></h2><blockquote><p>REST Client for Visual Studio Code</p></blockquote><p>在VSCode里面直接发送请求，能自动识别<code>.http</code>和<code>.rest</code>后缀的文件</p><p>点击<code>Send Request</code>开始发送请求。</p><p><img src="/images/flutter_plugin/RESTClient_02.png" alt="RESTClient_02"></p><p><img src="/images/flutter_plugin/RESTClient_01.png" alt="RESTClient_01"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/cover_img/pexels-nastyasensei-335393.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="dart" scheme="https://blog.wangruofeng007.com/categories/dart/"/>
    
    
    <category term="效率" scheme="https://blog.wangruofeng007.com/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>Flutter中Key的作用</title>
    <link href="https://blog.wangruofeng007.com/2020/07/26/Flutter%E4%B8%ADKey%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <id>https://blog.wangruofeng007.com/2020/07/26/Flutter%E4%B8%ADKey%E7%9A%84%E4%BD%9C%E7%94%A8/</id>
    <published>2020-07-26T09:44:33.000Z</published>
    <updated>2024-11-02T03:36:52.414Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/cover_img/img_2-people-sitting-with-view-of-yellow-flowers-during-daytime.jpg"></p><span id="more"></span><h2 id="key的定义"><a href="#key的定义" class="headerlink" title="key的定义"></a>key的定义</h2><p>Key Class官方介绍：</p><blockquote><p> A [Key] is an identifier for [Widget]s, [Element]s and [SemanticsNode]s.</p><p> A new widget will only be used to update an existing element if its key is</p><p> the same as the key of the current widget associated with the element.</p><p> {@youtube 560 315 <a href="https://www.youtube.com/watch?v=kn0EOS-ZiIc%7D">https://www.youtube.com/watch?v=kn0EOS-ZiIc}</a></p><p> Keys must be unique amongst the [Element]s with the same parent.</p><p> Subclasses of [Key] should either subclass [LocalKey] or [GlobalKey].</p></blockquote><p>翻译过来：</p><blockquote><p>一个Key是Widget，Element以及SemanticsNode的标识。</p><p>一个新widget将仅用来更新一个已存在的element假如它的key和当前widget关联的元素一致。</p><p>官方介绍视频 <a href="https://www.youtube.com/watch?v=kn0EOS-ZiIc">https://www.youtube.com/watch?v=kn0EOS-ZiIc</a></p><p>在有着相同父节点的element中，Key必须是唯一的。</p><p>Key的子类要么是LocalKey，要么是GlobalKey。</p></blockquote><p>Key 官方介绍：</p><blockquote><p>Controls how one widget replaces another widget in the tree.</p><p>If the <a href="https://api.flutter.dev/flutter/widgets/Widget/dart-core/Object/runtimeType.html">runtimeType</a> and <a href="https://api.flutter.dev/flutter/widgets/Widget/widgets/Widget/key.html">key</a> properties of the two widgets are <a href="https://api.flutter.dev/flutter/widgets/Widget/widgets/Widget/operator_equals.html">operator&#x3D;&#x3D;</a>, respectively, then the new widget replaces the old widget by updating the underlying element (i.e., by calling <a href="https://api.flutter.dev/flutter/widgets/Widget/widgets/Element/update.html">Element.update</a>with the new widget). Otherwise, the old element is removed from the tree, the new widget is inflated into an element, and the new element is inserted into the tree.</p><p>In addition, using a <a href="https://api.flutter.dev/flutter/widgets/Widget/widgets/GlobalKey-class.html">GlobalKey</a> as the widget’s <a href="https://api.flutter.dev/flutter/widgets/Widget/widgets/Widget/key.html">key</a> allows the element to be moved around the tree (changing parent) without losing state. When a new widget is found (its key and type do not match a previous widget in the same location), but there was a widget with that same global key elsewhere in the tree in the previous frame, then that widget’s element is moved to the new location.</p><p>Generally, a widget that is the only child of another widget does not need an explicit key.</p></blockquote><p>翻译过来：</p><blockquote><p>控制一个小部件如何替换树中的另一个小部件。</p><p>如果两个widget的<a href="https://api.flutter.dev/flutter/dart-core/Object/runtimeType.html">runtimeType</a>和<a href="https://api.flutter.dev/flutter/widgets/Widget/key.html">key</a>属性分别是相等的(<a href="https://api.flutter.dev/flutter/widgets/Widget/operator_equals.html">&#x3D;&#x3D;</a>)，则新widget通过更新基础element（即，通过使用新的widget调用<a href="https://api.flutter.dev/flutter/widgets/Element/update.html">Element.update</a>）来替换旧widget。否则，将从树中删除旧element，将新widget放大为一个element，然后将新element插入到树中。</p><p>另外，使用<a href="https://api.flutter.dev/flutter/widgets/GlobalKey-class.html">GlobalKey</a>作为窗口小部件的<a href="https://api.flutter.dev/flutter/widgets/Widget/key.html">key</a>允许该element在树上移动（更改父级）而不会丢失状态。当找到新的widget（其键和类型与相同位置的先前widget不匹配），但是在前一帧的树中其他位置有一个具有相同全局键的widget时，该widget的element将移至新位置。</p><p>通常，作为另一个widget的唯一child的widget不需要显式key。</p></blockquote><h2 id="Key的作用"><a href="#Key的作用" class="headerlink" title="Key的作用"></a>Key的作用</h2><p>大多数时候并不需要使用key。</p><p>当需要在一个<strong>StatefulWidget</strong>集合中进行添加、删除、重排序等操作时，才是key登场的时候。</p><h3 id="无状态组件"><a href="#无状态组件" class="headerlink" title="无状态组件"></a>无状态组件</h3><p>下面这段代码在一个Row中展示了两个彩色方片（StatelessContainer），当点击按钮时，会交换两个方片的位置：</p><p><img src="/images/flutter_key/img_key_screen.png" alt="img_key_screen"></p><p>代码如下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatelessContainer</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Color color = Color.fromRGBO(</span><br><span class="line">      Random().nextInt(<span class="number">256</span>), Random().nextInt(<span class="number">256</span>), Random().nextInt(<span class="number">256</span>), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      width: <span class="number">100</span>,</span><br><span class="line">      height: <span class="number">100</span>,</span><br><span class="line">      color: color,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ScreenState createState() =&gt; _ScreenState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ScreenState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Screen</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; widgets = [</span><br><span class="line">    StatelessContainer(),</span><br><span class="line">    StatelessContainer(),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Row(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: widgets,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: switchWidget,</span><br><span class="line">        child: Icon(Icons.undo),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  switchWidget() &#123;</span><br><span class="line">    widgets.insert(<span class="number">0</span>, widgets.removeAt(<span class="number">1</span>));</span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有状态组件"><a href="#有状态组件" class="headerlink" title="有状态组件"></a>有状态组件</h3><p>有状态组件的状态信息（如颜色）通常是存储在state中的，而state是存储在element树中的。</p><p>那么Key到底应该用到哪呢？<br>我们再来一个例子，我们把色块用Padding包装一下。运行之后会发现，色块并没有交换，而是以随机的形式在变换颜色。为什么呢？</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  Screen(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ScreenState createState() =&gt; _ScreenState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ScreenState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Screen</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; widgets = [</span><br><span class="line">    Padding(</span><br><span class="line">      padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">      child: StatefulContainer(key: UniqueKey()),</span><br><span class="line">    ),</span><br><span class="line">    Padding(</span><br><span class="line">      padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">      child: StatefulContainer(key: UniqueKey()),</span><br><span class="line">    ),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Row(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: widgets,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: switchWidget,</span><br><span class="line">        child: Icon(Icons.undo),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  switchWidget() &#123;</span><br><span class="line">    widgets.insert(<span class="number">0</span>, widgets.removeAt(<span class="number">1</span>));</span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$&#123;widgets[<span class="number">0</span>]&#125;</span>, <span class="subst">$&#123;widgets[<span class="number">1</span>]&#125;</span>&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatefulContainer</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  StatefulContainer(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _StatefulContainerState createState() =&gt; _StatefulContainerState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_StatefulContainerState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">StatefulContainer</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Color color = Color.fromRGBO(</span><br><span class="line">      Random().nextInt(<span class="number">256</span>), Random().nextInt(<span class="number">256</span>), Random().nextInt(<span class="number">256</span>), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      color: color,</span><br><span class="line">      width: <span class="number">100</span>,</span><br><span class="line">      height: <span class="number">100</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合我们上面的理论，我们分析一下这次的Widget Tree 和 Element Tree，当我们交换元素后，Flutter element-to-widget matching algorithm,(元素-组件匹配算法)，开始进行对比，算法每次只对比一层，即Padding这一层。显然，Padding并没有发生本质的变化。</p><p>于是开始进行第二层对比，在对比时Flutter发现元素与组件的Key并不匹配，于是，把它设置成不可用状态，但是这里所使用的Key只是本地Key（Local Key），Flutter并不能找到另一层里面的Key（即另外一个Padding Widget中的Key）所以，Flutter就创建了一个新的Widget，而这个Widget的颜色就成了我们看到的『随机色』。</p><p>通过上面的示例，我们能明显的看出，我们的Key要设置到组件树的 <strong>顶层</strong>，而这一层在改变时，才能复用或者更新状态。</p><p>修正版本：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  Screen(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ScreenState createState() =&gt; _ScreenState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ScreenState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Screen</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; widgets = [</span><br><span class="line">    Padding(</span><br><span class="line">      key: UniqueKey(),</span><br><span class="line">      padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">      child: StatefulContainer(),</span><br><span class="line">    ),</span><br><span class="line">    Padding(</span><br><span class="line">      key: UniqueKey(),</span><br><span class="line">      padding: <span class="keyword">const</span> EdgeInsets.all(<span class="number">8.0</span>),</span><br><span class="line">      child: StatefulContainer(),</span><br><span class="line">    ),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Row(</span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: widgets,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: switchWidget,</span><br><span class="line">        child: Icon(Icons.undo),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  switchWidget() &#123;</span><br><span class="line">    widgets.insert(<span class="number">0</span>, widgets.removeAt(<span class="number">1</span>));</span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$&#123;widgets[<span class="number">0</span>]&#125;</span>, <span class="subst">$&#123;widgets[<span class="number">1</span>]&#125;</span>&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatelessContainer</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Color color = Color.fromRGBO(</span><br><span class="line">      Random().nextInt(<span class="number">256</span>), Random().nextInt(<span class="number">256</span>), Random().nextInt(<span class="number">256</span>), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      color: color,</span><br><span class="line">      width: <span class="number">100</span>,</span><br><span class="line">      height: <span class="number">100</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatefulContainer</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  StatefulContainer(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _StatefulContainerState createState() =&gt; _StatefulContainerState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_StatefulContainerState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">StatefulContainer</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Color color = Color.fromRGBO(</span><br><span class="line">      Random().nextInt(<span class="number">256</span>), Random().nextInt(<span class="number">256</span>), Random().nextInt(<span class="number">256</span>), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      color: color,</span><br><span class="line">      width: <span class="number">100</span>,</span><br><span class="line">      height: <span class="number">100</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Key的分类"><a href="#Key的分类" class="headerlink" title="Key的分类"></a>Key的分类</h2><p><img src="/images/flutter_key/img_key.png" alt="img_key"></p><ul><li>ValueKey:以一个值为key。</li><li>ObjectKey:以一个对象为key。</li><li>UniqueKey:生成唯一的随机数作为key。</li><li>PageStorageKey:专用于存储页面滚动位置的key。</li><li>GlobalKey:见后文。</li></ul><h2 id="何时使用key"><a href="#何时使用key" class="headerlink" title="何时使用key"></a>何时使用key</h2><h3 id="ValueKey"><a href="#ValueKey" class="headerlink" title="ValueKey"></a>ValueKey</h3><p>如果您有一个 Todo List 应用程序，它将会记录你需要完成的事情。我们假设每个 Todo 事情都各不相同，而你想要对每个 Todo 进行滑动删除操作。</p><p>这时候就需要使用 ValueKey！</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> TodoItem(</span><br><span class="line">    key: ValueKey(todo.task),</span><br><span class="line">    todo: todo,</span><br><span class="line">    onDismissed: (direction)&#123;</span><br><span class="line">        _removeTodo(context, todo);</span><br><span class="line">    &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="ObjectKey"><a href="#ObjectKey" class="headerlink" title="ObjectKey"></a>ObjectKey</h3><p>如果你有一个生日应用，它可以记录某个人的生日，并用列表显示出来，同样的还是需要有一个滑动删除操作。</p><p>我们知道人名可能会重复，这时候你无法保证给 Key 的值每次都会不同。但是，当人名和生日组合起来的 Object 将具有唯一性。</p><p>这时候你需要使用 ObjectKey！</p><h3 id="UniqueKey"><a href="#UniqueKey" class="headerlink" title="UniqueKey"></a>UniqueKey</h3><p>如果组合的 Object 都无法满足唯一性的时候，你想要确保每一个 Key 都具有唯一性。那么，你可以使用 UniqueKey。它将会通过该对象生成一个具有唯一性的 hash 码。</p><p>不过这样做，每次 Widget 被构建时都会去重新生成一个新的 UniqueKey，失去了一致性。也就是说你的小部件还是会改变。（还不如不用😂）</p><h3 id="PageStorageKey"><a href="#PageStorageKey" class="headerlink" title="PageStorageKey"></a>PageStorageKey</h3><p>当你有一个滑动列表，你通过某一个 Item 跳转到了一个新的页面，当你返回之前的列表页面时，你发现滑动的距离回到了顶部。这时候，给 Sliver 一个 PageStorageKey！它将能够保持 Sliver 的滚动状态。</p><h3 id="GlobalKey"><a href="#GlobalKey" class="headerlink" title="GlobalKey"></a>GlobalKey</h3><p>每个globalkey都是一个在整个应用内唯一的key。</p><p>globalkey相对而言是比较昂贵的，如果你并不需要globalkey的某些特性，那么可以考虑使用Key、ValueKey、ObjectKey或UniqueKey。</p><h4 id="用途1"><a href="#用途1" class="headerlink" title="用途1"></a>用途1</h4><p>允许widget在应用程序中的任何位置更改其parent而不丢失其状态。应用场景：在两个不同的屏幕上显示相同的widget，并保持状态相同。</p><h4 id="用途2"><a href="#用途2" class="headerlink" title="用途2"></a>用途2</h4><p>GlobalKey 能够跨 Widget 访问状态。 在这里我们有一个 Switcher 小部件，它可以通过 changeState 改变它的状态。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwitcherScreenState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SwitcherScreen</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> isActive = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Switch.adaptive(</span><br><span class="line">            value: isActive,</span><br><span class="line">            onChanged: (<span class="built_in">bool</span> currentStatus) &#123;</span><br><span class="line">              isActive = currentStatus;</span><br><span class="line">              setState(() &#123;&#125;);</span><br><span class="line">            &#125;),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  changeState() &#123;</span><br><span class="line">    isActive = !isActive;</span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我们想要在外部改变该状态，这时候就需要使用 GlobalKey。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ScreenState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Screen</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> GlobalKey&lt;SwitcherScreenState&gt; key = GlobalKey&lt;SwitcherScreenState&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: SwitcherScreen(</span><br><span class="line">        key: key,</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(onPressed: () &#123;</span><br><span class="line">        key.currentState.changeState();</span><br><span class="line">      &#125;),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们通过定义了一个 GlobalKey 并传递给 SwitcherScreen。然后我们便可以通过这个 key 拿到它所绑定的 SwitcherState 并在外部调用 changeState 改变状态了。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="https://www.youtube.com/watch?v=kn0EOS-ZiIc&feature=youtu.be">何时使用密钥 - Flutter小部件 101 第四集</a></p></li><li><p><a href="https://flutter.dev/docs/development/ui/widgets-intro#keys">widgets-intro#keys</a></p></li><li><p><a href="https://juejin.im/post/5ca2152f6fb9a05e1a7a9a26">Flutter | 深入浅出Key</a></p></li><li><p><a href="https://blog.csdn.net/al4fun/article/details/95854045">Flutter中的Key和GlobalKey</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/cover_img/img_2-people-sitting-with-view-of-yellow-flowers-during-daytime.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="dart" scheme="https://blog.wangruofeng007.com/categories/dart/"/>
    
    
    <category term="效率" scheme="https://blog.wangruofeng007.com/tags/%E6%95%88%E7%8E%87/"/>
    
    <category term="flutter" scheme="https://blog.wangruofeng007.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter factory 使用总结</title>
    <link href="https://blog.wangruofeng007.com/2020/07/26/Flutter-factory-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>https://blog.wangruofeng007.com/2020/07/26/Flutter-factory-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</id>
    <published>2020-07-26T08:54:39.000Z</published>
    <updated>2024-11-02T03:36:52.413Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/cover_img/img_photography-of-airplane-during-sunrise.jpg"></p><span id="more"></span><h2 id="0x01官方描述"><a href="#0x01官方描述" class="headerlink" title="0x01官方描述"></a>0x01官方描述</h2><blockquote><p>Use the <code>factory</code> keyword when implementing a constructor that doesn’t always create a new instance of its class. For example, a factory constructor might return an instance from a cache, or it might return an instance of a subtype.</p><p>当实现并非总是创建其类的新实例的构造函数时，请使用“ factory”关键字。例如，工厂构造函数可能会从缓存返回一个实例，或者可能会返回一个子类型的实例。</p></blockquote><h2 id="0x02使用场景"><a href="#0x02使用场景" class="headerlink" title="0x02使用场景"></a>0x02使用场景</h2><ol><li><p>避免创建过多的重复实例，如果该实例已创建，则直接从缓存获取。</p></li><li><p>调用子类的构造函数(工厂模式 factory pattern）</p></li><li><p>实现单例模式(singleton pattern)</p></li></ol><h2 id="0x03-Demo"><a href="#0x03-Demo" class="headerlink" title="0x03 Demo"></a>0x03 Demo</h2><h3 id="创建缓存实例"><a href="#创建缓存实例" class="headerlink" title="创建缓存实例"></a>创建缓存实例</h3><blockquote><p>引用自 <a href="https://dart.dev/guides/language/language-tour#factory-constructors">https://dart.dev/guides/language/language-tour#factory-constructors</a></p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line">  <span class="comment">// 缓存Map</span></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, Logger&gt; _cache = &lt;<span class="built_in">String</span>, Logger&gt;&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> Logger(<span class="built_in">String</span> name) &#123;</span><br><span class="line">    <span class="comment">// name对应的key在_cache不存在，执行Logger._internal(name)，否则直接返回</span></span><br><span class="line">    <span class="keyword">return</span> _cache.putIfAbsent(name, () =&gt; Logger._internal(name));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 私有构造函数</span></span><br><span class="line">  Logger._internal(<span class="keyword">this</span>.name) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;生成新实例:<span class="subst">$name</span>&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="keyword">var</span> p1 = Logger(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> p2 = Logger(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> p3 = Logger(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">  <span class="built_in">print</span>(identical(p1, p2));</span><br><span class="line">  <span class="built_in">print</span>(identical(p1, p3));</span><br><span class="line">  <span class="comment">// 生成新实例:1</span></span><br><span class="line">  <span class="comment">// 生成新实例:2</span></span><br><span class="line">  <span class="comment">// false</span></span><br><span class="line">  <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用子类的构造函数"><a href="#调用子类的构造函数" class="headerlink" title="调用子类的构造函数"></a>调用子类的构造函数</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="keyword">void</span> getNoise();</span><br><span class="line">  <span class="keyword">factory</span> Animal(<span class="built_in">String</span> type, <span class="built_in">String</span> name) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;cat&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> Cat(name);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;dog&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> Dog(name);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;The &#x27;<span class="subst">$type</span>&#x27; is not an animal&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  Cat(<span class="keyword">this</span>.name);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> getNoise() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>:mew~&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  Dog(<span class="keyword">this</span>.name);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> getNoise() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>:wang~&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="keyword">var</span> cat = Animal(<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;haha&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> dog = Animal(<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;hehe&#x27;</span>);</span><br><span class="line">  cat.getNoise();</span><br><span class="line">  dog.getNoise();</span><br><span class="line">  <span class="comment">// haha:mew~</span></span><br><span class="line">  <span class="comment">// hehe:wang~</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现单例模式"><a href="#实现单例模式" class="headerlink" title="实现单例模式"></a>实现单例模式</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> Singleton _singleton = Singleton._internal();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> Singleton() &#123;</span><br><span class="line">    <span class="keyword">return</span> _singleton;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Singleton._internal();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="keyword">var</span> s1 = Singleton();</span><br><span class="line">  <span class="keyword">var</span> s2 = Singleton();</span><br><span class="line">  <span class="built_in">print</span>(identical(s1, s2));</span><br><span class="line">  <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/cover_img/img_photography-of-airplane-during-sunrise.jpg&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="dart" scheme="https://blog.wangruofeng007.com/categories/dart/"/>
    
    
    <category term="效率" scheme="https://blog.wangruofeng007.com/tags/%E6%95%88%E7%8E%87/"/>
    
    <category term="flutter" scheme="https://blog.wangruofeng007.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter ShapeBorder 使用手册</title>
    <link href="https://blog.wangruofeng007.com/2020/07/12/Flutter-ShapeBorder-%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <id>https://blog.wangruofeng007.com/2020/07/12/Flutter-ShapeBorder-%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</id>
    <published>2020-07-12T11:09:55.000Z</published>
    <updated>2024-11-02T03:36:52.413Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ShapeBorder 用于设置形状和轮廓，比如圆形，矩形，圆角矩形等。常用于 Container 中。</p><span id="more"></span><p>继承结构如下：</p><ul><li>ShapeBorder【abstract】<ul><li>BeveledRectangleBorder</li><li>BoxBorder【abstract】<ul><li>Border</li><li>BorderDirectional</li></ul></li><li>CircleBorder</li><li>ContinuousRectangleBorder</li><li>RoundedRectangleBorder</li><li>StadiumBorder</li><li>InputBorder【abstract】<ul><li>OutlineInputBorder</li><li>UnderlineInputBorder</li></ul></li></ul></li></ul><p>其中 ShapeBorder、BoxBorder、InputBorder 是抽象父类。InputBorder 通常用于输入框相关的。</p><p>类的关系图</p><p><img src="/images/flutter_shape_border/ShapeBorder%E5%AD%90%E7%B1%BB%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt="ShapeBorder子类继承关系图"></p><h2 id="BeveledRectangleBorder"><a href="#BeveledRectangleBorder" class="headerlink" title="BeveledRectangleBorder"></a>BeveledRectangleBorder</h2><p>斜面圆角矩形</p><p>继承关系:</p><p> <code>BeveledRectangleBorder &gt; ShapeBorder</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Widget _beveledRectangleBorder() &#123;</span><br><span class="line">  <span class="keyword">return</span> Center(</span><br><span class="line">    child: Container(</span><br><span class="line">      width: <span class="number">240</span>,</span><br><span class="line">      height: <span class="number">120</span>,</span><br><span class="line">      margin: EdgeInsets.all(<span class="number">16</span>),</span><br><span class="line">      decoration: ShapeDecoration(</span><br><span class="line">        image: DecorationImage(</span><br><span class="line">          image: AssetImage(<span class="string">&#x27;lib/assets/img_flutter.png&#x27;</span>),</span><br><span class="line">          fit: BoxFit.cover,</span><br><span class="line">        ),</span><br><span class="line">        shape: BeveledRectangleBorder(</span><br><span class="line">          borderRadius: BorderRadius.circular(<span class="number">20</span>),</span><br><span class="line">          side: BorderSide(</span><br><span class="line">            width: <span class="number">2</span>,</span><br><span class="line">            color: Colors.blue,</span><br><span class="line">            style: BorderStyle.solid,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/images/flutter_shape_border/beveled_rectangle_border.png" alt="beveled_rectangle_border"></p><h2 id="BoxBorder"><a href="#BoxBorder" class="headerlink" title="BoxBorder"></a>BoxBorder</h2><p>BoxBorder主要掌管边线方面的事，自身是abstract，不能直接用</p><p>BoxBorder官方说明</p><blockquote><p> Base class for box borders that can paint as rectangles, circles, or rounded rectangles.</p></blockquote><h3 id="Border"><a href="#Border" class="headerlink" title="Border"></a>Border</h3><p>继承关系:</p><p><code>Border &gt; BoxBorder &gt; ShapeBorder</code></p><p>Border官方说明</p><blockquote><p>A border of a box, comprised of four sides: top, right, bottom, left.</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Widget _border() &#123;</span><br><span class="line">  <span class="keyword">return</span> Center(</span><br><span class="line">    child: Container(</span><br><span class="line">      margin: EdgeInsets.all(<span class="number">16</span>),</span><br><span class="line">      padding: EdgeInsets.all(<span class="number">16</span>),</span><br><span class="line">      decoration: ShapeDecoration(</span><br><span class="line">        color: Colors.orange,</span><br><span class="line">        shape: Border(</span><br><span class="line">          top: BorderSide(width: <span class="number">6.0</span>, color: Colors.black12),</span><br><span class="line">          left: BorderSide(width: <span class="number">6.0</span>, color: Colors.black12),</span><br><span class="line">          right: BorderSide(width: <span class="number">6.0</span>, color: Colors.black26),</span><br><span class="line">          bottom: BorderSide(width: <span class="number">6.0</span>, color: Colors.black26),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      child: Text(</span><br><span class="line">        <span class="string">&quot;Border&quot;</span>,</span><br><span class="line">        style: TextStyle(color: Colors.white, fontSize: <span class="number">20</span>),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="/images/flutter_shape_border/border.png" alt="border"></p><h3 id="BorderDirectional"><a href="#BorderDirectional" class="headerlink" title="BorderDirectional"></a>BorderDirectional</h3><p>继承关系:</p><p> <code>BorderDirectional &gt; BoxBorder &gt; ShapeBorder</code></p><p><code>BorderDirectional</code> 通过 <code>top</code>,<code>bottom</code>,<code>start</code>,<code>end</code>分别控制上下左右的边线<br>边线对象<code>BorderSide</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Widget _borderDirectional() &#123;</span><br><span class="line">  <span class="keyword">return</span> Center(</span><br><span class="line">    child: Container(</span><br><span class="line">      width: <span class="number">240</span>,</span><br><span class="line">      height: <span class="number">120</span>,</span><br><span class="line">      margin: EdgeInsets.all(<span class="number">16</span>),</span><br><span class="line">      decoration: ShapeDecoration(</span><br><span class="line">        image: DecorationImage(</span><br><span class="line">          image: AssetImage(<span class="string">&#x27;lib/assets/img_flutter.png&#x27;</span>),</span><br><span class="line">          fit: BoxFit.cover,</span><br><span class="line">        ),</span><br><span class="line">        shape: BorderDirectional(</span><br><span class="line">          start: BorderSide(color: Colors.black, width: <span class="number">15</span>),</span><br><span class="line">          end: BorderSide(color: Colors.black, width: <span class="number">15</span>),</span><br><span class="line">          top: BorderSide(</span><br><span class="line">            color: Colors.black,</span><br><span class="line">          ),</span><br><span class="line">          bottom: BorderSide(</span><br><span class="line">            color: Colors.black,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/images/flutter_shape_border/border_directional_01.png" alt="border_directional_01"></p><p>只设置左右的<code>BorderSide</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Widget _borderDirectional2() &#123;</span><br><span class="line">  <span class="keyword">return</span> Center(</span><br><span class="line">    child: Container(</span><br><span class="line">      width: <span class="number">240</span>,</span><br><span class="line">      height: <span class="number">120</span>,</span><br><span class="line">      margin: EdgeInsets.all(<span class="number">16</span>),</span><br><span class="line">      decoration: ShapeDecoration(</span><br><span class="line">        image: DecorationImage(</span><br><span class="line">          image: AssetImage(<span class="string">&#x27;lib/assets/img_flutter.png&#x27;</span>),</span><br><span class="line">          fit: BoxFit.cover,</span><br><span class="line">        ),</span><br><span class="line">        shape: BorderDirectional(</span><br><span class="line">          start: BorderSide(color: Colors.black, width: <span class="number">15</span>),</span><br><span class="line">          end: BorderSide(color: Colors.black, width: <span class="number">15</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/images/flutter_shape_border/border_directional_02.png" alt="border_directional_02"></p><h2 id="CircleBorder"><a href="#CircleBorder" class="headerlink" title="CircleBorder"></a>CircleBorder</h2><p>圆形边框。</p><p>继承关系:</p><p> <code>CircleBorder &gt; ShapeBorder</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Widget _circleBorder1() &#123;</span><br><span class="line">  <span class="keyword">return</span> Center(</span><br><span class="line">    child: Container(</span><br><span class="line">      width: <span class="number">120</span>,</span><br><span class="line">      height: <span class="number">120</span>,</span><br><span class="line">      margin: EdgeInsets.all(<span class="number">16</span>),</span><br><span class="line">      decoration: ShapeDecoration(</span><br><span class="line">        image: DecorationImage(</span><br><span class="line">          image: AssetImage(<span class="string">&#x27;lib/assets/img_flutter.png&#x27;</span>),</span><br><span class="line">          fit: BoxFit.cover,</span><br><span class="line">        ),</span><br><span class="line">        shape: CircleBorder(</span><br><span class="line">          side: BorderSide(),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/images/flutter_shape_border/circle_border_01.jpg" alt="circle_border_01"></p><p>上面的是使用默认参数的效果</p><p><img src="/images/flutter_shape_border/circle_border_03.png" alt="circle_border_03"></p><p>通过设置BorderSide来设置边框颜色和宽度，以及是否显示边框</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Widget _circleBorder2() &#123;</span><br><span class="line">  <span class="keyword">return</span> Center(</span><br><span class="line">    child: Container(</span><br><span class="line">      width: <span class="number">120</span>,</span><br><span class="line">      height: <span class="number">120</span>,</span><br><span class="line">      margin: EdgeInsets.all(<span class="number">16</span>),</span><br><span class="line">      decoration: ShapeDecoration(</span><br><span class="line">        image: DecorationImage(</span><br><span class="line">          image: AssetImage(<span class="string">&#x27;lib/assets/img_flutter.png&#x27;</span>),</span><br><span class="line">          fit: BoxFit.cover,</span><br><span class="line">        ),</span><br><span class="line">        shape: CircleBorder(</span><br><span class="line">          side: BorderSide(</span><br><span class="line">            width: <span class="number">10</span>,</span><br><span class="line">            color: Colors.blue,</span><br><span class="line">            style: BorderStyle.solid,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/images/flutter_shape_border/circle_border_02.jpg" alt="circle_border_02"></p><h2 id="ContinuousRectangleBorder"><a href="#ContinuousRectangleBorder" class="headerlink" title="ContinuousRectangleBorder"></a>ContinuousRectangleBorder</h2><p>平滑过渡的矩形边框</p><p>继承关系:</p><p><code>ContinuousRectangleBorder &gt; ShapeBorder</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Widget _continuousRectangleBorder() &#123;</span><br><span class="line">  <span class="keyword">return</span> Center(</span><br><span class="line">    child: Container(</span><br><span class="line">      width: <span class="number">240</span>,</span><br><span class="line">      height: <span class="number">120</span>,</span><br><span class="line">      margin: EdgeInsets.all(<span class="number">16</span>),</span><br><span class="line">      decoration: ShapeDecoration(</span><br><span class="line">        image: DecorationImage(</span><br><span class="line">          image: AssetImage(<span class="string">&#x27;lib/assets/img_flutter.png&#x27;</span>),</span><br><span class="line">          fit: BoxFit.cover,</span><br><span class="line">        ),</span><br><span class="line">        shape: ContinuousRectangleBorder(</span><br><span class="line">          borderRadius: BorderRadius.circular(<span class="number">40</span>),</span><br><span class="line">          side: BorderSide(</span><br><span class="line">            width: <span class="number">2</span>,</span><br><span class="line">            color: Colors.blue,</span><br><span class="line">            style: BorderStyle.solid,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/images/flutter_shape_border/continuous_rectangle_border.png" alt="continuous_rectangle_border"></p><h2 id="RoundedRectangleBorder"><a href="#RoundedRectangleBorder" class="headerlink" title="RoundedRectangleBorder"></a>RoundedRectangleBorder</h2><p>圆角矩形。</p><p>继承关系:</p><p><code>RoundedRectangleBorder &gt; ShapeBorder</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Widget _roundedRectangleBorder() &#123;</span><br><span class="line">  <span class="keyword">return</span> Center(</span><br><span class="line">    child: Container(</span><br><span class="line">      width: <span class="number">240</span>,</span><br><span class="line">      height: <span class="number">120</span>,</span><br><span class="line">      margin: EdgeInsets.all(<span class="number">16</span>),</span><br><span class="line">      decoration: ShapeDecoration(</span><br><span class="line">        image: DecorationImage(</span><br><span class="line">          image: AssetImage(<span class="string">&#x27;lib/assets/img_flutter.png&#x27;</span>),</span><br><span class="line">          fit: BoxFit.cover,</span><br><span class="line">        ),</span><br><span class="line">        shape: RoundedRectangleBorder(</span><br><span class="line">          borderRadius: BorderRadius.circular(<span class="number">20</span>),</span><br><span class="line">          side: BorderSide(</span><br><span class="line">            width: <span class="number">2</span>,</span><br><span class="line">            color: Colors.blue,</span><br><span class="line">            style: BorderStyle.solid,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/images/flutter_shape_border/rounded_rectangle_border_01.png" alt="rounded_rectangle_border_01"></p><h2 id="StadiumBorder"><a href="#StadiumBorder" class="headerlink" title="StadiumBorder"></a>StadiumBorder</h2><p>体育场形状。即两边是半圆。</p><p>继承关系:</p><p><code>StadiumBorder &gt; ShapeBorder</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Widget _stadiumBorder() &#123;</span><br><span class="line">  <span class="keyword">return</span> Center(</span><br><span class="line">    child: Container(</span><br><span class="line">      width: <span class="number">240</span>,</span><br><span class="line">      height: <span class="number">120</span>,</span><br><span class="line">      margin: EdgeInsets.all(<span class="number">16</span>),</span><br><span class="line">      decoration: ShapeDecoration(</span><br><span class="line">        image: DecorationImage(</span><br><span class="line">          image: AssetImage(<span class="string">&#x27;lib/assets/img_flutter.png&#x27;</span>),</span><br><span class="line">          fit: BoxFit.cover,</span><br><span class="line">        ),</span><br><span class="line">        shape: StadiumBorder(</span><br><span class="line">          side: BorderSide(</span><br><span class="line">            width: <span class="number">2</span>,</span><br><span class="line">            color: Colors.blue,</span><br><span class="line">            style: BorderStyle.solid,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/images/flutter_shape_border/stadiu_border_01.png" alt="stadiu_border_01"></p><h2 id="InputBorder"><a href="#InputBorder" class="headerlink" title="InputBorder"></a>InputBorder</h2><p>继承关系:</p><p> <code>InputBorder &gt; ShapeBorder</code></p><p>官方说明：</p><blockquote><p>Defines the appearance of an [InputDecorator]’s border.</p><p>An input decorator’s border is specified by [InputDecoration.border].</p><p>The border is drawn relative to the input decorator’s “container” which</p><p>is the optionally filled area above the decorator’s helper, error,and counter.</p></blockquote><p>常用的输入边框，有2个衍生子类<code>OutlineInputBorder</code> 和<code>UnderlineInputBorder</code></p><h3 id="OutlineInputBorder"><a href="#OutlineInputBorder" class="headerlink" title="OutlineInputBorder"></a>OutlineInputBorder</h3><p>继承关系:</p><p> <code>OutlineInputBorder &gt; InputBorder &gt; ShapeBorder</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Widget _outlineInputBorder() &#123;</span><br><span class="line">  <span class="keyword">return</span> Center(</span><br><span class="line">    child: Container(</span><br><span class="line">      margin: EdgeInsets.all(<span class="number">16</span>),</span><br><span class="line">      padding: EdgeInsets.all(<span class="number">16</span>),</span><br><span class="line">      decoration: ShapeDecoration(</span><br><span class="line">        color: Colors.orange,</span><br><span class="line">        shape: OutlineInputBorder(</span><br><span class="line">          borderSide: BorderSide(width: <span class="number">2.0</span>, color: Colors.purple),</span><br><span class="line">          borderRadius: BorderRadius.circular(<span class="number">20.0</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      child: Text(</span><br><span class="line">        <span class="string">&quot;OutlineInputBorder&quot;</span>,</span><br><span class="line">        style: TextStyle(color: Colors.white, fontSize: <span class="number">20</span>),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/images/flutter_shape_border/outlineInput_borde.png" alt="outlineInput_borde"></p><h3 id="UnderlineInputBorder"><a href="#UnderlineInputBorder" class="headerlink" title="UnderlineInputBorder"></a>UnderlineInputBorder</h3><p>继承关系:</p><p><code>UnderlineInputBorder &gt; InputBorder &gt; ShapeBorder</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Widget _underlineInputBorder() &#123;</span><br><span class="line">  <span class="keyword">return</span> Center(</span><br><span class="line">    child: Container(</span><br><span class="line">      margin: EdgeInsets.all(<span class="number">16</span>),</span><br><span class="line">      padding: EdgeInsets.all(<span class="number">16</span>),</span><br><span class="line">      decoration: ShapeDecoration(</span><br><span class="line">        color: Colors.orange,</span><br><span class="line">        shape: UnderlineInputBorder(</span><br><span class="line">          borderSide: BorderSide(width: <span class="number">2.0</span>, color: Colors.purple),</span><br><span class="line">          borderRadius: BorderRadius.circular(<span class="number">20.0</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      child: Text(</span><br><span class="line">        <span class="string">&quot;UnderlineInputBorder&quot;</span>,</span><br><span class="line">        style: TextStyle(color: Colors.white, fontSize: <span class="number">20</span>),</span><br><span class="line">      ),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/images/flutter_shape_border/underlineInput_border.png" alt="underlineInput_border"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;ShapeBorder 用于设置形状和轮廓，比如圆形，矩形，圆角矩形等。常用于 Container 中。&lt;/p&gt;</summary>
    
    
    
    <category term="dart" scheme="https://blog.wangruofeng007.com/categories/dart/"/>
    
    
    <category term="效率" scheme="https://blog.wangruofeng007.com/tags/%E6%95%88%E7%8E%87/"/>
    
    <category term="flutter" scheme="https://blog.wangruofeng007.com/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>VSCode Snippets 使用手册</title>
    <link href="https://blog.wangruofeng007.com/2020/06/13/VSCode-Snippets-%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <id>https://blog.wangruofeng007.com/2020/06/13/VSCode-Snippets-%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</id>
    <published>2020-06-13T08:09:53.000Z</published>
    <updated>2024-11-02T03:36:52.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="VSCode-Snippets-使用手册"><a href="#VSCode-Snippets-使用手册" class="headerlink" title="VSCode Snippets 使用手册"></a>VSCode Snippets 使用手册</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当我们为了减少模板代码，我们第一个很可能想到使用<code>Code Snippets</code>,很多IDE和文件编辑器已经给我们提供了一个预装的代码片段，当预装的代码片段不能瞒着我们的需求，我们可能会自己定制一些自己的专有代码代码片段，下面就为大家介绍如何在VSCode定制自己的代码片段以及一些小技巧。</p><span id="more"></span><h2 id="如何添加"><a href="#如何添加" class="headerlink" title="如何添加"></a>如何添加</h2><h3 id="方法一：通过控制台"><a href="#方法一：通过控制台" class="headerlink" title="方法一：通过控制台"></a>方法一：通过控制台</h3><ol><li><p>打开VSCode,按下快捷键组合<code>shift+command+p</code>呼出控制台</p></li><li><p>在控制台输入： <code>Configure User Snippets</code>选择<img src="/images/vscode_snippets/configure_user_snippets.jpg" alt="configure_user_snippets"></p></li><li><p>输入<code>new</code>，找到新建代码片段命令，这里可以选择创建全局的或者为某个项目专属的代码片段,这里我们选择<code>New Global Snippets file...</code>。<img src="/images/vscode_snippets/new_snippets.jpg" alt="new_snippets"></p></li><li><p>给片段起一个易于理解的命名，回车<img src="/images/vscode_snippets/new_snippet_with_name.png" alt="new_snippet_with_name"></p></li><li><p>编辑代码片段的内容<img src="/images/vscode_snippets/snippets_sample.png" alt="snippets_sample"></p><p>例如我们创建一个自己名字的TODO, 类似这样的风格：<code>// TODO(ruofeng): some comment</code></p><p>最终版本如下：<img src="/images/vscode_snippets/todo_snippets.png" alt="todo_snippets"></p><p>效果图</p><p><img src="/images/vscode_snippets/todo_snippets_auto_tip2.png" alt="todo_snippets_auto_tip2"></p></li></ol><h3 id="方法二：通过首选项"><a href="#方法二：通过首选项" class="headerlink" title="方法二：通过首选项"></a>方法二：通过首选项</h3><ol><li>Code -&gt; Preferences-&gt;User Snippets</li></ol><p><img src="/images/vscode_snippets/preffer_setting_code_snippets.jpg" alt="preffer_setting_code_snippets"></p><ol start="2"><li>后面的步骤和第一种的4，5一样，这里不再赘述</li></ol><h2 id="使用测试"><a href="#使用测试" class="headerlink" title="使用测试"></a>使用测试</h2><p>新建一个<code>.dart</code>结尾的文件,这里就叫<code>test.dart</code> ,输入todo，出现了我们刚才定义的代码片段</p><p><img src="/images/vscode_snippets/todo_snippets_auto_tip.png" alt="todo_snippets_auto_tip"></p><p>选择todo,出现我们刚才定义的代码片段</p><p><img src="/images/vscode_snippets/todo_snippets_auto_tip2.png" alt="todo_snippets_auto_tip2"></p><h2 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h2><ol><li><p>变量， 格式 <code>$+num</code>, 例如： </p><p><code>&quot;console.log(&#39;$1&#39;);&quot;</code></p></li><li><p>变量占位描述,格式<code>$&#123;num:desc&#125;</code>,例如：</p><p><code>&quot;$&#123;1:label&#125;, $&#123;2:another&#125;;&quot;</code></p></li><li><p>缩进，<code>\t</code>,注意缩进的对称性</p><p><img src="/images/vscode_snippets/demo_snippets.png" alt="demo_snippets"></p></li></ol><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote><p> 为了跟进环境动态定制一些片段，我们可以使用系统提供的一些环境变量，<a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets#_variables">官方介绍</a></p></blockquote><p><img src="/images/vscode_snippets/snippets_variables.png" alt="snippets_variables"></p><p>示例：</p><p>我们来定义一个Xcode版本的OC默认风格代码片段</p><p><img src="/images/vscode_snippets/snippets_copywright.png" alt="snippets_copywright"></p><p>新建一个test.dart文件，在里面输入copywright，选择刚才我们的添加的代码片段，效果如下</p><p><img src="/images/vscode_snippets/snippets_copywright_dart.png" alt="snippets_copywright_dart"></p><h3 id="变量转换"><a href="#变量转换" class="headerlink" title="变量转换"></a>变量转换</h3><p>语法说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">any         ::= tabstop | placeholder | choice | variable | text</span><br><span class="line">tabstop     ::= &#x27;$&#x27; int</span><br><span class="line">                | &#x27;$&#123;&#x27; int &#x27;&#125;&#x27;</span><br><span class="line">                | &#x27;$&#123;&#x27; int  transform &#x27;&#125;&#x27;</span><br><span class="line">placeholder ::= &#x27;$&#123;&#x27; int &#x27;:&#x27; any &#x27;&#125;&#x27;</span><br><span class="line">choice      ::= &#x27;$&#123;&#x27; int &#x27;|&#x27; text (&#x27;,&#x27; text)* &#x27;|&#125;&#x27;</span><br><span class="line">variable    ::= &#x27;$&#x27; var | &#x27;$&#123;&#x27; var &#x27;&#125;&#x27;</span><br><span class="line">                | &#x27;$&#123;&#x27; var &#x27;:&#x27; any &#x27;&#125;&#x27;</span><br><span class="line">                | &#x27;$&#123;&#x27; var transform &#x27;&#125;&#x27;</span><br><span class="line">transform   ::= &#x27;/&#x27; regex &#x27;/&#x27; (format | text)+ &#x27;/&#x27; options</span><br><span class="line">format      ::= &#x27;$&#x27; int | &#x27;$&#123;&#x27; int &#x27;&#125;&#x27;</span><br><span class="line">                | &#x27;$&#123;&#x27; int &#x27;:&#x27; &#x27;/upcase&#x27; | &#x27;/downcase&#x27; | &#x27;/capitalize&#x27; &#x27;&#125;&#x27;</span><br><span class="line">                | &#x27;$&#123;&#x27; int &#x27;:+&#x27; if &#x27;&#125;&#x27;</span><br><span class="line">                | &#x27;$&#123;&#x27; int &#x27;:?&#x27; if &#x27;:&#x27; else &#x27;&#125;&#x27;</span><br><span class="line">                | &#x27;$&#123;&#x27; int &#x27;:-&#x27; else &#x27;&#125;&#x27; | &#x27;$&#123;&#x27; int &#x27;:&#x27; else &#x27;&#125;&#x27;</span><br><span class="line">regex       ::= JavaScript Regular Expression value (ctor-string)</span><br><span class="line">options     ::= JavaScript Regular Expression option (ctor-options)</span><br><span class="line">var         ::= [_a-zA-Z] [_a-zA-Z0-9]*</span><br><span class="line">int         ::= [0-9]+</span><br><span class="line">text        ::= .*</span><br></pre></td></tr></table></figure><p>下面将实现读取文件名称截取掉文件的后缀效果： <code>foo.text</code> &#x3D;&#x3D;&gt; <code>foo</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$&#123;TM_FILENAME/(.*)\\..+$/$1/&#125;</span><br><span class="line">  |           |         |  |</span><br><span class="line">  |           |         |  |-&gt; no options</span><br><span class="line">  |           |         |</span><br><span class="line">  |           |         |-&gt; references the contents of the first</span><br><span class="line">  |           |             capture group</span><br><span class="line">  |           |</span><br><span class="line">  |           |-&gt; regex to capture everything before</span><br><span class="line">  |               the final `.suffix`</span><br><span class="line">  |</span><br><span class="line">  |-&gt; resolves to the filename</span><br></pre></td></tr></table></figure><p>Transform Example：</p><table><thead><tr><th align="left">Example</th><th align="left">Output</th><th align="left">Explanation</th></tr></thead><tbody><tr><td align="left"><code>&quot;$&#123;TM_FILENAME/[\\.]/_/&#125;&quot;</code></td><td align="left"><code>example-123_456-TEST.js</code></td><td align="left">Replace the first <code>.</code> with <code>_</code></td></tr><tr><td align="left"><code>&quot;$&#123;TM_FILENAME/[\\.-]/_/g&#125;&quot;</code></td><td align="left"><code>example_123_456_TEST_js</code></td><td align="left">Replace each <code>.</code> or <code>-</code> with <code>_</code></td></tr><tr><td align="left"><code>&quot;$&#123;TM_FILENAME/(.*)/$&#123;1:/upcase&#125;/&#125;&quot;</code></td><td align="left"><code>EXAMPLE-123.456-TEST.JS</code></td><td align="left">Change to all uppercase</td></tr><tr><td align="left"><code>&quot;$&#123;TM_FILENAME/[^0-9^a-z]//gi&#125;&quot;</code></td><td align="left"><code>example123456TESTjs</code></td><td align="left">Remove non-alphanumeric characters</td></tr></tbody></table><h3 id="Build-value-代码片段插件bvtf-的实现"><a href="#Build-value-代码片段插件bvtf-的实现" class="headerlink" title="Build value 代码片段插件bvtf 的实现"></a>Build value 代码片段插件<code>bvtf</code> 的实现</h3><p><code>bvtf</code>，是上面变量和变量转换的综合应用，实现了下面功能</p><ol><li>自动识别文件名称</li><li>将文件名称去掉后缀，转换为大写驼峰法（pascalcase）</li></ol><p>源码获取步骤：</p><ol><li><p>去github官网下载它的源码，<a href="https://github.com/GiancarloCode/built-value-snippets">built-value-snippets</a></p></li><li><p>在vscode-&gt;snippets-&gt;snippets.json 找到对应的源码，如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;Built Value Type File&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bvtf&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;import &#x27;package:built_collection/built_collection.dart&#x27;;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;import &#x27;package:built_value/built_value.dart&#x27;;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;part &#x27;$TM_FILENAME_BASE.g.dart&#x27;;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;abstract class $&#123;TM_FILENAME_BASE/(.*)$/$&#123;1:/pascalcase&#125;/&#125; implements Built&lt;$&#123;TM_FILENAME_BASE/(.*)$/$&#123;1:/pascalcase&#125;/&#125;, $&#123;TM_FILENAME_BASE/(.*)$/$&#123;1:/pascalcase&#125;/&#125;Builder&gt; &#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;  $&#123;2&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;  $&#123;TM_FILENAME_BASE/(.*)$/$&#123;1:/pascalcase&#125;/&#125;._();&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;  factory $&#123;TM_FILENAME_BASE/(.*)$/$&#123;1:/pascalcase&#125;/&#125;([void Function($&#123;TM_FILENAME_BASE/(.*)$/$&#123;1:/pascalcase&#125;/&#125;Builder) updates]) = _$$&#123;TM_FILENAME_BASE/(.*)$/$&#123;1:/pascalcase&#125;/&#125;;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Built Value Type File whose name corresponds to the file name&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>核心的变量如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file name: home_page.dart =&gt; HomePage</span></span><br><span class="line"><span class="string">&quot;$&#123;TM_FILENAME_BASE/(.*)$/$&#123;1:/pascalcase&#125;/&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>通过上面的学习我们几乎可能编写我们的日常需要各种代码片段</p></li></ol><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><p><a href="https://github.com/GiancarloCode/built-value-snippets">built-value-snippets</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=GiancarloCode.built-value-snippets">Built Value Snippets VSCode 插件</a></p></li><li><p><a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets#_variables">Snippets in Visual Studio Code</a></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;VSCode-Snippets-使用手册&quot;&gt;&lt;a href=&quot;#VSCode-Snippets-使用手册&quot; class=&quot;headerlink&quot; title=&quot;VSCode Snippets 使用手册&quot;&gt;&lt;/a&gt;VSCode Snippets 使用手册&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;当我们为了减少模板代码，我们第一个很可能想到使用&lt;code&gt;Code Snippets&lt;/code&gt;,很多IDE和文件编辑器已经给我们提供了一个预装的代码片段，当预装的代码片段不能瞒着我们的需求，我们可能会自己定制一些自己的专有代码代码片段，下面就为大家介绍如何在VSCode定制自己的代码片段以及一些小技巧。&lt;/p&gt;</summary>
    
    
    
    <category term="dart" scheme="https://blog.wangruofeng007.com/categories/dart/"/>
    
    
    <category term="效率" scheme="https://blog.wangruofeng007.com/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>用Typora的MarkDown绘制Diagrams(图解)</title>
    <link href="https://blog.wangruofeng007.com/2019/11/29/%E7%94%A8Typora%E7%9A%84MarkDown%E7%BB%98%E5%88%B6Diagrams-%E5%9B%BE%E8%A7%A3/"/>
    <id>https://blog.wangruofeng007.com/2019/11/29/%E7%94%A8Typora%E7%9A%84MarkDown%E7%BB%98%E5%88%B6Diagrams-%E5%9B%BE%E8%A7%A3/</id>
    <published>2019-11-29T08:38:05.000Z</published>
    <updated>2024-11-02T03:36:52.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最近在研究软件设计领域常用各种图解，发现<a href="https://typora.io/">Typora</a>d对MarkDown渲染diagrams的支持特别好，于是整理了一下，方便以后查阅使用，目前(测试版本<code>0.9.9.18.1(1088)</code>)支持以下几大类图解:</p><ul><li>Sequence</li><li>Flowchart </li><li>Mermaid <ul><li>sequence  (时序图)</li><li>flowchart   (流程图)</li><li>gantt          (甘特图)</li></ul></li></ul><span id="more"></span><blockquote><p>Sequence由<a href="https://bramp.github.io/js-sequence-diagrams/">js-sequence</a>驱动</p><p>Flowchart由<a href="http://flowchart.js.org/">flowchart.js</a>驱动</p><p>Mermaid由<a href="https://mermaid-js.github.io/mermaid/#/">mermaid</a>驱动，支持sequence，flowchart，gantt</p></blockquote><h2 id="Sequence-–-时序图"><a href="#Sequence-–-时序图" class="headerlink" title="Sequence – 时序图"></a>Sequence – 时序图</h2><h3 id="UML时序图-sequence"><a href="#UML时序图-sequence" class="headerlink" title="UML时序图(sequence)"></a>UML时序图(sequence)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of  对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br></pre></td></tr></table></figure><p><img src="/images/Diagrams/UML_sequence_01.png" alt="UML_sequence_01"></p><h3 id="UML时序图复杂-sequence"><a href="#UML时序图复杂-sequence" class="headerlink" title="UML时序图复杂(sequence)"></a>UML时序图复杂(sequence)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Title: 标题：复杂使用</span><br><span class="line">对象A-&gt;对象B: 对象B你好吗?（请求）</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B--&gt;对象A: 我很好(响应)</span><br><span class="line">对象B-&gt;小三: 你好吗</span><br><span class="line">小三--&gt;&gt;对象A: 对象B找我了</span><br><span class="line">对象A-&gt;对象B: 你真的好吗？</span><br><span class="line">Note over 小三,对象B: 我们是朋友</span><br><span class="line">participant C</span><br><span class="line">Note right of C: 没人陪我玩</span><br></pre></td></tr></table></figure><p><img src="/images/Diagrams/UML_sequence_02.png" alt="UML_sequence_02"></p><h3 id="UML标准时序图-mermaid"><a href="#UML标准时序图-mermaid" class="headerlink" title="UML标准时序图(mermaid)"></a>UML标准时序图(mermaid)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">%% 时序图例子,-&gt; 直线，--&gt;虚线，-&gt;&gt;实线箭头</span><br><span class="line">sequenceDiagram</span><br><span class="line">participant 张三</span><br><span class="line">participant 李四</span><br><span class="line">张三-&gt;王五: 王五你好吗？</span><br><span class="line">loop 健康检查</span><br><span class="line">王五-&gt;王五: 与疾病战斗</span><br><span class="line">end</span><br><span class="line">Note right of 王五: 合理 食物 &lt;br/&gt;看医生...</span><br><span class="line">李四--&gt;&gt;张三: 很好!</span><br><span class="line">王五-&gt;李四: 你怎么样?</span><br><span class="line">李四--&gt;王五: 很好!</span><br></pre></td></tr></table></figure><p>语法说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Title: Here is a title</span><br><span class="line">A-&gt;B: Normal line</span><br><span class="line">B--&gt;C: Dashed line</span><br><span class="line">C-&gt;&gt;D: Open arrow</span><br><span class="line">D--&gt;&gt;A: Dashed open arrow</span><br></pre></td></tr></table></figure><p><img src="/images/Diagrams/UML_mermaid.png" alt="UML_mermaid"></p><h2 id="flowchart-–-流程图"><a href="#flowchart-–-流程图" class="headerlink" title="flowchart – 流程图"></a>flowchart – 流程图</h2><h3 id="横向流程图-mermaid"><a href="#横向流程图-mermaid" class="headerlink" title="横向流程图(mermaid)"></a>横向流程图(mermaid)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">B --&gt; C&#123;条件a&#125;</span><br><span class="line">C --&gt;|a=1| D[结果1]</span><br><span class="line">C --&gt;|a=2| E[结果2]</span><br><span class="line">F[横向流程图]</span><br></pre></td></tr></table></figure><p><img src="/images/Diagrams/flowchart_mermaid_01.png" alt="flowchart_mermaid_01"></p><h3 id="竖向流程图-mermaid"><a href="#竖向流程图-mermaid" class="headerlink" title="竖向流程图(mermaid)"></a>竖向流程图(mermaid)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">B --&gt; C&#123;条件a&#125;</span><br><span class="line">C --&gt;|a=1| D[结果1]</span><br><span class="line">C --&gt;|a=2| E[结果2]</span><br><span class="line">F[竖向流程图]</span><br></pre></td></tr></table></figure><p><img src="/images/Diagrams/flowchart_mermaid_02.png" alt="flowchart_mermaid_02"></p><h3 id="标准流程图-flow"><a href="#标准流程图-flow" class="headerlink" title="标准流程图(flow)"></a>标准流程图(flow)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><p><img src="/images/Diagrams/flowchart_flow_01.png" alt="flowchart_flow_01"></p><h3 id="标准流程图-横向-flow"><a href="#标准流程图-横向-flow" class="headerlink" title="标准流程图-横向(flow)"></a>标准流程图-横向(flow)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st(right)-&gt;op(right)-&gt;cond</span><br><span class="line">cond(yes)-&gt;io(bottom)-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><p><img src="/images/Diagrams/flowchart_flow_02.png" alt="flowchart_flow_02"></p><h2 id="甘特图样例-gantt"><a href="#甘特图样例-gantt" class="headerlink" title="甘特图样例 (gantt)"></a>甘特图样例 (gantt)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">%% 语法示例</span><br><span class="line">gantt</span><br><span class="line">dateFormat  YYYY-MM-DD</span><br><span class="line">title 软件开发甘特图</span><br><span class="line"></span><br><span class="line">section 设计</span><br><span class="line">需求:done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">原型:active,  des2, 2014-01-09, 3d</span><br><span class="line">UI设计: des3, after des2, 5d</span><br><span class="line">未来任务: des4, after des3, 5d</span><br><span class="line"></span><br><span class="line">section 开发</span><br><span class="line">学习准备理解需求 :crit, done, 2014-01-06,24h</span><br><span class="line">设计框架 :crit, done, after des2, 2d</span><br><span class="line">开发 :crit, active, 3d</span><br><span class="line">未来任务 :crit, 5d</span><br><span class="line">耍 :2d</span><br><span class="line"></span><br><span class="line">section 测试</span><br><span class="line">功能测试 :active, a1, after des3, 3d</span><br><span class="line">压力测试 :after a1  , 20h</span><br><span class="line">测试报告 : 48h</span><br></pre></td></tr></table></figure><p><img src="/images/Diagrams/Gantt.png" alt="Gantt"></p><h2 id="不错的画图工具网站"><a href="#不错的画图工具网站" class="headerlink" title="不错的画图工具网站"></a>不错的画图工具网站</h2><ul><li><a href="https://www.processon.com/">https://www.processon.com</a></li><li><a href="https://www.draw.io/">https://www.draw.io</a></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://support.typora.io/Draw-Diagrams-With-Markdown/">Draw Diagrams With Markdown</a></li><li><a href="https://www.jianshu.com/p/7ddbb7dc8fec">Typora画流程图、时序图(顺序图)、甘特图（转）</a></li><li><a href="http://mermaid-js.github.io/mermaid/#/">mermaid</a></li><li><a href="https://github.com/mermaidjs/mermaid-live-editor">mermaid-live-editor</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;最近在研究软件设计领域常用各种图解，发现&lt;a href=&quot;https://typora.io/&quot;&gt;Typora&lt;/a&gt;d对MarkDown渲染diagrams的支持特别好，于是整理了一下，方便以后查阅使用，目前(测试版本&lt;code&gt;0.9.9.18.1(1088)&lt;/code&gt;)支持以下几大类图解:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sequence&lt;/li&gt;
&lt;li&gt;Flowchart &lt;/li&gt;
&lt;li&gt;Mermaid &lt;ul&gt;
&lt;li&gt;sequence  (时序图)&lt;/li&gt;
&lt;li&gt;flowchart   (流程图)&lt;/li&gt;
&lt;li&gt;gantt          (甘特图)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="效率" scheme="https://blog.wangruofeng007.com/tags/%E6%95%88%E7%8E%87/"/>
    
    <category term="Typora" scheme="https://blog.wangruofeng007.com/tags/Typora/"/>
    
  </entry>
  
  <entry>
    <title>[转]Objective-C Runtime 大佬系列文章整理</title>
    <link href="https://blog.wangruofeng007.com/2019/11/18/%E8%BD%AC-Objective-C-Runtime-%E5%A4%A7%E4%BD%AC%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%95%B4%E7%90%86/"/>
    <id>https://blog.wangruofeng007.com/2019/11/18/%E8%BD%AC-Objective-C-Runtime-%E5%A4%A7%E4%BD%AC%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0%E6%95%B4%E7%90%86/</id>
    <published>2019-11-17T16:41:40.000Z</published>
    <updated>2024-11-02T03:36:52.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>此文转自<a href="https://kangzubin.com/objc-runtime-articles/">kangzubin 收集的runtime大佬系列文章</a>，特别鸣谢，方便后续查阅。</p><span id="more"></span><h2 id="kangzubin"><a href="#kangzubin" class="headerlink" title="kangzubin"></a>kangzubin</h2><p>最近重新温习了下 Objective-C Runtime 相关的知识，自己整理了两篇水文：</p><ul><li><a href="https://kangzubin.com/objc1.0-class-object/">Objective-C 1.0 中类与对象的定义</a></li><li><a href="https://kangzubin.com/objc2.0-class-object/">Objective-C 2.0 中类与对象的定义</a></li></ul><p>然后在网上搜罗了一圈，发现很多大佬之前都写了一系列关于 Runtime 的文章，深入浅出，真是让人难以望其项背，收集如下，方便日后学习，欢迎补充。</p><h2 id="Greg-Parker"><a href="#Greg-Parker" class="headerlink" title="Greg Parker"></a><a href="http://www.sealiesoftware.com/blog/">Greg Parker</a></h2><ul><li><a href="http://www.sealiesoftware.com/blog/archive/2009/04/14/objc_explain_Classes_and_metaclasses.html">Classes and metaclasses</a></li></ul><h2 id="Matt-Gallagher"><a href="#Matt-Gallagher" class="headerlink" title="Matt Gallagher"></a><a href="https://www.cocoawithlove.com/">Matt Gallagher</a></h2><ul><li><a href="https://www.cocoawithlove.com/2010/01/what-is-meta-class-in-objective-c.html">What is a meta-class in Objective-C?</a></li></ul><h2 id="南峰子"><a href="#南峰子" class="headerlink" title="南峰子"></a><a href="https://southpeak.github.io/">南峰子</a></h2><ul><li><a href="http://southpeak.github.io/2014/10/25/objective-c-runtime-1/">Objective-C Runtime 运行时之一：类与对象</a></li><li><a href="http://southpeak.github.io/2014/10/30/objective-c-runtime-2/">Objective-C Runtime 运行时之二：成员变量与属性</a></li><li><a href="http://southpeak.github.io/2014/11/03/objective-c-runtime-3/">Objective-C Runtime 运行时之三：方法与消息</a></li><li><a href="http://southpeak.github.io/2014/11/06/objective-c-runtime-4/">Objective-C Runtime 运行时之四：Method Swizzling</a></li><li><a href="http://southpeak.github.io/2014/11/08/objective-c-runtime-5/">Objective-C Runtime 运行时之五：协议与分类</a></li><li><a href="http://southpeak.github.io/2014/11/09/objective-c-runtime-6/">Objective-C Runtime 运行时之六：拾遗</a></li></ul><h2 id="halfrost"><a href="#halfrost" class="headerlink" title="halfrost"></a><a href="https://halfrost.com/">halfrost</a></h2><ul><li><a href="http://halfrost.com/objc_runtime_isa_class/">神经病院 Objective-C Runtime 入院第一天 —— isa 和 Class</a></li><li><a href="http://halfrost.com/objc_runtime_objc_msgsend/">神经病院 Objective-C Runtime 住院第二天 —— 消息发送与转发</a></li><li><a href="http://halfrost.com/how_to_use_runtime/">神经病院 Objective-C Runtime 出院第三天 —— 如何正确使用 Runtime</a></li><li><a href="http://halfrost.com/objc_life/">Objc 对象的今生今世</a></li></ul><h2 id="杨萧玉"><a href="#杨萧玉" class="headerlink" title="杨萧玉"></a><a href="http://yulingtianxia.com/">杨萧玉</a></h2><ul><li><a href="http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/">Objective-C Runtime</a></li><li><a href="http://yulingtianxia.com/blog/2015/12/06/The-Principle-of-Refenrence-Counting/">Objective-C 引用计数原理</a></li><li><a href="http://yulingtianxia.com/blog/2016/06/15/Objective-C-Message-Sending-and-Forwarding/">Objective-C 消息发送与转发机制原理</a></li></ul><h2 id="雷纯锋"><a href="#雷纯锋" class="headerlink" title="雷纯锋"></a><a href="http://blog.leichunfeng.com/">雷纯锋</a></h2><ul><li><a href="http://blog.leichunfeng.com/blog/2015/04/25/objective-c-object-model/">Objective-C 对象模型</a></li><li><a href="http://blog.leichunfeng.com/blog/2015/05/02/objective-c-plus-load-vs-plus-initialize/">Objective-C +load vs +initialize</a></li><li><a href="http://blog.leichunfeng.com/blog/2015/05/18/objective-c-category-implementation-principle/">Objective-C Category 的实现原理</a></li><li><a href="http://blog.leichunfeng.com/blog/2015/05/31/objective-c-autorelease-pool-implementation-principle/">Objective-C Autorelease Pool 的实现原理</a></li><li><a href="http://blog.leichunfeng.com/blog/2015/06/14/objective-c-method-swizzling-best-practice/">Objective-C Method Swizzling 的最佳实践</a></li><li><a href="http://blog.leichunfeng.com/blog/2015/06/26/objective-c-associated-objects-implementation-principle/">Objective-C Associated Objects 的实现原理</a></li></ul><h2 id="draveness-analyze"><a href="#draveness-analyze" class="headerlink" title="draveness&#x2F;analyze"></a><a href="https://github.com/draveness/analyze">draveness&#x2F;analyze</a></h2><ul><li><a href="https://github.com/draveness/analyze/blob/master/contents/objc/%E4%BB%8E%20NSObject%20%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BA%86%E8%A7%A3%20isa.md">从 NSObject 的初始化了解 isa</a></li><li><a href="https://github.com/draveness/analyze/blob/master/contents/objc/%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90%20ObjC%20%E4%B8%AD%E6%96%B9%E6%B3%95%E7%9A%84%E7%BB%93%E6%9E%84.md">深入解析 ObjC 中方法的结构</a></li><li><a href="https://github.com/draveness/analyze/blob/master/contents/objc/%E4%BB%8E%E6%BA%90%E4%BB%A3%E7%A0%81%E7%9C%8B%20ObjC%20%E4%B8%AD%E6%B6%88%E6%81%AF%E7%9A%84%E5%8F%91%E9%80%81.md">从源代码看 ObjC 中消息的发送</a></li><li><a href="https://github.com/draveness/analyze/blob/master/contents/objc/%E4%BD%A0%E7%9C%9F%E7%9A%84%E4%BA%86%E8%A7%A3%20load%20%E6%96%B9%E6%B3%95%E4%B9%88%EF%BC%9F.md">你真的了解 load 方法么？</a></li><li><a href="https://github.com/draveness/analyze/blob/master/contents/objc/%E8%87%AA%E5%8A%A8%E9%87%8A%E6%94%BE%E6%B1%A0%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F.md">自动释放池的前世今生</a></li><li><a href="https://github.com/draveness/analyze/blob/master/contents/objc/%E9%BB%91%E7%AE%B1%E4%B8%AD%E7%9A%84%20retain%20%E5%92%8C%20release.md">黑箱中的 retain 和 release</a></li><li><a href="https://github.com/draveness/analyze/blob/master/contents/objc/%E5%85%B3%E8%81%94%E5%AF%B9%E8%B1%A1%20AssociatedObject%20%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90.md">关联对象 AssociatedObject 完全解析</a></li><li><a href="https://github.com/draveness/analyze/blob/master/contents/objc/%E6%87%92%E6%83%B0%E7%9A%84%20initialize%20%E6%96%B9%E6%B3%95.md">懒惰的 initialize 方法</a></li><li><a href="https://github.com/draveness/analyze/blob/master/contents/objc/%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%9D%E5%A7%8B%E5%8C%96%E7%9A%84%EF%BC%88iOS%EF%BC%89.md">对象是如何初始化的（iOS）</a></li></ul><h2 id="CornBallast"><a href="#CornBallast" class="headerlink" title="CornBallast"></a><a href="https://www.jianshu.com/u/a9008a597529">CornBallast</a></h2><ul><li><a href="https://www.jianshu.com/p/88d11bb12ba1">Runtime 深度解析以及实用技巧</a></li><li><a href="https://www.jianshu.com/p/37e1b71ad03a">Runtime 奇技淫巧__带你深入理解 Runtime 特有概念</a></li><li><a href="https://www.jianshu.com/p/38bbde2c5632">Runtime 奇技淫巧__不受限制的消息发送</a></li><li><a href="https://www.jianshu.com/p/cb55dbb72c84">Runtime 奇技淫巧__获取类的实例变量以及属性并强势 与KVC、msgSend 混用</a></li><li><a href="https://www.jianshu.com/p/13ab44c46904">Runtime 奇技淫巧__方法交换</a></li><li><a href="https://www.jianshu.com/p/48220940118f">Runtime 奇技淫巧__动态链接对象以及给分类添加属性</a></li><li><a href="https://www.jianshu.com/p/c5bdd6f7a68c">Runtime 奇技淫巧__动态添加方法，消息转发改善异常</a></li></ul><h2 id="唐巧"><a href="#唐巧" class="headerlink" title="唐巧"></a><a href="https://blog.devtang.com/">唐巧</a></h2><ul><li><a href="https://blog.devtang.com/2013/10/15/objective-c-object-model/">Objective-C对象模型及应用</a></li></ul><h2 id="ibireme"><a href="#ibireme" class="headerlink" title="ibireme"></a><a href="https://blog.ibireme.com/2013/11/25/objc-object/">ibireme</a></h2><ul><li><a href="https://blog.ibireme.com/2013/11/25/objc-object/">Objective-C 中的类和对象</a></li></ul><h2 id="sunnyxx"><a href="#sunnyxx" class="headerlink" title="sunnyxx"></a><a href="http://blog.sunnyxx.com/">sunnyxx</a></h2><ul><li><a href="http://blog.sunnyxx.com/2014/08/24/objc-duck/">objc 与鸭子对象（上）</a></li><li><a href="http://blog.sunnyxx.com/2014/08/26/objc-duck-advanced/">objc 与鸭子对象（下）</a></li><li><a href="http://blog.sunnyxx.com/2014/11/06/runtime-nuts/">神经病院 objc runtime 入院考试</a></li><li><a href="http://blog.sunnyxx.com/2016/08/13/reunderstanding-runtime-0/">重识 Objective-C Runtime - Smalltalk 与 C 的融合</a></li><li><a href="http://blog.sunnyxx.com/2016/08/13/reunderstanding-runtime-1/">重识 Objective-C Runtime - 看透 Type 与 Value</a></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>此外，在简书、掘金等技术博客平台，以及 Google 上搜索 <code>Objective-C Runtime</code> 关键词，也能找出成千上万相关的文章。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;此文转自&lt;a href=&quot;https://kangzubin.com/objc-runtime-articles/&quot;&gt;kangzubin 收集的runtime大佬系列文章&lt;/a&gt;，特别鸣谢，方便后续查阅。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Runtime" scheme="https://blog.wangruofeng007.com/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>从零开始创建cocoaPods公有库</title>
    <link href="https://blog.wangruofeng007.com/2019/11/17/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9B%E5%BB%BAcocoaPods%E5%85%AC%E6%9C%89%E5%BA%93/"/>
    <id>https://blog.wangruofeng007.com/2019/11/17/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%9B%E5%BB%BAcocoaPods%E5%85%AC%E6%9C%89%E5%BA%93/</id>
    <published>2019-11-17T10:50:41.000Z</published>
    <updated>2024-11-02T03:36:52.415Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这篇文章记录了一个公共Pod库 <a href="https://github.com/wangruofeng/RFSegmentView">RFSegmentView</a>的创建过程</p><span id="more"></span><h2 id="注册CocoaPods账号"><a href="#注册CocoaPods账号" class="headerlink" title="注册CocoaPods账号"></a>注册CocoaPods账号</h2><p>想要创建一个开源pod库, 首先我们需要注册CocoaPods, 这里使用trunk方式,  那么只需要在终端执行（这里默认你已经安装好CocoaPods环境）:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk register 邮箱地址 <span class="string">&#x27;用户名&#x27;</span> --verbose</span><br></pre></td></tr></table></figure><p>这里我们一般使用github邮箱和用户名, 然后在你的邮箱中会收到确认邮件,下面是确认邮件的内容：</p><p><img src="/images/cocoapod_trunk_register.png" alt="img"></p><p> 在浏览器中点击链接确认即注册成功, 成功之后可以终端执行:</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk me</span><br></pre></td></tr></table></figure><p>通过上面的命令查看注册信息，里面会展示该账号下的所有的Pod库，可以用此方式查看自己发布过的Pods</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  myBlog git:(master) ✗ pod trunk me</span><br><span class="line">  - Name:     wangruofeng</span><br><span class="line">  - Email:    wangruofeng007@gmail.com</span><br><span class="line">  - Since:    November 16th, 12:17</span><br><span class="line">  - Pods:</span><br><span class="line">    - RFSegmentView</span><br><span class="line">  - Sessions:</span><br><span class="line">    - November 16th, 12:17 - March 24th, 2020 04:54. IP: 119.123.133.39</span><br></pre></td></tr></table></figure><h2 id="创建共享库文件并上传到公有仓库"><a href="#创建共享库文件并上传到公有仓库" class="headerlink" title="创建共享库文件并上传到公有仓库"></a>创建共享库文件并上传到公有仓库</h2><p>共享库需要三个必不可少的部分:</p><ol><li><code>共享文件夹</code>(文件夹存放着你要共享的内容, 也就是其他人通过pod安装得到的文件, .podspec文件中的source_files需要指定此文件路径及文件类型);</li><li><code>LICENSE文件</code>(默认一般选择MIT);</li><li><code>库名.podspec</code>(本库的各项信息描述, 需要提交给CocoaPods, pod通过这个文件查找到你共享的库).</li></ol><p>如果没有 <code>podspec</code> 文件可以用下面的命令，初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib create 库名</span><br></pre></td></tr></table></figure><h2 id="编辑-podspec文件"><a href="#编辑-podspec文件" class="headerlink" title="编辑.podspec文件"></a>编辑.podspec文件</h2><p>以 <code>RFSegmentView.podspec</code> 为例：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Pod::Spec</span>.new <span class="keyword">do</span> |<span class="params">spec</span>|</span><br><span class="line"></span><br><span class="line">  spec.name         = <span class="string">&quot;RFSegmentView&quot;</span></span><br><span class="line">  spec.version      = <span class="string">&quot;1.3.0&quot;</span></span><br><span class="line">  spec.summary      = <span class="string">&quot;Imitate iOS7 style segmented controls, simple, practical！&quot;</span></span><br><span class="line">  spec.homepage     = <span class="string">&quot;https://github.com/wangruofeng/RFSegmentView&quot;</span></span><br><span class="line">  spec.license      = &#123; <span class="symbol">:type</span> =&gt; <span class="string">&quot;MIT&quot;</span>, <span class="symbol">:file</span> =&gt; <span class="string">&quot;LICENSE.md&quot;</span> &#125;</span><br><span class="line">  spec.author       = &#123; <span class="string">&quot;wangruofeng&quot;</span> =&gt;<span class="string">&quot;wangruofeng007@gmail.com&quot;</span> &#125;</span><br><span class="line">  spec.platform     = <span class="symbol">:ios</span>, <span class="string">&quot;8.0&quot;</span></span><br><span class="line">  spec.source       = &#123; <span class="symbol">:git</span> =&gt; <span class="string">&#x27;https://github.com/wangruofeng/RFSegmentView.git&#x27;</span>, <span class="symbol">:tag</span> =&gt; spec.version.to_s&#125;</span><br><span class="line">  spec.source_files  = <span class="string">&quot;RFSegmentView/RFSegmentView.&#123;h,m&#125;&quot;</span></span><br><span class="line">  <span class="comment"># spec.exclude_files = &quot;Classes/Exclude&quot;</span></span><br><span class="line">  <span class="comment"># spec.public_header_files = &quot;Classes/**/*.h&quot;</span></span><br><span class="line"></span><br><span class="line">  spec.frameworks = <span class="string">&#x27;UIKit&#x27;</span>, <span class="string">&#x27;CoreGraphics&#x27;</span>, <span class="string">&#x27;Foundation&#x27;</span></span><br><span class="line">  spec.requires_arc = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># spec.dependency &quot;JSONKit&quot;, &quot;~&gt; 1.4&quot; 添加依赖库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>编写完成后, 我们需要验证.podspec文件的合法性, 这里需要终端cd到.podspec文件所在文件夹, 执行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib lint RFSegmentView.podspec</span><br></pre></td></tr></table></figure><p>如有警告或者错误请重新检查你的编写正确性, 如果没有问题会出现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">-&gt; </span><span class="language-bash">RFSegmentView (1.3.0)</span></span><br><span class="line">    </span><br><span class="line">RFSegmentView passed validation.</span><br></pre></td></tr></table></figure><h2 id="打tag，发布新版本"><a href="#打tag，发布新版本" class="headerlink" title="打tag，发布新版本"></a>打tag，发布新版本</h2><p>一切准备就绪后, 我们需要在你的git仓库里面存在一个与.podspec文件中一致的版本, 这里你可以在你的git仓库中的准备一个版本, 也可以在当前文件夹下使用终端命令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -m &#x27;first release&#x27; &#x27;1.3.0&#x27;</span><br><span class="line">git push --tag #推送tag到远端仓库</span><br></pre></td></tr></table></figure><p>成功之后即可在你分支里面看到这个tag的版本.</p><h2 id="发布库描述文件"><a href="#发布库描述文件" class="headerlink" title="发布库描述文件"></a>发布库描述文件</h2><p>下面我们需要发布自己的库描述文件podspec给cocoapods<br>同样在这个文件夹下, 终端执行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk push RFSegmentView.podspec</span><br></pre></td></tr></table></figure><p>将你的库文件.podspec文件提交到公有的specs上面, 这一步做的操作是验证你的podspec文件是否合法+提交到specs中+将上传的podspec文件转成json格式文件,如果重复提交会出现下面的信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[!] Unable to accept duplicate entry for: RFSegmentView (1.3.0)</span><br></pre></td></tr></table></figure><p>为了测试将RFSegmentView.podspec里面的spec.version修改成1.3.1,成功后会出现Congrats信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">➜  RFSegmentView git:(master) pod trunk push RFSegmentView.podspec</span><br><span class="line">Updating spec repo `trunk`</span><br><span class="line">Validating podspec</span><br><span class="line"> -&gt; RFSegmentView (1.3.1)</span><br><span class="line">    - NOTE  | xcodebuild:  note: Using new build system</span><br><span class="line">    - NOTE  | [iOS] xcodebuild:  note: Planning build</span><br><span class="line">    - NOTE  | [iOS] xcodebuild:  note: Constructing build description</span><br><span class="line">    - NOTE  | [iOS] xcodebuild:  warning: Skipping code signing because the target does not have an Info.plist file and one is not being generated automatically. (in target &#x27;App&#x27; from project &#x27;App&#x27;)</span><br><span class="line"></span><br><span class="line">Updating spec repo `trunk`</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> 🎉  Congrats</span><br><span class="line"></span><br><span class="line"> 🚀  RFSegmentView (1.3.1) successfully published</span><br><span class="line"> 📅  November 17th, 07:08</span><br><span class="line"> 🌎  https://cocoapods.org/pods/RFSegmentView</span><br><span class="line"> 👍  Tell your friends!</span><br><span class="line">--------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h2 id="查找和使用新创建的库"><a href="#查找和使用新创建的库" class="headerlink" title="查找和使用新创建的库"></a>查找和使用新创建的库</h2><p>成功后需要等待的时间不定, 目前一般比较快, 一般使用pod setup和pod search查看是否已经可以使用, 如果</p><p><code>pod search RFSegmentView</code> 一直搜索不到，尝试删除<code>pod setup</code>成功后生成的<code>~/Library/Caches/CocoaPods/search_index.json</code>文件, 该文是用来查找的索引文件, </p><p>终端输入:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm ~/Library/Caches/CocoaPods/search_index.json</span><br></pre></td></tr></table></figure><p>删除成功后再执行:<code>pod search 库名</code>, 等待输出：<code>Creating search index for spec repo &#39;master&#39;.. Done!</code>稍等片刻就会出现你想要的结果,如果还是没有结果需要等待pod同步，过一段时间再来尝试。</p><h2 id="更新维护podspec"><a href="#更新维护podspec" class="headerlink" title="更新维护podspec"></a>更新维护podspec</h2><p>如果有错误或者需要迭代版本,修改工程文件后推送到远端仓库后, 需要修改podspec中的版本号, 并重新打tag上传, 再进行新一轮的验证和发布。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://segmentfault.com/a/1190000007947371"><a href="https://segmentfault.com/a/1190000007947371">CocoaPods创建公有和私有Pod库方法总结</a></a></li><li><a href="https://github.com/CocoaPods/Specs/">Podspecs</a></li><li><a href="https://guides.cocoapods.org/syntax/podspec.html">Podspec attributes</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;这篇文章记录了一个公共Pod库 &lt;a href=&quot;https://github.com/wangruofeng/RFSegmentView&quot;&gt;RFSegmentView&lt;/a&gt;的创建过程&lt;/p&gt;</summary>
    
    
    
    
    <category term="CocoaPods" scheme="https://blog.wangruofeng007.com/tags/CocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>Pod常用命令</title>
    <link href="https://blog.wangruofeng007.com/2019/11/14/Pod%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://blog.wangruofeng007.com/2019/11/14/Pod%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2019-11-14T15:45:42.000Z</published>
    <updated>2024-11-02T03:36:52.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>介绍Pod常用的几种命令</p><span id="more"></span><h2 id="pod-init"><a href="#pod-init" class="headerlink" title="pod init"></a>pod init</h2><p>第一次调用会初始化项目，如果已经初始化后调用会抛出以下错误。</p><blockquote><p>[!] Existing Podfile found in directory</p></blockquote><h2 id="pod-install"><a href="#pod-install" class="headerlink" title="pod install"></a>pod install</h2><p>根据podfile.lock文件中指定的pod依赖库的版更新项目的pod依赖库。在首次执行pod install命令时，如果不存在podfile.lock文件会生成该文件，并且同时生成<code>xcworkspace</code>文件和pods文件夹。 </p><blockquote><p>pod install执行后，后续的项目需要使用<code>xxx.xcworkspace</code>打开</p></blockquote><p>参数：–no-repo-update</p><p>不更新pod仓库，使用此命令可以加快pod install的更新速度。</p><p>eg: <code>pod install --no-repo-update</code></p><h2 id="pod-update"><a href="#pod-update" class="headerlink" title="pod update"></a>pod update</h2><p>这个命令会检查podfile.lock文件中的pod依赖库的版本，并更新，会重新生成一个新podfile.lock文件。</p><p>选项：–exclude-pods&#x3D;xxx</p><p>只更新xxx之外的仓库。</p><p>eg: <code>pod update --exclude-pods=AFNetworking</code></p><p>选项：xxx –no-repo-update</p><p>只更新<code>xxx</code>依赖不更新除它之外的其他依赖。</p><p>eg: <code>pod update AFNetworking --no-repo-update</code></p><blockquote><p>一般没有特别必要时不建议使用pod update命令,尽量使用pod install，如果实在不行再使用带上面选项的od update，如果更新失败才使用pod update命名，这样能明显加快更新流程，节约更新依赖的时间。</p></blockquote><h2 id="pod-search"><a href="#pod-search" class="headerlink" title="pod search"></a>pod search</h2><p>后面更新依赖库的名称，搜索指定依赖库</p><p>eg: pod search AFNetworking</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-&gt; <span class="title class_">AFNetworking</span> (<span class="number">3.2</span>.<span class="number">1</span>)</span><br><span class="line">   A delightful iOS <span class="keyword">and</span> <span class="variable constant_">OS</span> X networking framework.</span><br><span class="line">   pod <span class="string">&#x27;AFNetworking&#x27;</span>, <span class="string">&#x27;~&gt; 3.2.1&#x27;</span></span><br><span class="line">   - <span class="title class_">Homepage</span>: <span class="symbol">https:</span>/<span class="regexp">/github.com/</span><span class="title class_">AFNetworking</span>/<span class="title class_">AFNetworking</span></span><br><span class="line">   - <span class="title class_">Source</span>:   <span class="symbol">https:</span>/<span class="regexp">/github.com/</span><span class="title class_">AFNetworking</span>/<span class="title class_">AFNetworking</span>.git</span><br><span class="line">   - <span class="title class_">Versions</span>: <span class="number">3.2</span>.<span class="number">1</span>, <span class="number">3.2</span>.<span class="number">0</span>, <span class="number">3.1</span>.<span class="number">0</span>, <span class="number">3.0</span>.<span class="number">4</span>, <span class="number">3.0</span>.<span class="number">3</span>, <span class="number">3.0</span>.<span class="number">2</span>, <span class="number">3.0</span>.<span class="number">1</span>, <span class="number">3.0</span>.<span class="number">0</span>,</span><br><span class="line">   <span class="number">3.0</span>.<span class="number">0</span>-beta.<span class="number">3</span>, <span class="number">3.0</span>.<span class="number">0</span>-beta.<span class="number">2</span>, <span class="number">3.0</span>.<span class="number">0</span>-beta.<span class="number">1</span>, <span class="number">2.7</span>.<span class="number">0</span>, <span class="number">2.6</span>.<span class="number">3</span>, <span class="number">2.6</span>.<span class="number">2</span>, <span class="number">2.6</span>.<span class="number">1</span>, <span class="number">2.6</span>.<span class="number">0</span>,</span><br><span class="line">   <span class="number">2.5</span>.<span class="number">4</span>, <span class="number">2.5</span>.<span class="number">3</span>, <span class="number">2.5</span>.<span class="number">2</span>, <span class="number">2.5</span>.<span class="number">1</span>, <span class="number">2.5</span>.<span class="number">0</span>, <span class="number">2.4</span>.<span class="number">1</span>, <span class="number">2.4</span>.<span class="number">0</span>, <span class="number">2.3</span>.<span class="number">1</span>, <span class="number">2.3</span>.<span class="number">0</span>, <span class="number">2.2</span>.<span class="number">4</span>, <span class="number">2.2</span>.<span class="number">3</span>,</span><br><span class="line">   <span class="number">2.2</span>.<span class="number">2</span>, <span class="number">2.2</span>.<span class="number">1</span>, <span class="number">2.2</span>.<span class="number">0</span>, <span class="number">2.1</span>.<span class="number">0</span>, <span class="number">2.0</span>.<span class="number">3</span>, <span class="number">2.0</span>.<span class="number">2</span>, <span class="number">2.0</span>.<span class="number">1</span>, <span class="number">2.0</span>.<span class="number">0</span>, <span class="number">2.0</span>.<span class="number">0</span>-<span class="variable constant_">RC3</span>, <span class="number">2.0</span>.<span class="number">0</span>-<span class="variable constant_">RC2</span>,</span><br><span class="line">   <span class="number">2.0</span>.<span class="number">0</span>-<span class="variable constant_">RC1</span>, <span class="number">1.3</span>.<span class="number">4</span>, <span class="number">1.3</span>.<span class="number">3</span>, <span class="number">1.3</span>.<span class="number">2</span>, <span class="number">1.3</span>.<span class="number">1</span>, <span class="number">1.3</span>.<span class="number">0</span>, <span class="number">1.2</span>.<span class="number">1</span>, <span class="number">1.2</span>.<span class="number">0</span>, <span class="number">1.1</span>.<span class="number">0</span>, <span class="number">1.0</span>.<span class="number">1</span>,</span><br><span class="line">   <span class="number">1.0</span>, <span class="number">1</span>.0RC3, <span class="number">1</span>.0RC2, <span class="number">1</span>.0RC1, <span class="number">0.10</span>.<span class="number">1</span>, <span class="number">0.10</span>.<span class="number">0</span>, <span class="number">0.9</span>.<span class="number">2</span>, <span class="number">0.9</span>.<span class="number">1</span>, <span class="number">0.9</span>.<span class="number">0</span>, <span class="number">0.7</span>.<span class="number">0</span>,</span><br><span class="line">   <span class="number">0.5</span>.<span class="number">1</span> [master repo]</span><br><span class="line">   - <span class="title class_">Subspecs</span>:</span><br><span class="line">     - <span class="title class_">AFNetworking</span>/<span class="title class_">Serialization</span> (<span class="number">3.2</span>.<span class="number">1</span>)</span><br><span class="line">     - <span class="title class_">AFNetworking</span>/<span class="title class_">Security</span> (<span class="number">3.2</span>.<span class="number">1</span>)</span><br><span class="line">     - <span class="title class_">AFNetworking</span>/<span class="title class_">Reachability</span> (<span class="number">3.2</span>.<span class="number">1</span>)</span><br><span class="line">     - <span class="title class_">AFNetworking</span>/<span class="title class_">NSURLSession</span> (<span class="number">3.2</span>.<span class="number">1</span>)</span><br><span class="line">     - <span class="title class_">AFNetworking</span>/<span class="title class_">UIKit</span> (<span class="number">3.2</span>.<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="pod-repo"><a href="#pod-repo" class="headerlink" title="pod repo"></a>pod repo</h2><p>查看所有pod 仓库的源</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">master</span><br><span class="line">- <span class="title class_">Type</span>: git (master)</span><br><span class="line">- <span class="variable constant_">URL</span>:  <span class="symbol">https:</span>/<span class="regexp">/github.com/</span><span class="title class_">CocoaPods</span>/<span class="title class_">Specs</span>.git</span><br><span class="line">- <span class="title class_">Path</span>: <span class="regexp">/Users/wangruofeng</span><span class="regexp">/.cocoapods/repos</span><span class="regexp">/master</span></span><br></pre></td></tr></table></figure><p>选项：remove xxx</p><p>eg: pod repo remove xxx</p><p>移除xxx repo源</p><h2 id="pod-try"><a href="#pod-try" class="headerlink" title="pod try"></a>pod try</h2><p>非常棒，却很少有人知道，使您可以在将库添加到项目之前对其进行测试驱动。</p><p>选项：try xxx</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod try <span class="title class_">AFNetworking</span></span><br></pre></td></tr></table></figure><h2 id="pod-outdated"><a href="#pod-outdated" class="headerlink" title="pod outdated"></a>pod outdated</h2><p>显示当前 Podfile.lock文件中过期的pods，仅仅是来自spec repos，不包含来自本地和外部的资源。</p><p><img src="/images/pod_outdated.png" alt="pod_outdated"></p><h2 id="gem-source-操作"><a href="#gem-source-操作" class="headerlink" title="gem source 操作"></a>gem source 操作</h2><p>当前gem源查看</p><blockquote><p> gem source -l</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*** <span class="variable constant_">CURRENT</span> <span class="variable constant_">SOURCES</span> ***</span><br><span class="line"></span><br><span class="line"><span class="symbol">https:</span>/<span class="regexp">/gems.ruby-china.com/</span></span><br></pre></td></tr></table></figure><p>移除指定的gem源</p><blockquote><p>gem source  - - remove <a href="https://rubygems.org/">https://rubygems.org/</a></p></blockquote><p>添加指定的gem源</p><blockquote><p>gem source - a <a href="https://gems.ruby-china.com/">https://gems.ruby-china.com/</a></p></blockquote><p>更新cocoapod</p><blockquote><p>sudo gem install cocoapods</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;介绍Pod常用的几种命令&lt;/p&gt;</summary>
    
    
    
    
    <category term="CocoaPods" scheme="https://blog.wangruofeng007.com/tags/CocoaPods/"/>
    
    <category term="Skill" scheme="https://blog.wangruofeng007.com/tags/Skill/"/>
    
  </entry>
  
  <entry>
    <title>从Octopress迁移博客到hexo</title>
    <link href="https://blog.wangruofeng007.com/2019/11/10/%E4%BB%8EOctopress%E8%BF%81%E7%A7%BB%E5%8D%9A%E5%AE%A2%E5%88%B0hexo/"/>
    <id>https://blog.wangruofeng007.com/2019/11/10/%E4%BB%8EOctopress%E8%BF%81%E7%A7%BB%E5%8D%9A%E5%AE%A2%E5%88%B0hexo/</id>
    <published>2019-11-10T10:16:11.000Z</published>
    <updated>2024-11-02T06:08:23.409Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/baner_hexo.jpg" alt="hexo"></p><span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>最近准备更新博客（以前的基于Octopress），去写的时候突然发现以前的博客跑不起来了。。。倒腾了一下，在执行博客更新时<code>rake generate</code>，一直报错，错误出现在高亮解析模块 <code>Pygments</code>，尝试升级<code>jekyll</code>但是和它相关的依赖模块还是有问题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  Octopress git:(source) ✗ rake generate</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Generating Site with Jekyll</span></span></span><br><span class="line">Configuration file: /Users/wangruofeng/Documents/Git Repositories/Octopress/_config.yml</span><br><span class="line">            Source: source</span><br><span class="line">       Destination: public</span><br><span class="line">      Generating... </span><br><span class="line">jekyll 2.5.3 | Error:  Pygments can&#x27;t parse unknown language: objective-c.</span><br></pre></td></tr></table></figure><p>后面去<a href="http://octopress.org/">Octopress</a>官网查了了，发现上次更新还是<a href="http://octopress.org/2015/01/15/octopress-3.0-is-coming/">2015.01.15</a>的事了，后续也没有更新，于是觉得这个不太靠谱，准备换一个，调研了一下，发现使用hexo的挺多，于是开始捣腾起来。。。</p><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>准备 node 和 git 环境， 首先，安装 <a href="https://nodejs.org/en/">NodeJS</a>，因为 <a href="https://hexo.io/zh-cn/">Hexo</a> 是基于 Node.js 驱动的一款博客框架。</p><p>在命令行中输入相应命令验证是否成功，如果成功会有相应的版本号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  myBlog git:(master) ✗ git version</span><br><span class="line">git version 2.24.0</span><br><span class="line">➜  myBlog git:(master) ✗ node -v</span><br><span class="line">v12.13.0</span><br><span class="line">➜  myBlog git:(master) ✗ npm -v</span><br><span class="line">6.12.0</span><br></pre></td></tr></table></figure><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>如果以上环境准备好了就可以使用 npm 开始安装 Hexo 了。也可查看 <a href="https://hexo.io/zh-cn/">Hexo</a> 的详细文档。 在命令行输入执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>没有权限的话可能会出现下面的错误信息:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">npm ERR! code EACCES</span><br><span class="line">npm ERR! syscall mkdir</span><br><span class="line">npm ERR! path /Users/wangruofeng/.npm/_cacache/content-v2/sha512/0b/8a</span><br><span class="line">npm ERR! errno -13</span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! Your cache folder contains root-owned files, due to a bug in</span><br><span class="line">npm ERR! previous versions of npm which has since been addressed.</span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! To permanently fix this problem, please run:</span><br><span class="line">npm ERR!   sudo chown -R 501:20 &quot;/Users/wangruofeng/.npm&quot;</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     /Users/wangruofeng/.npm/_logs/2019-11-10T07_21_42_135Z-debug.log</span><br></pre></td></tr></table></figure><p>报错的话加上 sudo重试一次或者执行<strong>sudo chown -R 501:20 “&#x2F;Users&#x2F;wangruofeng&#x2F;.npm”</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  Git Repositories sudo npm install -g hexo-cli</span><br><span class="line">/usr/local/Cellar/node/5.7.0/bin/hexo -&gt; /usr/local/Cellar/node/5.7.0/lib/node_modules/hexo-cli/bin/hexo</span><br><span class="line">+ hexo-cli@3.1.0</span><br><span class="line">added 67 packages from 317 contributors in 27.347s</span><br></pre></td></tr></table></figure><p>安装 Hexo 完成后，再执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init myBlog</span><br><span class="line"><span class="built_in">cd</span> myBlog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml # 网站的配置信息，您可以在此配置大部分的参数。 </span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds # 模版文件夹</span><br><span class="line">├── source  # 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹</span><br><span class="line">|   ├── _drafts # 草稿文件</span><br><span class="line">|   └── _posts # 文章Markdowm文件 </span><br><span class="line">└── themes  # 主题文件夹</span><br></pre></td></tr></table></figure><p>好了，如果上面的命令都没报错的话，就恭喜了，运行 hexo s 命令，其中 s 是 server 的缩写，在浏览器中输入 <a href="http://localhost:4000/">http://localhost:4000</a> 回车就可以预览效果了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>至此，你本地的博客就已经搭建成功，接下来就是部署到 Github Page 了。</p><h2 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h2><p>此时，本地和Github的工作做得差不了，是时候把它们两个连接起来了。你也可以查看官网的<a href="https://hexo.io/zh-cn/docs/deployment">部署</a>教程。 先不着急，部署之前还需要修改配置和安装部署插件。 第一：打开项目根目录下的 _config.yml 配置文件配置参数。拉到文件末尾，填上如下配置（也可同时部署到多个仓库，后面再说）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">https://github.com/wangruofeng/wangruofeng.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>第二：要安装一个部署插件 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>最后执行以下命令就可以部署上传啦，以下 g 是 generate 缩写，d 是 deploy 缩写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>稍等一会，在浏览器访问网址： <a href="https://你的用户名.github.io]">https:&#x2F;&#x2F;你的用户名.github.io</a> 就会看到你的博客啦！！</p><h2 id="开始写作"><a href="#开始写作" class="headerlink" title="开始写作"></a>开始写作</h2><p>博客搭好了，就开始写文章了，这里简单介绍一下，详细的文档可以看 <a href="https://hexo.io/zh-cn/">hexo</a> 官网。 新建文章，输入以下命令即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &#x27;文章标题&#x27;</span><br></pre></td></tr></table></figure><p>执行完成后可以在 &#x2F;source&#x2F;_posts 下看到一个“<a href="http://文章标题.md/">文章标题.md</a>”的文章文件啦。.md 就是 Markdown 格式的文件，具体用法可以在网上找一下，语法还是比较简单的。</p><p>在 Markdown 文章里面输入你的文章内容</p><p>再执行一下以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g # 生成相关文件</span><br><span class="line">hexo s # 部署到本地</span><br></pre></td></tr></table></figure><p>最后，只要部署到你的 Github 上就可以了！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>部署前最好能先执行一下 hexo clean 命令，清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><p>另外，如果你的文章暂时不发布可以先保存在草稿里面。生成草稿的方法和文章差不多 hexo new draft “文章标题”，生成后会在 &#x2F;source&#x2F;_drafts 里看到你的草稿文章。当你想发布时只要执行 publish 命令即可发布到博客。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><h3 id="1-Hexo-TypeError-Cannot-set-property-‘lastIndex’-of-undefined"><a href="#1-Hexo-TypeError-Cannot-set-property-‘lastIndex’-of-undefined" class="headerlink" title="1. Hexo: TypeError: Cannot set property ‘lastIndex’ of undefined"></a>1. Hexo: TypeError: Cannot set property ‘lastIndex’ of undefined</h3><p>解决方案是 将你工程下的 _config.yml (这个不是主题的_config.yml) 文件里面的 <code>auto_detect</code> 设置为 false。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br></pre></td></tr></table></figure><h3 id="2-修改完-hexo-目录下的-config-yml-文件-重新-generate-文件不生效"><a href="#2-修改完-hexo-目录下的-config-yml-文件-重新-generate-文件不生效" class="headerlink" title="2.修改完 hexo 目录下的 _config.yml 文件 重新 generate 文件不生效"></a>2.修改完 hexo 目录下的 _config.yml 文件 重新 generate 文件不生效</h3><p>使用 hexo 的命令 <code>hexo clean</code>,清除一下。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/hexojs/hexo/issues/1913">运行 hexo g 出错 #1913</a></li><li><a href="https://www.zhihu.com/question/24422335">有哪些好看的 Hexo 主题？</a></li><li><a href="https://juejin.im/post/5c4730c9f265da61616efeec">超详细Hexo+Github Page搭建技术博客教程【持续更新】</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/baner_hexo.jpg&quot; alt=&quot;hexo&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="博客搭建" scheme="https://blog.wangruofeng007.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Hexo" scheme="https://blog.wangruofeng007.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>NSNumber转NSString丢精问题</title>
    <link href="https://blog.wangruofeng007.com/2017/10/14/2017-10-14-nsnumberzhuan-nsstringdiu-jing-wen-ti/"/>
    <id>https://blog.wangruofeng007.com/2017/10/14/2017-10-14-nsnumberzhuan-nsstringdiu-jing-wen-ti/</id>
    <published>2017-10-14T12:53:01.000Z</published>
    <updated>2024-11-02T03:36:52.412Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题引出"><a href="#问题引出" class="headerlink" title="问题引出"></a>问题引出</h3><p>在开发中，涉及价格金额处理，后台会返回Number类型的数据，打印或者经过Json转Model后的NSString可能出现精度丢失的问题，如果涉及到金额的加减乘除运算问题将暴露得更为明显。这里就iOS数据精度处理做一个总结。</p><h3 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h3><h4 id="NSNumber转NSSting"><a href="#NSNumber转NSSting" class="headerlink" title="NSNumber转NSSting"></a>NSNumber转NSSting</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *numbers = @[</span><br><span class="line">                     @<span class="number">99.00</span>,</span><br><span class="line">                     @<span class="number">99.09</span>,</span><br><span class="line">                     @<span class="number">99.19</span>,</span><br><span class="line">                     @<span class="number">99.29</span>,</span><br><span class="line">                     @<span class="number">99.39</span>,</span><br><span class="line">                     @<span class="number">99.49</span>,</span><br><span class="line">                     @<span class="number">99.59</span>,</span><br><span class="line">                     @<span class="number">99.69</span>,</span><br><span class="line">                     @<span class="number">99.79</span>,</span><br><span class="line">                     @<span class="number">99.89</span>,</span><br><span class="line">                     @<span class="number">99.99</span>,</span><br><span class="line">                     ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numbers.count; i++) &#123;</span><br><span class="line">    <span class="built_in">NSNumber</span> *number = numbers[i];</span><br><span class="line">    <span class="built_in">NSString</span> *strValue = [number stringValue];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;strValue:%@&quot;</span>,strValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> oldVlue:99.00 strValue:99</span></span><br><span class="line"><span class="comment"> oldVlue:99.09 strValue:99.09</span></span><br><span class="line"><span class="comment"> oldVlue:99.19 strValue:99.19</span></span><br><span class="line"><span class="comment"> oldVlue:99.29 strValue:99.29000000000001</span></span><br><span class="line"><span class="comment"> oldVlue:99.39 strValue:99.39</span></span><br><span class="line"><span class="comment"> oldVlue:99.48 strValue:99.48999999999999</span></span><br><span class="line"><span class="comment"> oldVlue:99.59 strValue:99.59</span></span><br><span class="line"><span class="comment"> oldVlue:99.69 strValue:99.69</span></span><br><span class="line"><span class="comment"> oldVlue:99.79 strValue:99.79000000000001</span></span><br><span class="line"><span class="comment"> oldVlue:99.89 strValue:99.89</span></span><br><span class="line"><span class="comment"> oldVlue:99.99 strValue:99.98999999999999</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>在这里我们发现将NSNumber转换成NSSting的过程中可能会出现精度丢失。</p><h4 id="Json到Model"><a href="#Json到Model" class="headerlink" title="Json到Model"></a>Json到Model</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出现BUG的条件必须是两位数，且带两位小数，类型还必须是float</span></span><br><span class="line"><span class="comment">//两位数：十位必须是7、8、9；个位数随意</span></span><br><span class="line"><span class="comment">//两位小数：个位数随意；十位数必须是0</span></span><br><span class="line"><span class="built_in">NSString</span> *jsonStr = <span class="string">@&quot;&#123;\&quot;71.40\&quot;:71.40, \&quot;97.40\&quot;:97.40, \&quot;80.40\&quot;:80.40, \&quot;188.40\&quot;:188.40&#125;&quot;</span>;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;json:%@&quot;</span>, jsonStr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSData</span> *jsonData = [jsonStr dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line"><span class="built_in">NSError</span> *jsonParsingError = <span class="literal">nil</span>;</span><br><span class="line"><span class="built_in">NSDictionary</span> *dic = [<span class="built_in">NSMutableDictionary</span> dictionaryWithDictionary:[<span class="built_in">NSJSONSerialization</span> JSONObjectWithData:jsonData options:<span class="number">0</span> error:&amp;jsonParsingError]];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;dic:%@&quot;</span>, dic);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2017-10-14 18:29:19.434 FloatTransferDemo[62722:3093992] dic:&#123;</span></span><br><span class="line"><span class="comment">    &quot;188.40&quot; = &quot;188.4&quot;;</span></span><br><span class="line"><span class="comment">    &quot;71.40&quot; = &quot;71.40000000000001&quot;;</span></span><br><span class="line"><span class="comment">    &quot;80.40&quot; = &quot;80.40000000000001&quot;;</span></span><br><span class="line"><span class="comment">    &quot;97.40&quot; = &quot;97.40000000000001&quot;;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>在这里我们发现将Json解析成Model的过程中可能会出现精度丢失。</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>因为浮点数在计算机中是采用IEEE规定的标准浮点格式，即二进制科学表示法。<br>在这种表示法中，一个数 <code>S = M * 2 ^ N</code>。</p><p>其中N表示阶码，M表示位数(有效数字位)。<br>例如一个float类型的浮点，在32bit位上，占4个字节，字节表示为</p><pre><code>【31】N:【30 ~ 23】 M:【22~0】</code></pre><ul><li>31位表示符号位: 0正，1负</li><li>中间8位是阶码位: 表示范围【-128 ~ 127】,对于float类型数据规定其偏移量为127</li><li>后面23位是有效数字位: 因为科学计数法，整数位定死了是1，所以这里记录的是小数点后面的二进制为</li></ul><p>指数N决定它的范围，因为M总是一个以1开头的小数，以float来说即是：-2 ^ 128 ~ 2 ^ 128,即float能表示的数的大小的范围。</p><p>而它的精度是由位数(也就是有效的数据位)来决定的， 2 ^ 23 &#x3D; 8388608，总共7位，表示最多能用7位有效数字，最多能表示到.8388708即小数点后7位，由于不能完全表示全部的7位数，所以它的精度范围是6位~7位。</p><p>同理可得double的精度是2 ^ 52 &#x3D; 4503599627370496， 共16位，所以精度为15 ~ 16位。</p><h4 id="总结：float-double类型的范围和精度的计算方式"><a href="#总结：float-double类型的范围和精度的计算方式" class="headerlink" title="总结：float&#x2F;double类型的范围和精度的计算方式"></a>总结：float&#x2F;double类型的范围和精度的计算方式</h4><pre><code>不同机器字节序的规定公式： S = M * 2 ^ N二进制在内存中是以补码形式存储，负数要对其二进制绝对值按位取反再加一，正数的补码与原码形式相同</code></pre><p>也就是说float和doublel类型数据在计算机中存储可能是不精确的。<br>当我们需要转换成浮点类型是数据时，最好用double，因为double的精度更高，出现丢精度的概率相对是较小的。</p><p>在iOS中提供一个专用的类来处理浮点数据相关的运算：<code>NSDecimalNumber</code></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>使用<code>NSDecimalNumber</code>来进行浮点数处理。<br>我们给NSString添加一个分类来处理浮点运算问题</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///.h</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSString</span> (<span class="title">DecimalNumber</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSString</span> *)decimalNumberWithNSNumber:(<span class="built_in">NSNumber</span> * )number;</span><br><span class="line">+ (<span class="built_in">NSString</span> *)decimalNumberWithDouble:(<span class="type">double</span>)conversionValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///.m</span></span><br><span class="line"><span class="meta">#import <span class="string">&quot;NSString+DecimalNumber.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSString</span> (<span class="title">DecimalNumber</span>)</span></span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSString</span> *)decimalNumberWithNSNumber:(<span class="built_in">NSNumber</span> * )number</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> conversionValue = [number doubleValue];</span><br><span class="line">    <span class="built_in">NSString</span> *doubleString        = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%lf&quot;</span>, conversionValue];</span><br><span class="line">    <span class="built_in">NSDecimalNumber</span> *decNumber    = [<span class="built_in">NSDecimalNumber</span> decimalNumberWithString:doubleString];</span><br><span class="line">    <span class="keyword">return</span> [decNumber stringValue];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSString</span> *)decimalNumberWithDouble:(<span class="type">double</span>)conversionValue</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *doubleString        = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;%lf&quot;</span>, conversionValue];</span><br><span class="line">    <span class="built_in">NSDecimalNumber</span> *decNumber    = [<span class="built_in">NSDecimalNumber</span> decimalNumberWithString:doubleString];</span><br><span class="line">    <span class="keyword">return</span> [decNumber stringValue];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *numbers = @[</span><br><span class="line">                     @<span class="number">99.00</span>,</span><br><span class="line">                     @<span class="number">99.09</span>,</span><br><span class="line">                     @<span class="number">99.19</span>,</span><br><span class="line">                     @<span class="number">99.29</span>,</span><br><span class="line">                     @<span class="number">99.39</span>,</span><br><span class="line">                     @<span class="number">99.49</span>,</span><br><span class="line">                     @<span class="number">99.59</span>,</span><br><span class="line">                     @<span class="number">99.69</span>,</span><br><span class="line">                     @<span class="number">99.79</span>,</span><br><span class="line">                     @<span class="number">99.89</span>,</span><br><span class="line">                     @<span class="number">99.99</span>,</span><br><span class="line">                     ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numbers.count; i++) &#123;</span><br><span class="line">    <span class="built_in">NSNumber</span> *number = numbers[i];</span><br><span class="line">    <span class="built_in">NSString</span> *strValue = [<span class="built_in">NSString</span> decimalNumberWithNSNumber:number];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;strValue:%@&quot;</span>,strValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> oldVlue:99.00 strValue:99</span></span><br><span class="line"><span class="comment"> oldVlue:99.09 strValue:99.09</span></span><br><span class="line"><span class="comment"> oldVlue:99.19 strValue:99.19</span></span><br><span class="line"><span class="comment"> oldVlue:99.29 strValue:99.29</span></span><br><span class="line"><span class="comment"> oldVlue:99.39 strValue:99.39</span></span><br><span class="line"><span class="comment"> oldVlue:99.48 strValue:99.49</span></span><br><span class="line"><span class="comment"> oldVlue:99.59 strValue:99.59</span></span><br><span class="line"><span class="comment"> oldVlue:99.69 strValue:99.69</span></span><br><span class="line"><span class="comment"> oldVlue:99.79 strValue:99.79</span></span><br><span class="line"><span class="comment"> oldVlue:99.89 strValue:99.89</span></span><br><span class="line"><span class="comment"> oldVlue:99.99 strValue:99.99</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>问题得以解决。☕️</p><p>参考资料：</p><ul><li><a href="https://developer.apple.com/documentation/foundation/nsdecimalnumber">https://developer.apple.com/documentation/foundation/nsdecimalnumber</a></li><li><a href="http://www.jianshu.com/p/4703d704c953">http://www.jianshu.com/p/4703d704c953</a></li><li><a href="https://eezytutorials.com/ios/nsdecimalnumber-by-example.php">https://eezytutorials.com/ios/nsdecimalnumber-by-example.php</a></li><li><a href="http://www.skyfox.org/ios-nsdecimalnumber-use.html">http://www.skyfox.org/ios-nsdecimalnumber-use.html</a></li><li><a href="https://stackoverflow.com/questions/421463/should-i-use-nsdecimalnumber-to-deal-with-money">https://stackoverflow.com/questions/421463/should-i-use-nsdecimalnumber-to-deal-with-money</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;问题引出&quot;&gt;&lt;a href=&quot;#问题引出&quot; class=&quot;headerlink&quot; title=&quot;问题引出&quot;&gt;&lt;/a&gt;问题引出&lt;/h3&gt;&lt;p&gt;在开发中，涉及价格金额处理，后台会返回Number类型的数据，打印或者经过Json转Model后的NSString可能出现精</summary>
      
    
    
    
    <category term="iOS" scheme="https://blog.wangruofeng007.com/categories/iOS/"/>
    
    
    <category term="技巧" scheme="https://blog.wangruofeng007.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="效率" scheme="https://blog.wangruofeng007.com/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>NSSortDescriptor正确的打开方式</title>
    <link href="https://blog.wangruofeng007.com/2017/06/07/2017-06-07-nssortdescriptorzheng-que-de-da-kai-fang-shi/"/>
    <id>https://blog.wangruofeng007.com/2017/06/07/2017-06-07-nssortdescriptorzheng-que-de-da-kai-fang-shi/</id>
    <published>2017-06-06T16:09:44.000Z</published>
    <updated>2024-11-02T03:36:52.412Z</updated>
    
    <content type="html"><![CDATA[<p>排序是应用常见需求之一，如何正确优雅的实现一个排序，<code>NSSortDescriptor</code>或许是一个非常好的选择。</p><p><code>NSSortDescriptor</code>由3个参数组成：</p><ul><li><strong>key</strong>(键):对于一个给定的集合，将对集合种的每个对象按照该键来进行排序</li><li><strong>ascending</strong>(升序):指定集合按照升序(YES)还是降序(NO)进行排序</li><li><strong>selector</strong>(方法子):排序时的比较函数，当对字符串进行排序时，应当加入<code>localizedStandardCompare:</code>选择器，它将根据语言规则进行排序(例如大小写，变音符号等等的顺序)</li></ul><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p><code>NSSortDescriptor</code>主要针对各种集合排序,<code>NSArray</code>,<code>NSMutableArray</code>,<code>NSSet</code>,<code>NSOrderedSet</code>,<code>NSMutableOrderedSet</code></p><p>如果集合是可变的，则对集合本身排序例如</p><ul><li><code>NSMutableOrderedSet</code>的<code>sortUsingDescriptors:</code></li><li><code>NSMutableArray</code>的<code>sortUsingDescriptors:</code></li></ul><p>如果集合是可变的，则返回一个排好序的新集合例如</p><ul><li><code>NSArray</code>的<code>sortedArrayUsingDescriptors:</code></li><li><code>NSSet</code>的<code>sortedArrayUsingDescriptors:</code></li><li><code>NSOrderedSet</code>的<code>sortedArrayUsingDescriptors:</code></li></ul><p>注意排序描述是一个数组，也就是排序可以支持按照多个描述综合排序。如果存在多个规则先满足前面的规则再满足后面的规则。例如两个元素按照第一天规则顺序一致，那么如果还存在第二天规则，它们将按照第二条规则继续排序，如果前面的规则已经区分出顺序后面的规则将失效。</p><h3 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明"></a>实例说明</h3><p>为了更好的描述，假如我们有一个<code>Person</code>对象，它有**NSString * **类型的姓和名属性，以及一个<code>NSNumber</code>类型的年龄属性。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>  ) <span class="built_in">NSString</span> *firstName;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>  ) <span class="built_in">NSString</span> *lastName;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSNumber</span> *age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>给定以下数据集：</p><table><thead><tr><th>index</th><th align="center">0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>firstName</td><td align="center">Alice</td><td>Bod</td><td>Charlie</td><td>Quentin</td><td></td></tr><tr><td>lastName</td><td align="center">Smith</td><td>Jones</td><td>Smith</td><td></td><td>Alberts</td></tr><tr><td>age</td><td align="center">24</td><td>27</td><td>33</td><td>31</td><td>19</td></tr></tbody></table><p>使用不同的<code>NSSortDescriptor</code>的不同组合来将它们排序：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *firstNames = @[<span class="string">@&quot;Alice&quot;</span>, <span class="string">@&quot;Bod&quot;</span>, <span class="string">@&quot;Charlie&quot;</span>, <span class="string">@&quot;Quentin&quot;</span>, <span class="string">@&quot;&quot;</span>];</span><br><span class="line"><span class="built_in">NSArray</span> *lastNames = @[<span class="string">@&quot;Smith&quot;</span>, <span class="string">@&quot;Jones&quot;</span>, <span class="string">@&quot;Smith&quot;</span>, <span class="string">@&quot;&quot;</span>, <span class="string">@&quot;Alberts&quot;</span>];</span><br><span class="line"><span class="built_in">NSArray</span> *ages = @[@<span class="number">24</span>, @<span class="number">27</span>, @<span class="number">33</span>, @<span class="number">31</span>, @<span class="number">12</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSMutableArray</span> *people = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">[firstNames enumerateObjectsUsingBlock:^(<span class="type">id</span>  _Nonnull obj, <span class="built_in">NSUInteger</span> idx, <span class="type">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">    Person *person = [[Person alloc] init];</span><br><span class="line">    person.firstName = [firstNames objectAtIndex:idx];</span><br><span class="line">    person.lastName = [lastNames objectAtIndex:idx];</span><br><span class="line">    person.age = [ages objectAtIndex:idx];</span><br><span class="line">    </span><br><span class="line">    [people addObject:person];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSSortDescriptor</span> *firstNameSortDescriptor = [<span class="built_in">NSSortDescriptor</span> sortDescriptorWithKey:<span class="string">@&quot;firstName&quot;</span> ascending:<span class="literal">YES</span> selector:<span class="keyword">@selector</span>(localizedStandardCompare:)];</span><br><span class="line"><span class="built_in">NSSortDescriptor</span> *lastNameSortDescriptor = [<span class="built_in">NSSortDescriptor</span> sortDescriptorWithKey:<span class="string">@&quot;lastName&quot;</span> ascending:<span class="literal">YES</span> selector:<span class="keyword">@selector</span>(localizedStandardCompare:)];</span><br><span class="line"><span class="built_in">NSSortDescriptor</span> *ageSortDescriptor = [<span class="built_in">NSSortDescriptor</span> sortDescriptorWithKey:<span class="string">@&quot;age&quot;</span> ascending:<span class="literal">NO</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;By age: %@&quot;</span>,[people sortedArrayUsingDescriptors:@[ageSortDescriptor]]);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 2017-06-06 23:15:02.101 NSSort​Descriptor_Demo[9103:1255482] By age: (</span></span><br><span class="line"><span class="comment"> &quot;Charlie Smith 33&quot;,</span></span><br><span class="line"><span class="comment"> &quot;Quentin  31&quot;,</span></span><br><span class="line"><span class="comment"> &quot;Bod Jones 27&quot;,</span></span><br><span class="line"><span class="comment"> &quot;Alice Smith 24&quot;,</span></span><br><span class="line"><span class="comment"> &quot; Alberts 12&quot;</span></span><br><span class="line"><span class="comment"> )</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;By first name: %@&quot;</span>,[people sortedArrayUsingDescriptors:@[firstNameSortDescriptor]]);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 2017-06-06 23:15:02.102 NSSort​Descriptor_Demo[9103:1255482] By first name: (</span></span><br><span class="line"><span class="comment"> &quot; Alberts 12&quot;,</span></span><br><span class="line"><span class="comment"> &quot;Alice Smith 24&quot;,</span></span><br><span class="line"><span class="comment"> &quot;Bod Jones 27&quot;,</span></span><br><span class="line"><span class="comment"> &quot;Charlie Smith 33&quot;,</span></span><br><span class="line"><span class="comment"> &quot;Quentin  31&quot;</span></span><br><span class="line"><span class="comment"> )</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;By last name, first name: %@&quot;</span>,[people sortedArrayUsingDescriptors:@[lastNameSortDescriptor ,firstNameSortDescriptor]]);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 2017-06-06 23:15:02.102 NSSort​Descriptor_Demo[9103:1255482] By last name, first name: (</span></span><br><span class="line"><span class="comment"> &quot;Quentin  31&quot;,</span></span><br><span class="line"><span class="comment"> &quot; Alberts 12&quot;,</span></span><br><span class="line"><span class="comment"> &quot;Bod Jones 27&quot;,</span></span><br><span class="line"><span class="comment"> &quot;Alice Smith 24&quot;,</span></span><br><span class="line"><span class="comment"> &quot;Charlie Smith 33&quot;</span></span><br><span class="line"><span class="comment"> )</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>空字符是排在普通字符之前的</li><li>基本数据类型需要包装成<code>NSNumber</code>对象来排序</li><li>字符串类型排序需要加入<code>localizedStandardCompare:</code>选择器</li></ul><p>参考链接</p><ul><li><a href="http://nshipster.cn/nssortdescriptor/">NSSort​Descriptor – NSHipster</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;排序是应用常见需求之一，如何正确优雅的实现一个排序，&lt;code&gt;NSSortDescriptor&lt;/code&gt;或许是一个非常好的选择。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NSSortDescriptor&lt;/code&gt;由3个参数组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;key</summary>
      
    
    
    
    <category term="iOS" scheme="https://blog.wangruofeng007.com/categories/iOS/"/>
    
    
    <category term="技巧" scheme="https://blog.wangruofeng007.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>从OC到Swift你要知道的事</title>
    <link href="https://blog.wangruofeng007.com/2017/03/10/2017-03-10-cong-ocdao-swiftni-yao-zhi-dao-de-shi/"/>
    <id>https://blog.wangruofeng007.com/2017/03/10/2017-03-10-cong-ocdao-swiftni-yao-zhi-dao-de-shi/</id>
    <published>2017-03-10T15:04:24.000Z</published>
    <updated>2024-11-02T03:36:52.412Z</updated>
    
    <content type="html"><![CDATA[<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>Swift中枚举和结构体也上升到对象的位置，但是却不具备完整的对象特征，比如说他们不能继承。</p><p>在OC中枚举本质其实是整数类型，只是给他们取了一些意义直观的名称而已，而Swift完全摆脱以前的思想的束缚编的更自由，拥有了以下特征。</p><ul><li>类型更广，不限于整形，可以是<code>Character</code>，<code>String</code>，<code>Float</code>，<code>Double</code>等，这些叫做原始值</li><li>可以拥有自己的静态成员变量来储存一些常量</li><li>可以拥有自己的方法和变量</li><li><code>case</code>条件匹配可以定义参数，可以使用<code>where</code>来过滤</li><li>通过<code>rawValue</code>可以拿到枚举的原始值</li></ul><h4 id="原始值"><a href="#原始值" class="headerlink" title="原始值"></a>原始值</h4><p>如果提供了原始值，就可以在case声明成员时提供默认值，这样跟OC的枚举在结构上一些类似</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> WeekDays : Int &#123;</span><br><span class="line">    <span class="keyword">case</span> Monday    = <span class="number">0</span></span><br><span class="line">    <span class="keyword">case</span> Tuesday   = <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> Wednesday = <span class="number">2</span></span><br><span class="line">    <span class="keyword">case</span> Thursday  = <span class="number">3</span></span><br><span class="line">    <span class="keyword">case</span> Friday    = <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.声明一个枚举值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> monday <span class="operator">=</span> <span class="type">WeekDays</span>.<span class="type">Monday</span></span><br></pre></td></tr></table></figure><p>2.获取原始值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rawVlaue <span class="operator">=</span> <span class="type">WeekDays</span>.<span class="type">Tuesday</span>.rawValue</span><br></pre></td></tr></table></figure><p>3.通过原始值构造某个枚举变量</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> wednesday <span class="operator">=</span> <span class="type">WeekDays</span>.<span class="keyword">init</span>(rawValue: <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h4 id="相关值"><a href="#相关值" class="headerlink" title="相关值"></a>相关值</h4><p>和C的联合体有点类似</p><p>1.声明</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Figure &#123;</span><br><span class="line">    <span class="keyword">case</span> Rectangle(Int, Int)</span><br><span class="line">    <span class="keyword">case</span> Circle(Int)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.使用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">printFigure</span>(<span class="params">figure</span>: <span class="type">Figure</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> figure &#123;</span><br><span class="line">    <span class="keyword">case</span> .<span class="type">Rectangle</span>(<span class="keyword">let</span> width, <span class="keyword">let</span> height):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;width:<span class="subst">\(width)</span>, height:<span class="subst">\(height)</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> .<span class="type">Circle</span>(<span class="keyword">let</span> radius):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;the circle&#x27;s radius is:<span class="subst">\(radius)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> figure <span class="operator">=</span> <span class="type">Figure</span>.<span class="type">Rectangle</span>(<span class="number">1024</span>, <span class="number">768</span>)</span><br><span class="line">printFigure(figure)</span><br><span class="line"></span><br><span class="line">figure <span class="operator">=</span> .<span class="type">Circle</span>(<span class="number">600</span>)</span><br><span class="line">printFigure(figure)</span><br></pre></td></tr></table></figure><h3 id="OC与Swift中Options枚举的不同定义"><a href="#OC与Swift中Options枚举的不同定义" class="headerlink" title="OC与Swift中Options枚举的不同定义"></a>OC与Swift中Options枚举的不同定义</h3><h5 id="OC版本NS-OPTIONS"><a href="#OC版本NS-OPTIONS" class="headerlink" title="OC版本NS_OPTIONS"></a>OC版本NS_OPTIONS</h5><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, <span class="built_in">NSVolumeEnumerationOptions</span>) &#123;</span><br><span class="line">    <span class="comment">/* The mounted volume enumeration will skip hidden volumes.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">NSVolumeEnumerationSkipHiddenVolumes</span> = <span class="number">1</span>UL &lt;&lt; <span class="number">1</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* The mounted volume enumeration will produce file reference URLs rather than path-based URLs.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">NSVolumeEnumerationProduceFileReferenceURLs</span> = <span class="number">1</span>UL &lt;&lt; <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Swift版本OPTIONS"><a href="#Swift版本OPTIONS" class="headerlink" title="Swift版本OPTIONS"></a>Swift版本OPTIONS</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">NSVolumeEnumerationOptions</span> : <span class="title class_ inherited__">OptionSetType</span> &#123;</span><br><span class="line">    <span class="keyword">init</span>(<span class="params">rawValue</span> <span class="params">rawValue</span>: <span class="type">UInt</span>)</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">SkipHiddenVolumes</span>: <span class="type">NSVolumeEnumerationOptions</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">ProduceFileReferenceURLs</span>: <span class="type">NSVolumeEnumerationOptions</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UIView</span>.animateWithDuration(<span class="number">0.3</span>,</span><br><span class="line">                           delay: <span class="number">0.0</span>,</span><br><span class="line">                           options: [.<span class="type">CurveEaseIn</span>, .<span class="type">AllowUserInteraction</span>],</span><br><span class="line">                           animations: &#123;&#125;,</span><br><span class="line">                           completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>Swift中加强了结构体的能力，可以定义和使用属性，方法，下标，构造器等，但是不能被继承，没有强制类型抓换，使用析构器和引用计数等能力</p><p>通常使用结构体来充当数据模型，常量可以使用静态关键词<code>static</code>标示</p><h3 id="循环引用"><a href="#循环引用" class="headerlink" title="循环引用"></a>循环引用</h3><h4 id="Swift中解决循环强引用的方式"><a href="#Swift中解决循环强引用的方式" class="headerlink" title="Swift中解决循环强引用的方式"></a>Swift中解决循环强引用的方式</h4><ul><li>弱引用 – <code>weak</code></li><li>无主引用 – <code>unowned</code></li></ul><h4 id="解决闭包中循环引用"><a href="#解决闭包中循环引用" class="headerlink" title="解决闭包中循环引用"></a>解决闭包中循环引用</h4><p>[unowned 捕获对象]或者<br>[weak 捕获对象]</p><p>使用实例</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    let name: String</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 写法1</span></span><br><span class="line"><span class="comment">//    lazy var printName: () -&gt;() = &#123;</span></span><br><span class="line"><span class="comment">//        [weak self] in if let strongSelf = self &#123;</span></span><br><span class="line"><span class="comment">//            print(&quot;The name is \(strongSelf.name)&quot;)</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 写法2</span></span><br><span class="line">    lazy var printName: () -&gt;() = &#123;</span><br><span class="line">        [unowned <span class="keyword">self</span>] <span class="keyword">in</span> print(<span class="string">&quot;The name is \(self.name)&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    init(personName: String) &#123;</span><br><span class="line">        name = personName</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    deinit &#123;</span><br><span class="line">        print(<span class="string">&quot;Person deinit \(self.name)&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var xiaoMing: Person? = Person(personName: <span class="string">&quot;xiaoMing&quot;</span>)</span><br><span class="line">xiaoMing!.printName</span><br><span class="line">xiaoMing = <span class="literal">nil</span></span><br></pre></td></tr></table></figure><h5 id="二者的区别"><a href="#二者的区别" class="headerlink" title="二者的区别"></a>二者的区别</h5><p>如果我们可以确定在整个过程中 self 不会被释放的话，我们可以将上面的 weak 改为 unowned，这样就不再需要 strongSelf 的判断。但是如果在过程中 self 被释放了而 printName 这个闭包没有被释放的话 (比如 生成 Person 后，某个外部变量持有了 printName，随后这个 Persone 对象被释放了，但是 printName 已然存在并可能被调用)，使用 unowned 将造成崩溃。在这里我们需要根据实际的需求来决定是使用 weak 还是 unowned。</p><h3 id="OC和Swift中常用数据类型"><a href="#OC和Swift中常用数据类型" class="headerlink" title="OC和Swift中常用数据类型"></a>OC和Swift中常用数据类型</h3><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul><li>OC： NSString， NSMutableString</li><li>Swift： String</li></ul><p>NSString和String的关系：在Swift中，使用字符串可以使用Foundatio中的NSString和Swift中的String。</p><p>Swift在底层能够将String与NSString无缝地桥接起来，String可以调用NSString的全部API。</p><h4 id="数组类"><a href="#数组类" class="headerlink" title="数组类"></a>数组类</h4><ul><li>OC： NSArray, NSMutableArray</li><li>Swift： Array [AnyObject]</li></ul><p>NSArray和Array的关系：Swift能在底层将他们自动桥接起来，一个NSArray对象桥接后的结果是[AnyObject]。</p><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><ul><li>OC： NSDictionary， NSMutableDictionary</li><li>Swift： Dictionary [Object: AnyObject]</li></ul><p>NSDictionary和Dictionary的关系： 底层自动桥接，一个NSDictionary对象桥接后的结果是[Object: AnyObject]。</p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>类的转换使用 <code>as</code><br>数据类型加括号 <code>Int()</code></p><p>OC使用 <code>（新的类型）原来的变量</code></p><h3 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h3><p><code>is</code>关键词</p><p>相当于OC的<code>isKindofClass:</code></p><h3 id="辅助命令"><a href="#辅助命令" class="headerlink" title="辅助命令"></a>辅助命令</h3><ul><li>#file –&gt; _<em>FILE</em>_</li><li>#line –&gt; _<em>LINE</em>_</li><li>#function –&gt; _<em>func</em>_  或者 _<em>FUNCTION</em>_</li></ul><h3 id="退出程序"><a href="#退出程序" class="headerlink" title="退出程序"></a>退出程序</h3><ul><li>C: exit（0）</li><li>Swift: fatalError() 或者 fatalError(message: String)</li></ul><h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><ul><li>OC: <code>NSAssert</code></li><li>Swift: <code>assert()</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;枚举&quot;&gt;&lt;a href=&quot;#枚举&quot; class=&quot;headerlink&quot; title=&quot;枚举&quot;&gt;&lt;/a&gt;枚举&lt;/h3&gt;&lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;Swi</summary>
      
    
    
    
    <category term="Swift" scheme="https://blog.wangruofeng007.com/categories/Swift/"/>
    
    
    <category term="技巧" scheme="https://blog.wangruofeng007.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
</feed>
