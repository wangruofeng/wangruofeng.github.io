<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Database | 王若风的技术博客]]></title>
  <link href="http://wangruofeng.github.io/blog/categories/database/atom.xml" rel="self"/>
  <link href="http://wangruofeng.github.io/"/>
  <updated>2016-01-19T23:44:41+08:00</updated>
  <id>http://wangruofeng.github.io/</id>
  <author>
    <name><![CDATA[王若风]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SQLite_教程(七)]]></title>
    <link href="http://wangruofeng.github.io/blog/2016/01/14/sqlite-jiao-cheng-qi/"/>
    <updated>2016-01-14T01:46:57+08:00</updated>
    <id>http://wangruofeng.github.io/blog/2016/01/14/sqlite-jiao-cheng-qi</id>
    <content type="html"><![CDATA[<h4>SQLite Order By</h4>

<p>SQLite 的 <strong>ORDER BY</strong> 子句是用来基于一个或多个列按升序或降序顺序排列数据。</p>

<hr />

<p><strong>语法</strong></p>

<p>ORDER BY 子句的基本语法如下：</p>

<pre><code>SELECT column-list
FROM table_name
[WHERE condition]
[ORDER BY column1, column2, .. columnN] [ASC | DESC];
</code></pre>

<p>您可以在 ORDER BY 子句中使用多个列。确保您使用的排序列在列清单中。</p>

<p><strong>实例</strong></p>

<p>假设 COMPANY 表有以下记录：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>下面是一个实例，它会将结果按 SALARY 升序排序：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY ORDER BY SALARY ASC;
</code></pre>

<p>这将产生以下结果：</p>

<pre><code>    ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
7           James       24          Houston     10000.0
2           Allen       25          Texas       15000.0
1           Paul        32          California  20000.0
3           Teddy       23          Norway      20000.0
6           Kim         22          South-Hall  45000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
</code></pre>

<p>下面是一个实例，它会将结果按 NAME 和 SALARY 升序排序：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY ORDER BY NAME, SALARY ASC;
</code></pre>

<p>这将产生以下结果：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
2           Allen       25          Texas       15000.0
5           David       27          Texas       85000.0
7           James       24          Houston     10000.0
6           Kim         22          South-Hall  45000.0
4           Mark        25          Rich-Mond   65000.0
1           Paul        32          California  20000.0
3           Teddy       23          Norway      20000.0
</code></pre>

<p>下面是一个实例，它会将结果按 NAME 降序排序：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY ORDER BY NAME DESC;
</code></pre>

<p>这将产生以下结果：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
3           Teddy       23          Norway      20000.0
1           Paul        32          California  20000.0
4           Mark        25          Rich-Mond   65000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
5           David       27          Texas       85000.0
2           Allen       25          Texas       15000.0
</code></pre>

<h4>SQLite Group By</h4>

<p>SQLite 的 <strong>GROUP BY</strong> 子句用于与 SELECT 语句一起使用，来对相同的数据进行分组。
在 SELECT 语句中，GROUP BY 子句放在 WHERE 子句之后，放在 ORDER BY 子句之前。</p>

<hr />

<p><strong>语法</strong></p>

<p>下面给出了 GROUP BY 子句的基本语法。GROUP BY 子句必须放在 WHERE 子句中的条件之后，必须放在 ORDER BY 子句之前。</p>

<pre><code>SELECT column-list
FROM table_name
WHERE [ conditions ]
GROUP BY column1, column2....columnN
ORDER BY column1, column2....columnN
</code></pre>

<p>您可以在 GROUP BY 子句中使用多个列。确保您使用的分组列在列清单中。</p>

<p><strong>实例</strong></p>

<p>假设 COMPANY 表有以下记录：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>如果您想了解每个客户的工资总额，则可使用 GROUP BY 查询，如下所示：</p>

<pre><code>sqlite&gt; SELECT NAME, SUM(SALARY) FROM COMPANY GROUP BY NAME;
</code></pre>

<p>这将产生以下结果：</p>

<pre><code>NAME        SUM(SALARY)
----------  -----------
Allen       15000
David       85000
James       20000
Kim         45000
Mark        65000
Paul        40000
Teddy       20000
</code></pre>

<p>让我们把 ORDER BY 子句与 GROUP BY 子句一起使用，如下所示：</p>

<pre><code>sqlite&gt;  SELECT NAME, SUM(SALARY)
         FROM COMPANY GROUP BY NAME ORDER BY NAME DESC;
</code></pre>

<p>这将产生以下结果：</p>

<pre><code>NAME        SUM(SALARY)
----------  -----------
Teddy       20000
Paul        40000
Mark        65000
Kim         45000
James       20000
David       85000
Allen       15000
</code></pre>

<h4>SQLite Having 子句</h4>

<p>HAVING 子句允许指定条件来过滤将出现在最终结果中的分组结果。</p>

<p>WHERE 子句在所选列上设置条件，而 HAVING 子句则在由 GROUP BY 子句创建的分组上设置条件。</p>

<hr />

<p><strong>语法</strong></p>

<p>下面是 HAVING 子句在 SELECT 查询中的位置：</p>

<pre><code>SELECT
FROM
WHERE
GROUP BY
HAVING
ORDER BY
</code></pre>

<p>在一个查询中，HAVING 子句必须放在 GROUP BY 子句之后，必须放在 ORDER BY 子句之前。下面是包含 HAVING 子句的 SELECT 语句的语法：</p>

<pre><code>SELECT column1, column2
FROM table1, table2
WHERE [ conditions ]
GROUP BY column1, column2
HAVING [ conditions ]
ORDER BY column1, column2
</code></pre>

<p><strong>实例</strong></p>

<p>假设 COMPANY 表有以下记录：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
8           Paul        24          Houston     20000.0
9           James       44          Norway      5000.0
10          James       45          Texas       5000.0
</code></pre>

<p>下面是一个实例，它将显示名称计数小于 2 的所有记录：</p>

<pre><code>sqlite &gt; SELECT * FROM COMPANY GROUP BY name HAVING count(name) &lt; 2;
</code></pre>

<p>这将产生以下结果：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
2           Allen       25          Texas       15000
5           David       27          Texas       85000
6           Kim         22          South-Hall  45000
4           Mark        25          Rich-Mond   65000
3           Teddy       23          Norway      20000
</code></pre>

<p>下面是一个实例，它将显示名称计数大于 2 的所有记录,注意其实这里只返回最后一条记录：</p>

<pre><code>sqlite &gt; SELECT * FROM COMPANY GROUP BY name HAVING count(name) &gt; 2;
</code></pre>

<p>这将产生以下结果：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
10          James       45          Texas       5000
</code></pre>

<h4>SQLite Distinct 关键字</h4>

<p>SQLite 的 <strong>DISTINCT</strong> 关键字与 SELECT 语句一起使用，来消除所有重复的记录，并只获取唯一一次记录。
有可能出现一种情况，在一个表中有多个重复的记录。当提取这样的记录时，DISTINCT 关键字就显得特别有意义，它只获取唯一一次记录，而不是获取重复记录。</p>

<hr />

<p><strong>语法</strong></p>

<p>用于消除重复记录的 DISTINCT 关键字的基本语法如下：</p>

<pre><code>SELECT DISTINCT column1, column2,.....columnN
FROM table_name
WHERE [condition]
</code></pre>

<p><strong>实例</strong></p>

<p>假设 COMPANY 表有以下记录：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
8           Paul        24          Houston     20000.0
9           James       44          Norway      5000.0
10          James       45          Texas       5000.0
</code></pre>

<p>首先，让我们来看看下面的 SELECT 查询，它将返回重复的工资记录：</p>

<pre><code>sqlite&gt; SELECT name FROM COMPANY;
</code></pre>

<p>这将产生以下结果：</p>

<pre><code>NAME
----------
Paul
Allen
Teddy
Mark
David
Kim
James
Paul
James
James
</code></pre>

<p>现在，让我们在上述的 SELECT 查询中使用 DISTINCT 关键字：</p>

<pre><code>sqlite&gt; SELECT DISTINCT name FROM COMPANY;
</code></pre>

<p>这将产生以下结果，没有任何重复的条目：</p>

<pre><code>NAME
----------
Paul
Allen
Teddy
Mark
David
Kim
James
</code></pre>

<p>资料整理于：<a href="http://www.runoob.com/sqlite/sqlite-tutorial.html">RUNOOB.COM-SQLite教程</a>
转载请注明出处。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQLite_教程(六)]]></title>
    <link href="http://wangruofeng.github.io/blog/2016/01/14/sqlite-jiao-cheng-liu/"/>
    <updated>2016-01-14T01:41:01+08:00</updated>
    <id>http://wangruofeng.github.io/blog/2016/01/14/sqlite-jiao-cheng-liu</id>
    <content type="html"><![CDATA[<h4>SQLite Delete 语句</h4>

<p>SQLite 的 <strong>DELETE</strong> 查询用于删除表中已有的记录。可以使用带有 WHERE 子句的 DELETE 查询来删除选定行，否则所有的记录都会被删除。</p>

<hr />

<p><strong>语法</strong></p>

<p>带有 WHERE 子句的 DELETE 查询的基本语法如下：</p>

<pre><code>DELETE FROM table_name
WHERE [condition];
</code></pre>

<p>您可以使用 AND 或 OR 运算符来结合 N 个数量的条件。</p>

<p><strong>实例</strong></p>

<p>假设 COMPANY 表有以下记录：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>现在，COMPANY 表有以下记录：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
</code></pre>

<p>如果您想要从 COMPANY 表中删除所有记录，则不需要使用 WHERE 子句，DELETE 查询如下：</p>

<pre><code>sqlite&gt; DELETE FROM COMPANY;
</code></pre>

<p>现在，COMPANY 表中没有任何的记录，因为所有的记录已经通过 DELETE 语句删除。</p>

<h4>SQLite Like 子句</h4>

<p>SQLite 的 <strong>LIKE</strong> 运算符是用来匹配通配符指定模式的文本值。如果搜索表达式与模式表达式匹配，LIKE 运算符将返回真（true），也就是 1。这里有两个通配符与 LIKE 运算符一起使用：</p>

<ul>
<li>百分号 （%）</li>
<li>下划线 （_）</li>
</ul>


<p>百分号（%）代表零个、一个或多个数字或字符。下划线（_）代表一个单一的数字或字符。这些符号可以被组合使用。</p>

<hr />

<p><strong>语法</strong></p>

<p>% 和 _ 的基本语法如下：</p>

<pre><code>SELECT FROM table_name
WHERE column LIKE 'XXXX%'

or

SELECT FROM table_name
WHERE column LIKE '%XXXX%'

or

SELECT FROM table_name
WHERE column LIKE 'XXXX_'

or

SELECT FROM table_name
WHERE column LIKE '_XXXX'

or

SELECT FROM table_name
WHERE column LIKE '_XXXX_'
</code></pre>

<p>您可以使用 AND 或 OR 运算符来结合 N 个数量的条件。在这里，XXXX 可以是任何数字或字符串值。</p>

<p><strong>实例</strong></p>

<p>下面一些实例演示了 带有 &lsquo;%&rsquo; 和 &lsquo;_&rsquo; 运算符的 LIKE 子句不同的地方：</p>

<table>
<thead>
<tr>
<th> 语句                        </th>
<th>描述             </th>
</tr>
</thead>
<tbody>
<tr>
<td>WHERE SALARY LIKE &lsquo;200%&rsquo;   </td>
<td>查找以 200 开头的任意值</td>
</tr>
<tr>
<td>WHERE SALARY LIKE &lsquo;%200%&rsquo;  </td>
<td>查找任意位置包含 200 的任意值</td>
</tr>
<tr>
<td>WHERE SALARY LIKE &lsquo;_00\%&rsquo; </td>
<td>查找第二位和第三位为 00 的任意值</td>
</tr>
<tr>
<td> WHERE SALARY LIKE &lsquo;2_%_%&rsquo;</td>
<td>查找以 2 开头，且长度至少为 3 个字符的任意值</td>
</tr>
<tr>
<td>WHERE SALARY LIKE &lsquo;%2&rsquo;    </td>
<td>查找以 2 结尾的任意值</td>
</tr>
<tr>
<td>WHERE SALARY LIKE &lsquo;_2%3&rsquo;  </td>
<td>查找第二位为 2，且以 3 结尾的任意值</td>
</tr>
<tr>
<td>WHERE SALARY LIKE &lsquo;2___3&rsquo; </td>
<td>查找长度为 5 位数，且以 2 开头以 3 结尾的任意值</td>
</tr>
</tbody>
</table>


<p>让我们举一个实际的例子，假设 COMPANY 表有以下记录：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>下面是一个实例，它显示 COMPANY 表中 AGE 以 2 开头的所有记录：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY WHERE AGE  LIKE '2%';
</code></pre>

<p>这将产生以下结果：</p>

<pre><code>    ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>下面是一个实例，它显示 COMPANY 表中 ADDRESS 文本里包含一个连字符（-）的所有记录：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY WHERE ADDRESS  LIKE '%-%';
</code></pre>

<p>这将产生以下结果：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
4           Mark        25          Rich-Mond   65000.0
6           Kim         22          South-Hall  45000.0
</code></pre>

<h4>SQLite Glob 子句</h4>

<p>SQLite 的 <strong>GLOB</strong> 运算符是用来匹配通配符指定模式的文本值。如果搜索表达式与模式表达式匹配，GLOB 运算符将返回真（true），也就是 1。与 LIKE 运算符不同的是，GLOB 是大小写敏感的，对于下面的通配符，它遵循 UNIX 的语法。</p>

<ul>
<li>星号 （*）</li>
<li>问号 （?）</li>
</ul>


<p>星号（*）代表零个、一个或多个数字或字符。问号（?）代表一个单一的数字或字符。这些符号可以被组合使用。</p>

<hr />

<p><strong>语法</strong></p>

<p>* 和 ? 的基本语法如下：</p>

<pre><code>SELECT FROM table_name
WHERE column GLOB 'XXXX*'

or

SELECT FROM table_name
WHERE column GLOB '*XXXX*'

or

SELECT FROM table_name
WHERE column GLOB 'XXXX?'

or

SELECT FROM table_name
WHERE column GLOB '?XXXX'

or

SELECT FROM table_name
WHERE column GLOB '?XXXX?'

or

SELECT FROM table_name
WHERE column GLOB '????'
</code></pre>

<p>您可以使用 AND 或 OR 运算符来结合 N 个数量的条件。在这里，XXXX 可以是任何数字或字符串值。</p>

<hr />

<p><strong>实例</strong></p>

<p>下面一些实例演示了 带有 &lsquo;*&rsquo; 和 &lsquo;?&rsquo; 运算符的 GLOB 子句不同的地方：</p>

<table>
<thead>
<tr>
<th> 语句                                  </th>
<th>描述         </th>
</tr>
</thead>
<tbody>
<tr>
<td>WHERE SALARY GLOB &lsquo;200*&rsquo;              </td>
<td>查找以 200 开头的任意值</td>
</tr>
<tr>
<td>WHERE SALARY GLOB &lsquo;*200*&rsquo;            </td>
<td>查找任意位置包含 200 的任意值</td>
</tr>
<tr>
<td>WHERE SALARY GLOB &lsquo;?00*&rsquo;              </td>
<td>查找第二位和第三位为 00 的任意值</td>
</tr>
<tr>
<td>WHERE SALARY GLOB &lsquo;2??&rsquo;                </td>
<td>查找以 2 开头，且长度至少为 3 个字符的任意值</td>
</tr>
<tr>
<td>WHERE SALARY GLOB &lsquo;*2&rsquo;                </td>
<td>查找以 2 结尾的任意值 </td>
</tr>
<tr>
<td>WHERE SALARY GLOB &lsquo;?2*3&rsquo;               </td>
<td>查找第二位为 2，且以 3 结尾的任意值</td>
</tr>
<tr>
<td>WHERE SALARY GLOB &lsquo;2???3&rsquo;              </td>
<td>查找长度为 5 位数，且以 2 开头以 3 结尾的任意值</td>
</tr>
</tbody>
</table>


<p>让我们举一个实际的例子，假设 COMPANY 表有以下记录：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>下面是一个实例，它显示 COMPANY 表中 AGE 以 2 开头的所有记录：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY WHERE AGE  GLOB '2*';
</code></pre>

<p>这将产生以下结果：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>下面是一个实例，它显示 COMPANY 表中 ADDRESS 文本里包含一个连字符（-）的所有记录：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY WHERE ADDRESS  GLOB '*-*';
</code></pre>

<p>这将产生以下结果：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
4           Mark        25          Rich-Mond   65000.0
6           Kim         22          South-Hall  45000.0
</code></pre>

<h4>SQLite Limit 子句</h4>

<p>SQLite 的 <strong>LIMIT</strong> 子句用于限制由 SELECT 语句返回的数据数量。</p>

<hr />

<p><strong>语法</strong></p>

<p>带有 LIMIT 子句的 SELECT 语句的基本语法如下：</p>

<pre><code>SELECT column1, column2, columnN
FROM table_name
LIMIT [no of rows]
</code></pre>

<p>下面是 <code>LIMIT</code> 子句与 <code>OFFSET</code> 子句一起使用时的语法：</p>

<pre><code>SELECT column1, column2, columnN
FROM table_name
LIMIT [no of rows] OFFSET [row num]
</code></pre>

<p>SQLite 引擎将返回从下一行开始直到给定的 <code>OFFSET</code> 为止的所有行，如下面的最后一个实例所示。</p>

<p><strong>实例</strong></p>

<p>假设 COMPANY 表有以下记录：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>下面是一个实例，它限制了您想要从表中提取的行数：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY LIMIT 6;
</code></pre>

<p>这将产生以下结果：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
</code></pre>

<p>但是，在某些情况下，可能需要从一个特定的偏移开始提取记录(<code>OFFSET下标从0开始</code>)。下面是一个实例，从第三位开始提取 3 个记录：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY LIMIT 3 OFFSET 2;
</code></pre>

<p>这将产生以下结果：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
</code></pre>

<p>资料整理于：<a href="http://www.runoob.com/sqlite/sqlite-tutorial.html">RUNOOB.COM-SQLite教程</a>
转载请注明出处。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQLite_教程(五)]]></title>
    <link href="http://wangruofeng.github.io/blog/2016/01/14/sqlite-jiao-cheng-wu/"/>
    <updated>2016-01-14T01:35:50+08:00</updated>
    <id>http://wangruofeng.github.io/blog/2016/01/14/sqlite-jiao-cheng-wu</id>
    <content type="html"><![CDATA[<h4>SQL表达式</h4>

<p>表达式是一个或多个值、运算符和计算值的SQL函数的组合。</p>

<p>SQL 表达式与公式类似，都写在查询语言中。您还可以使用特定的数据集来查询数据库。</p>

<hr />

<p><strong>语法</strong></p>

<p>假设 SELECT 语句的基本语法如下：</p>

<pre><code>SELECT column1, column2, columnN
FROM table_name
WHERE [CONTION | EXPRESSION];
</code></pre>

<p>有不同类型的 SQLite 表达式，具体讲解如下：</p>

<h4>SQLite - 布尔表达式</h4>

<p>SQLite 的布尔表达式在匹配单个值的基础上获取数据。语法如下：</p>

<pre><code>SELECT column1, column2, columnN
FROM table_name
WHERE SINGLE VALUE MATCHTING EXPRESSION;
</code></pre>

<p>假设 COMPANY 表有以下记录：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>下面的实例演示了 SQLite 布尔表达式的用法：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY WHERE SALARY = 10000;
ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
4           James        24          Houston   10000.0
</code></pre>

<h4>SQLite - 数值表达式</h4>

<p>这些表达式用来执行查询中的任何数学运算。语法如下：</p>

<pre><code>SELECT numerical_expression as  OPERATION_NAME
[FROM table_name WHERE CONDITION] ;
</code></pre>

<p>在这里，numerical_expression 用于数学表达式或任何公式。下面的实例演示了 SQLite 数值表达式的用法：</p>

<pre><code>sqlite&gt; SELECT (15 + 6) AS ADDITION
ADDITION = 21
</code></pre>

<p>有几个内置的函数，比如 avg()、sum()、count()，等等，执行被称为对一个表或一个特定的表列的汇总数据计算。</p>

<pre><code>sqlite&gt; SELECT COUNT(*) AS "RECORDS" FROM COMPANY;
RECORDS = 7
</code></pre>

<hr />

<h4>SQLite - 日期表达式</h4>

<p>日期表达式返回当前系统日期和时间值，这些表达式将被用于各种数据操作。</p>

<pre><code>sqlite&gt;  SELECT CURRENT_TIMESTAMP;
CURRENT_TIMESTAMP = 2016-01-13 16:29:56
</code></pre>

<h4>SQLite Where 子句</h4>

<p>SQLite的 WHERE 子句用于指定从一个表或多个表中获取数据的条件。</p>

<p>如果满足给定的条件，即为真（true）时，则从表中返回特定的值。您可以使用 WHERE 子句来过滤记录，只获取需要的记录。</p>

<p>WHERE 子句不仅可用在 SELECT 语句中，它也可用在 UPDATE、DELETE 语句中，等等，这些我们将在随后的章节中学习到。</p>

<hr />

<p><strong>语法</strong></p>

<p>SQLite 的带有 WHERE 子句的 SELECT 语句的基本语法如下：</p>

<pre><code>SELECT column1, column2, columnN
FROM table_name
WHERE [condition]
</code></pre>

<p><strong>实例</strong></p>

<p>您还可以使用比较或逻辑运算符指定条件，比如 >、&lt;、=、LIKE、NOT，等等。假设 COMPANY 表有以下记录：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>下面的实例演示了 SQLite 逻辑运算符的用法。下面的 SELECT 语句列出了 AGE 大于等于 25 且工资大于等于 65000.00 的所有记录：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY WHERE AGE &gt;= 25 AND SALARY &gt;= 65000;
ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
</code></pre>

<p>下面的 SELECT 语句列出了 AGE 大于等于 25 或工资大于等于 65000.00 的所有记录：</p>

<p>sqlite> SELECT * FROM COMPANY WHERE AGE >= 25 OR SALARY >= 65000;</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
</code></pre>

<p>下面的 SELECT 语句列出了 AGE 不为 NULL 的所有记录，结果显示所有的记录，意味着没有一个记录的 AGE 等于 NULL：</p>

<pre><code>sqlite&gt;  SELECT * FROM COMPANY WHERE AGE IS NOT NULL;
ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>下面的 SELECT 语句列出了 NAME 以 &lsquo;Ki&rsquo; 开始的所有记录，'Ki' 之后的字符不做限制（不区分大小写）：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY WHERE NAME LIKE 'Ki%';
ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
6           Kim         22          South-Hall  45000.0
</code></pre>

<p>下面的 SELECT 语句列出了 NAME 以 &lsquo;Ki&rsquo; 开始的所有记录，'Ki' 之后的字符不做限制（区分大小写）：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY WHERE NAME GLOB 'Ki*';
ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
6           Kim         22          South-Hall  45000.0
</code></pre>

<p>下面的 SELECT 语句列出了 AGE 的值为 25 或 27 的所有记录：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY WHERE AGE IN ( 25, 27 );
ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
2           Allen       25          Texas       15000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
</code></pre>

<h4>SQLite AND/OR 运算符</h4>

<p>SQLite 的 AND 和 OR 运算符用于编译多个条件来缩小在 SQLite 语句中所选的数据。这两个运算符被称为连接运算符。</p>

<p>这些运算符为同一个 SQLite 语句中不同的运算符之间的多个比较提供了可能。</p>

<hr />

<h4>AND 运算符</h4>

<p>AND 运算符允许在一个 SQL 语句的 WHERE 子句中的多个条件的存在。使用 AND 运算符时，只有当所有条件都为真（true）时，整个条件为真（true）。例如，只有当 condition1 和 condition2 都为真（true）时，[condition1] AND [condition2] 为真（true）。</p>

<p><strong>语法</strong></p>

<p>带有 WHERE 子句的 AND 运算符的基本语法如下：</p>

<pre><code>SELECT column1, column2, columnN
FROM table_name
WHERE [condition1] AND [condition2]...AND [conditionN];
</code></pre>

<p>您可以使用 AND 运算符来结合 N 个数量的条件。SQLite 语句需要执行的动作是，无论是事务或查询，所有由 AND 分隔的条件都必须为真（TRUE）。</p>

<p><strong>实例</strong></p>

<p>假设 COMPANY 表有以下记录：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>下面的 SELECT 语句列出了 AGE 大于等于 25 且工资大于等于 65000.00 的所有记录：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY WHERE AGE &gt;= 25 AND SALARY &gt;= 65000;
ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
</code></pre>

<h4>OR 运算符</h4>

<p>OR 运算符也用于结合一个 SQL 语句的 WHERE 子句中的多个条件。使用 OR 运算符时，只要当条件中任何一个为真（true）时，整个条件为真（true）。例如，只要当 condition1 或 condition2 有一个为真（true）时，[condition1] OR [condition2] 为真（true）</p>

<p><strong>语法</strong></p>

<p>带有 WHERE 子句的 OR 运算符的基本语法如下：</p>

<pre><code>SELECT column1, column2, columnN
FROM table_name
WHERE [condition1] OR [condition2]...OR [conditionN]
</code></pre>

<p>您可以使用 OR 运算符来结合 N 个数量的条件。SQLite 语句需要执行的动作是，无论是事务或查询，只要任何一个由 OR 分隔的条件为真（TRUE）即可。</p>

<p><strong>实例</strong></p>

<p>假设 COMPANY 表有以下记录：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>下面的 SELECT 语句列出了 AGE 大于等于 25 或工资大于等于 65000.00 的所有记录：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY WHERE AGE &gt;= 25 OR SALARY &gt;= 65000;
ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
</code></pre>

<h4>SQLite Update 语句</h4>

<p>SQLite 的 <strong>UPDATE </strong>查询用于修改表中已有的记录。可以使用带有 WHERE 子句的 UPDATE 查询来更新选定行，否则所有的行都会被更新。</p>

<hr />

<p><strong>语法</strong></p>

<p>带有 WHERE 子句的 UPDATE 查询的基本语法如下：</p>

<pre><code>UPDATE table_name
SET column1 = value1, column2 = value2...., columnN = valueN
WHERE [condition];
</code></pre>

<p>您可以使用 AND 或 OR 运算符来结合 N 个数量的条件。</p>

<hr />

<p><strong>实例</strong></p>

<p>假设 COMPANY 表有以下记录：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>下面是一个实例，它会更新 ID 为 6 的客户地址：</p>

<pre><code>sqlite&gt; UPDATE COMPANY SET ADDRESS = 'Texas' WHERE ID = 6;
</code></pre>

<p>现在，COMPANY 表有以下记录：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          Texas       45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>如果您想修改 COMPANY 表中 ADDRESS 和 SALARY 列的所有值，则不需要使用 WHERE 子句，UPDATE 查询如下：</p>

<pre><code>sqlite&gt; UPDATE COMPANY SET ADDRESS = 'Texas', SALARY = 20000.00;
</code></pre>

<p>现在，COMPANY 表有以下记录：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          Texas       20000.0
2           Allen       25          Texas       20000.0
3           Teddy       23          Texas       20000.0
4           Mark        25          Texas       20000.0
5           David       27          Texas       20000.0
6           Kim         22          Texas       20000.0
7           James       24          Texas       20000.0
</code></pre>

<p>资料整理于：<a href="http://www.runoob.com/sqlite/sqlite-tutorial.html">RUNOOB.COM-SQLite教程</a>
转载请注明出处。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQLite_教程(四)]]></title>
    <link href="http://wangruofeng.github.io/blog/2016/01/13/sqlite-jiao-cheng-si/"/>
    <updated>2016-01-13T23:37:18+08:00</updated>
    <id>http://wangruofeng.github.io/blog/2016/01/13/sqlite-jiao-cheng-si</id>
    <content type="html"><![CDATA[<h3>SQLite 运算符</h3>

<p><strong>SQLite 运算符是什么？</strong></p>

<p>运算符是一个保留字或字符，主要用于 SQLite 语句的 WHERE 子句中执行操作，如比较和算术运算。</p>

<p>运算符用于指定 SQLite 语句中的条件，并在语句中连接多个条件。</p>

<ul>
<li>算术运算符</li>
<li>比较运算符</li>
<li>逻辑运算符</li>
<li>位运算符</li>
</ul>


<hr />

<h4>SQLite 算术运算符</h4>

<p>假设变量 a=10，变量 b=20，则：</p>

<table>
<thead>
<tr>
<th>运算符  </th>
<th>描述                      </th>
<th>实例      </th>
</tr>
</thead>
<tbody>
<tr>
<td>+      </td>
<td>加法 - 把运算符两边的值相加</td>
<td>a + b 将得到 30</td>
</tr>
<tr>
<td>-      </td>
<td>减法 - 左操作数减去右操作数</td>
<td>a - b 将得到 -10</td>
</tr>
<tr>
<td>*      </td>
<td>乘法 - 把运算符两边的值相乘</td>
<td>a * b 将得到 200</td>
</tr>
<tr>
<td>/      </td>
<td>除法 - 左操作数除以右操作数</td>
<td>b / a 将得到 2</td>
</tr>
<tr>
<td>%      </td>
<td>取模 - 左操作数除以右操作数后得到的余数</td>
<td>b % a will give 0</td>
</tr>
</tbody>
</table>


<p><strong>实例</strong></p>

<p>下面是 SQLite 算术运算符的简单实例：</p>

<pre><code>sqlite&gt; .mode line
sqlite&gt; select 10 + 20;
10 + 20 = 30


sqlite&gt; select 10 - 20;
10 - 20 = -10


sqlite&gt; select 10 * 20;
10 * 20 = 200


sqlite&gt; select 10 / 5;
10 / 5 = 2


sqlite&gt; select 12 %  5;
12 %  5 = 2
</code></pre>

<h4>SQLite 比较运算符</h4>

<p>假设变量 a=10，变量 b=20，则：</p>

<table>
<thead>
<tr>
<th>运算符  </th>
<th>描述                                       </th>
<th>实例     </th>
</tr>
</thead>
<tbody>
<tr>
<td>==     </td>
<td>检查两个操作数的值是否相等，如果相等则条件为真。</td>
<td>(a == b) 不为真。</td>
</tr>
<tr>
<td>=      </td>
<td>检查两个操作数的值是否相等，如果相等则条件为真。</td>
<td>(a = b) 不为真。</td>
</tr>
<tr>
<td>!=     </td>
<td>检查两个操作数的值是否相等，如果不相等则条件为真。</td>
<td>(a != b) 为真。</td>
</tr>
<tr>
<td>&lt;>     </td>
<td>检查两个操作数的值是否相等，如果不相等则条件为真。</td>
<td>(a &lt;> b) 为真。</td>
</tr>
<tr>
<td>>      </td>
<td>检查左操作数的值是否大于右操作数的值，如果是则条件为真。</td>
<td>(a > b) 不为真。</td>
</tr>
<tr>
<td>&lt;      </td>
<td>检查左操作数的值是否小于右操作数的值，如果是则条件为真。</td>
<td>(a &lt; b) 为真。</td>
</tr>
<tr>
<td>>=     </td>
<td>检查左操作数的值是否大于等于右操作数的值，如果是则条件为真。</td>
<td>(a >= b) 不为真。</td>
</tr>
<tr>
<td>&lt;=     </td>
<td>检查左操作数的值是否小于等于右操作数的值，如果是则条件为真。</td>
<td>(a &lt;= b) 为真。</td>
</tr>
<tr>
<td>!&lt;     </td>
<td>检查左操作数的值是否不小于右操作数的值，如果是则条件为真。</td>
<td>(a !&lt; b) 为假</td>
</tr>
<tr>
<td>!>     </td>
<td>检查左操作数的值是否不大于右操作数的值，如果是则条件为真。</td>
<td>(a !> b) 为真</td>
</tr>
</tbody>
</table>


<p><strong>实例</strong>
假设 COMPANY 表有以下记录：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>下面的实例演示了各种 SQLite 比较运算符的用法。</p>

<blockquote><p>在这里，我们使用 WHERE 子句，这将会在后边单独的一个章节中讲解，但现在您需要明白，WHERE 子句是用来设置 SELECT 语句的条件语句。</p></blockquote>

<p>下面的 SELECT 语句列出了 SALARY 大于 50,000.00 的所有记录：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY WHERE SALARY &gt; 50000;
ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
</code></pre>

<p>下面的 SELECT 语句列出了 SALARY 等于 20,000.00 的所有记录：</p>

<pre><code>sqlite&gt;  SELECT * FROM COMPANY WHERE SALARY = 20000;
ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
3           Teddy       23          Norway      20000.0
</code></pre>

<p>下面的 SELECT 语句列出了 SALARY 不等于 20,000.00 的所有记录：</p>

<pre><code>sqlite&gt;  SELECT * FROM COMPANY WHERE SALARY != 20000;
ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
2           Allen       25          Texas       15000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>下面的 SELECT 语句列出了 SALARY 不等于 20,000.00 的所有记录：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY WHERE SALARY &lt;&gt; 20000;
ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
2           Allen       25          Texas       15000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>下面的 SELECT 语句列出了 SALARY 大于等于 65,000.00 的所有记录：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY WHERE SALARY &gt;= 65000;
ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
</code></pre>

<h4>SQLite 逻辑运算符</h4>

<p>下面是 SQLite 中所有的逻辑运算符列表。</p>

<table>
<thead>
<tr>
<th>运算符    </th>
<th>描述                              </th>
</tr>
</thead>
<tbody>
<tr>
<td>AND      </td>
<td>AND 运算符允许在一个 SQL 语句的 WHERE 子句中的多个条件的存在。</td>
</tr>
<tr>
<td>BETWEEN  </td>
<td>BETWEEN 运算符用于在给定最小值和最大值范围内的一系列值中搜索值。</td>
</tr>
<tr>
<td>EXISTS   </td>
<td>EXISTS 运算符用于在满足一定条件的指定表中搜索行的存在。</td>
</tr>
<tr>
<td>IN       </td>
<td>IN 运算符用于把某个值与一系列指定列表的值进行比较。</td>
</tr>
<tr>
<td>NOT IN   </td>
<td>IN 运算符的对立面，用于把某个值与不在一系列指定列表的值进行比较。</td>
</tr>
<tr>
<td>LIKE     </td>
<td>LIKE 运算符用于把某个值与使用通配符运算符的相似值进行比较。</td>
</tr>
<tr>
<td>GLOB     </td>
<td>GLOB 运算符用于把某个值与使用通配符运算符的相似值进行比较。GLOB 与 LIKE 不同之处在于，它是大小写敏感的。</td>
</tr>
<tr>
<td>NOT      </td>
<td>NOT 运算符是所用的逻辑运算符的对立面。比如 NOT EXISTS、NOT BETWEEN、NOT IN，等等。它是否定运算符。</td>
</tr>
<tr>
<td>OR       </td>
<td>OR 运算符用于结合一个 SQL 语句的 WHERE 子句中的多个条件。</td>
</tr>
<tr>
<td>IS NULL  </td>
<td>NULL 运算符用于把某个值与 NULL 值进行比较。</td>
</tr>
<tr>
<td>IS       </td>
<td>IS 运算符与 = 相似。</td>
</tr>
<tr>
<td>IS NOT   </td>
<td>IS NOT 运算符与 != 相似。</td>
</tr>
<tr>
<td>||     </td>
<td>连接两个不同的字符串，得到一个新的字符串。</td>
</tr>
<tr>
<td>UNIQUE   </td>
<td>UNIQUE 运算符搜索指定表中的每一行，确保唯一性（无重复）。</td>
</tr>
</tbody>
</table>


<p><strong>实例</strong>
假设 COMPANY 表有以下记录：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>下面的实例演示了 SQLite 逻辑运算符的用法。
下面的 SELECT 语句列出了 AGE 大于等于 25 且工资大于等于 65000.00 的所有记录：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY WHERE AGE &gt;= 25 AND SALARY &gt;= 65000;
ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
</code></pre>

<p>下面的 SELECT 语句列出了 AGE 大于等于 25 或工资大于等于 65000.00 的所有记录：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY WHERE AGE &gt;= 25 OR SALARY &gt;= 65000;
ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
</code></pre>

<p>下面的 SELECT 语句列出了 AGE 不为 NULL 的所有记录，结果显示所有的记录，意味着没有一个记录的 AGE 等于 NULL：</p>

<pre><code>sqlite&gt;  SELECT * FROM COMPANY WHERE AGE IS NOT NULL;
ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>下面的 SELECT 语句列出了 NAME 以 &lsquo;Ki&rsquo; 开始的所有记录，'Ki' 之后的字符不做限制：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY WHERE NAME LIKE 'Ki%';
ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
6           Kim         22          South-Hall  45000.0
</code></pre>

<p>下面的 SELECT 语句列出了 NAME 以 &lsquo;Ki&rsquo; 开始的所有记录，'Ki' 之后的字符不做限制：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY WHERE NAME GLOB 'Ki*';
ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
6           Kim         22          South-Hall  45000.0
</code></pre>

<p>下面的 SELECT 语句列出了 AGE 的值为 25 或 27 的所有记录：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY WHERE AGE IN ( 25, 27 );
ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
2           Allen       25          Texas       15000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
</code></pre>

<p>下面的 SELECT 语句列出了 AGE 的值既不是 25 也不是 27 的所有记录：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY WHERE AGE NOT IN ( 25, 27 );
ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
3           Teddy       23          Norway      20000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>下面的 SELECT 语句使用 SQL 子查询，子查询查找 SALARY > 65000 的带有 AGE 字段的所有记录，后边的 WHERE 子句与 EXISTS 运算符一起使用，列出了外查询中的 AGE 存在于子查询返回的结果中的所有记录：</p>

<pre><code>sqlite&gt; SELECT AGE FROM COMPANY
        WHERE EXISTS (SELECT AGE FROM COMPANY WHERE SALARY &gt; 65000);
AGE
----------
32
25
23
25
27
22
24
</code></pre>

<p>下面的 SELECT 语句使用 SQL 子查询，子查询查找 SALARY > 65000 的带有 AGE 字段的所有记录，后边的 WHERE 子句与 > 运算符一起使用，列出了外查询中的 AGE 大于子查询返回的结果中的年龄的所有记录：</p>

<pre><code>sqlite&gt; SELECT * FROM COMPANY
        WHERE AGE &gt; (SELECT AGE FROM COMPANY WHERE SALARY &gt; 65000);
ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
</code></pre>

<h4>SQLite 位运算符</h4>

<p>位运算符作用于位，并逐位执行操作。真值表 &amp; 和 | 如下：</p>

<table>
<thead>
<tr>
<th>p  </th>
<th>q  </th>
<th>p&amp;q</th>
<th>p|q</th>
</tr>
</thead>
<tbody>
<tr>
<td>0  </td>
<td>0  </td>
<td>0  </td>
<td>0</td>
</tr>
<tr>
<td>0  </td>
<td>1  </td>
<td>0  </td>
<td>1</td>
</tr>
<tr>
<td>1  </td>
<td>1  </td>
<td>1  </td>
<td>1</td>
</tr>
<tr>
<td>1  </td>
<td>0  </td>
<td>0  </td>
<td>1</td>
</tr>
</tbody>
</table>


<p>假设如果 A = 60，且 B = 13，现在以二进制格式，它们如下所示：</p>

<p>A = 0011 1100</p>

<p>B = 0000 1101</p>

<hr />

<p>A&amp;B = 0000 1100</p>

<p>A|B = 0011 1101</p>

<p>~A  = 1100 0011</p>

<p>下表中列出了 SQLite 语言支持的位运算符。假设变量 A=60，变量 B=13，则：</p>

<table>
<thead>
<tr>
<th>运算符  </th>
<th>描述                              </th>
<th>实例     </th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp;      </td>
<td>   如果同时存在于两个操作数中，二进制 AND 运算符复制一位到结果中。    </td>
<td>(A &amp; B) 将得到 12，即为 0000 1100</td>
</tr>
<tr>
<td>|     </td>
<td>如果存在于任一操作数中，二进制 OR 运算符复制一位到结果中。  </td>
<td>(A | B) 将得到 61，即为 0011 1101</td>
</tr>
<tr>
<td>~      </td>
<td>二进制补码运算符是一元运算符，具有"翻转"位效应。    </td>
<td>(~A ) 将得到 -61，即为 1100 0011，2 的补码形式，带符号的二进制数。</td>
</tr>
<tr>
<td>&lt;&lt;     </td>
<td>二进制左移运算符。左操作数的值向左移动右操作数指定的位数。    </td>
<td>A &lt;&lt; 2 将得到 240，即为 1111 0000</td>
</tr>
<tr>
<td>>>     </td>
<td>二进制右移运算符。左操作数的值向右移动右操作数指定的位数。    </td>
<td>A >> 2 将得到 15，即为 0000 1111</td>
</tr>
</tbody>
</table>


<p><strong>实例</strong></p>

<p>下面的实例演示了 SQLite 位运算符的用法：</p>

<pre><code>sqlite&gt; .mode line
sqlite&gt; select 60 | 13;
60 | 13 = 61

sqlite&gt; select 60 &amp; 13;
60 &amp; 13 = 12

sqlite&gt; select  60 ^ 13;
10 * 20 = 200


sqlite&gt;  select  (~60);
(~60) = -61

sqlite&gt;  select  (60 &lt;&lt; 2);
(60 &lt;&lt; 2) = 240

sqlite&gt;  select  (60 &gt;&gt; 2);
(60 &gt;&gt; 2) = 15
</code></pre>

<p>资料整理于：<a href="http://www.runoob.com/sqlite/sqlite-tutorial.html">RUNOOB.COM-SQLite教程</a>
转载请注明出处。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQLite_教程(三)]]></title>
    <link href="http://wangruofeng.github.io/blog/2016/01/13/sqlite-jiao-cheng-san/"/>
    <updated>2016-01-13T23:22:37+08:00</updated>
    <id>http://wangruofeng.github.io/blog/2016/01/13/sqlite-jiao-cheng-san</id>
    <content type="html"><![CDATA[<h4>SQLite Insert 语句</h4>

<p>SQLite 的 INSERT INTO 语句用于向数据库的某个表中添加新的数据行。</p>

<hr />

<p><strong>语法</strong></p>

<p>INSERT INTO 语句有两种基本语法，如下所示：</p>

<pre><code>INSERT INTO TABLE_NAME (column1, column2, column3,...columnN)]  
VALUES (value1, value2, value3,...valueN);
</code></pre>

<p>在这里，column1, column2,&hellip;columnN 是要插入数据的表中的列的名称。
如果要为表中的所有列添加值，您也可以不需要在 SQLite 查询中指定列名称。但要确保值的顺序与列在表中的顺序一致。SQLite 的 INSERT INTO 语法如下：</p>

<pre><code>INSERT INTO TABLE_NAME VALUES (value1,value2,value3,...valueN);
</code></pre>

<hr />

<p><strong>实例</strong></p>

<p>假设您已经在 testDB.db 中创建了 COMPANY表，如下所示：</p>

<pre><code>sqlite&gt; CREATE TABLE COMPANY(
   ID INT PRIMARY KEY     NOT NULL,
   NAME           TEXT    NOT NULL,
   AGE            INT     NOT NULL,
   ADDRESS        CHAR(50),
   SALARY         REAL
);
</code></pre>

<p>现在，下面的语句将在 COMPANY 表中创建六个记录：</p>

<pre><code>INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (1, 'Paul', 32, 'California', 20000.00 );

INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (2, 'Allen', 25, 'Texas', 15000.00 );

INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (3, 'Teddy', 23, 'Norway', 20000.00 );

INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (4, 'Mark', 25, 'Rich-Mond ', 65000.00 );

INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (5, 'David', 27, 'Texas', 85000.00 );

INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (6, 'Kim', 22, 'South-Hall', 45000.00 );
</code></pre>

<p>您也可以使用第二种语法在 COMPANY 表中创建一个记录，如下所示：</p>

<pre><code>INSERT INTO COMPANY VALUES (7, 'James', 24, 'Houston', 10000.00 );
</code></pre>

<p>上面的所有语句将在 COMPANY 表中创建下列记录。下一章会教您如何从一个表中显示所有这些记录。</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<h4>使用一个表来填充另一个表</h4>

<p>您可以通过在一个有一组字段的表上使用 select 语句，填充数据到另一个表中。下面是语法：</p>

<pre><code>INSERT INTO first_table_name [(column1, column2, ... columnN)]
   SELECT column1, column2, ...columnN
   FROM second_table_name
   [WHERE condition];
</code></pre>

<h4>SQLite Select 语句</h4>

<p>SQLite 的 SELECT 语句用于从 SQLite 数据库表中获取数据，以结果表的形式返回数据。这些结果表也被称为结果集。</p>

<hr />

<p><strong>语法</strong></p>

<p>SQLite 的 SELECT 语句的基本语法如下：</p>

<pre><code>SELECT column1, column2, columnN FROM table_name;
</code></pre>

<p>在这里，column1, column2&hellip;是表的字段，他们的值即是您要获取的。如果您想获取所有可用的字段，那么可以使用下面的语法：</p>

<pre><code>SELECT * FROM table_name;
</code></pre>

<hr />

<p><strong>实例</strong></p>

<p>假设 COMPANY 表有以下记录：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>下面是一个实例，使用 SELECT 语句获取并显示所有这些记录。在这里，前三个命令被用来设置正确格式化的输出。</p>

<pre><code>sqlite&gt;.header on
sqlite&gt;.mode column
sqlite&gt; SELECT * FROM COMPANY;
</code></pre>

<p>最后，将得到以下的结果：</p>

<pre><code>ID          NAME        AGE         ADDRESS     SALARY
----------  ----------  ----------  ----------  ----------
1           Paul        32          California  20000.0
2           Allen       25          Texas       15000.0
3           Teddy       23          Norway      20000.0
4           Mark        25          Rich-Mond   65000.0
5           David       27          Texas       85000.0
6           Kim         22          South-Hall  45000.0
7           James       24          Houston     10000.0
</code></pre>

<p>如果只想获取 COMPANY 表中指定的字段，则使用下面的查询：</p>

<pre><code>sqlite&gt; SELECT ID, NAME, SALARY FROM COMPANY;
</code></pre>

<p>上面的查询会产生以下结果：</p>

<pre><code>ID          NAME        SALARY
----------  ----------  ----------
1           Paul        20000.0
2           Allen       15000.0
3           Teddy       20000.0
4           Mark        65000.0
5           David       85000.0
6           Kim         45000.0
7           James       10000.0
</code></pre>

<hr />

<p><strong>设置输出列的宽度</strong></p>

<p>有时，由于要显示的列的默认宽度导致 .mode column，这种情况下，输出被截断。此时，您可以使用 .width num, num&hellip;. 命令设置显示列的宽度，如下所示：</p>

<pre><code>sqlite&gt;.width 10, 20, 10
sqlite&gt;SELECT * FROM COMPANY;
</code></pre>

<p>上面的 .width 命令设置第一列的宽度为 10，第二列的宽度为 20，第三列的宽度为 10。因此上述 SELECT 语句将得到以下结果：</p>

<pre><code>ID          NAME                  AGE         ADDRESS     SALARY
----------  --------------------  ----------  ----------  ----------
1           Paul                  32          California  20000.0
2           Allen                 25          Texas       15000.0
3           Teddy                 23          Norway      20000.0
4           Mark                  25          Rich-Mond   65000.0
5           David                 27          Texas       85000.0
6           Kim                   22          South-Hall  45000.0
7           James                 24          Houston     10000.0
</code></pre>

<p><strong>Schema 信息</strong>
因为所有的点命令只在 SQLite 提示符中可用，所以当您进行带有 SQLite 的编程时，您要使用下面的带有 sqlite_master 表的 SELECT 语句来列出所有在数据库中创建的表：</p>

<pre><code>sqlite&gt; SELECT tbl_name FROM sqlite_master WHERE type = 'table';
</code></pre>

<p>假设在 testDB.db 中已经存在唯一的 COMPANY 表，则将产生以下结果：</p>

<pre><code>tbl_name
----------
COMPANY
</code></pre>

<p>您可以列出关于 COMPANY 表的完整信息，如下所示：</p>

<pre><code>sqlite&gt; SELECT sql FROM sqlite_master WHERE type = 'table' AND tbl_name = 'COMPANY';
</code></pre>

<p>假设在 testDB.db 中已经存在唯一的 COMPANY 表，则将产生以下结果：</p>

<pre><code>CREATE TABLE COMPANY(
   ID INT PRIMARY KEY     NOT NULL,
   NAME           TEXT    NOT NULL,
   AGE            INT     NOT NULL,
   ADDRESS        CHAR(50),
   SALARY         REAL
)
</code></pre>

<p>资料整理于：<a href="http://www.runoob.com/sqlite/sqlite-tutorial.html">RUNOOB.COM-SQLite教程</a>
转载请注明出处。</p>
]]></content>
  </entry>
  
</feed>
